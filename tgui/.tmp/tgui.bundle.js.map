{"version":3,"file":"tgui.bundle.js","sources":["webpack://tgui-workspace/./packages/common/bem.ts","webpack://tgui-workspace/./packages/tgui/index.js","webpack://tgui-workspace/./packages/tgui/interfaces/AIMap.js","webpack://tgui-workspace/./packages/tgui/interfaces/AIRack.js","webpack://tgui-workspace/./packages/tgui/interfaces/Airlock.js","webpack://tgui-workspace/./packages/tgui/interfaces/AlertModal.js","webpack://tgui-workspace/./packages/tgui/interfaces/Apc/AccessPanel.js","webpack://tgui-workspace/./packages/tgui/interfaces/Apc/PowerChannelSection.js","webpack://tgui-workspace/./packages/tgui/interfaces/Apc/Wire.js","webpack://tgui-workspace/./packages/tgui/interfaces/Apc/index.js","webpack://tgui-workspace/./packages/tgui/interfaces/ArtifactPaper.js","webpack://tgui-workspace/./packages/tgui/interfaces/BarcodeComputer.js","webpack://tgui-workspace/./packages/tgui/interfaces/BugReportForm.js","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/CharacterTab.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/GameSettingsTab.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/GeneralTab.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/SavesTab.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CharacterPreferences/type.ts","webpack://tgui-workspace/./packages/tgui/interfaces/ChemDispenser.js","webpack://tgui-workspace/./packages/tgui/interfaces/ChemHeater.js","webpack://tgui-workspace/./packages/tgui/interfaces/CloningConsole.js","webpack://tgui-workspace/./packages/tgui/interfaces/ComUplink/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/ContributorRewards.js","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/EmptyPlaceholder.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Module.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Tools.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/action.ts","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/style.ts","webpack://tgui-workspace/./packages/tgui/interfaces/CyborgModuleRewriter/type.ts","webpack://tgui-workspace/./packages/tgui/interfaces/DJPanel.js","webpack://tgui-workspace/./packages/tgui/interfaces/DisposalChute/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/DisposalChute/type.ts","webpack://tgui-workspace/./packages/tgui/interfaces/DoorTimer/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/EngineStats.js","webpack://tgui-workspace/./packages/tgui/interfaces/Filteriffic.js","webpack://tgui-workspace/./packages/tgui/interfaces/FlockPanel.js","webpack://tgui-workspace/./packages/tgui/interfaces/GasCanister/Detonator.js","webpack://tgui-workspace/./packages/tgui/interfaces/GasCanister/DetonatorTimer.js","webpack://tgui-workspace/./packages/tgui/interfaces/GasCanister/index.js","webpack://tgui-workspace/./packages/tgui/interfaces/GasTank.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/AppearanceEditor.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/BioEffect.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/DNASequence.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/GeneIcon.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/index.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/modals/BuyMaterialsModal.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/modals/CombineGenesModal.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/modals/UnlockModal.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/tabs/MutationsTab.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/tabs/ResearchTab.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/tabs/ScannerTab.js","webpack://tgui-workspace/./packages/tgui/interfaces/GeneTek/tabs/StorageTab.js","webpack://tgui-workspace/./packages/tgui/interfaces/GimmickObject.js","webpack://tgui-workspace/./packages/tgui/interfaces/GlassRecycler.js","webpack://tgui-workspace/./packages/tgui/interfaces/HumanInventory/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/Hypospray.js","webpack://tgui-workspace/./packages/tgui/interfaces/Laundry.js","webpack://tgui-workspace/./packages/tgui/interfaces/ListInput.js","webpack://tgui-workspace/./packages/tgui/interfaces/LongRangeTeleporter.js","webpack://tgui-workspace/./packages/tgui/interfaces/MechanicalDropper.js","webpack://tgui-workspace/./packages/tgui/interfaces/MineralMagnet.js","webpack://tgui-workspace/./packages/tgui/interfaces/MixingDesk.js","webpack://tgui-workspace/./packages/tgui/interfaces/PaperSheet.js","webpack://tgui-workspace/./packages/tgui/interfaces/Particool.js","webpack://tgui-workspace/./packages/tgui/interfaces/PlayerPanel/Header.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/PlayerPanel/constant.ts","webpack://tgui-workspace/./packages/tgui/interfaces/PlayerPanel/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/PortablePump.js","webpack://tgui-workspace/./packages/tgui/interfaces/PortableScrubber.js","webpack://tgui-workspace/./packages/tgui/interfaces/PowerMonitor/Apc.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/PowerMonitor/Smes.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/PowerMonitor/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/PowerMonitor/type.ts","webpack://tgui-workspace/./packages/tgui/interfaces/PowerTransmissionLaser.js","webpack://tgui-workspace/./packages/tgui/interfaces/Precipitation.js","webpack://tgui-workspace/./packages/tgui/interfaces/Pressurizer.js","webpack://tgui-workspace/./packages/tgui/interfaces/Radio/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/Radio/type.ts","webpack://tgui-workspace/./packages/tgui/interfaces/ReagentExtractor.js","webpack://tgui-workspace/./packages/tgui/interfaces/Rockbox.js","webpack://tgui-workspace/./packages/tgui/interfaces/SeedFabricator.js","webpack://tgui-workspace/./packages/tgui/interfaces/Sleeper.js","webpack://tgui-workspace/./packages/tgui/interfaces/SlotMachine.js","webpack://tgui-workspace/./packages/tgui/interfaces/Smes.js","webpack://tgui-workspace/./packages/tgui/interfaces/SpendSpacebux.js","webpack://tgui-workspace/./packages/tgui/interfaces/TEG.js","webpack://tgui-workspace/./packages/tgui/interfaces/TankDispenser.js","webpack://tgui-workspace/./packages/tgui/interfaces/Terrainify.js","webpack://tgui-workspace/./packages/tgui/interfaces/TransitTerminal.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/TurretControl.js","webpack://tgui-workspace/./packages/tgui/interfaces/WeaponVendor/index.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/common/BeakerContents.js","webpack://tgui-workspace/./packages/tgui/interfaces/common/HealthStat.js","webpack://tgui-workspace/./packages/tgui/interfaces/common/ListSearch.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/common/PortableAtmos.js","webpack://tgui-workspace/./packages/tgui/interfaces/common/ReagentInfo.tsx","webpack://tgui-workspace/./packages/tgui/interfaces/common/ReleaseValve.js","webpack://tgui-workspace/./packages/tgui/interfaces/common/mathUtils.ts","webpack://tgui-workspace/./packages/tgui/interfaces/common/stringUtils.ts","webpack://tgui-workspace/./packages/tgui/interfaces/common/temperatureUtils.js","webpack://tgui-workspace/./packages/tgui/routes.js","webpack://tgui-workspace/./packages/tgui/sanitize.js","webpack://tgui-workspace/./packages/tgui/styles/main.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/flock.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/genetek-disabled.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/genetek.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/ntos.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/paper.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/retro-dark.scss","webpack://tgui-workspace/./packages/tgui/styles/themes/syndicate.scss","webpack://tgui-workspace/./packages/tgui/interfaces|sync|/^/.*$","webpack://tgui-workspace/webpack/bootstrap","webpack://tgui-workspace/webpack/runtime/chunk loaded","webpack://tgui-workspace/webpack/runtime/get javascript update chunk filename","webpack://tgui-workspace/webpack/runtime/get mini-css chunk filename","webpack://tgui-workspace/webpack/runtime/get update manifest filename","webpack://tgui-workspace/webpack/runtime/getFullHash","webpack://tgui-workspace/webpack/runtime/global","webpack://tgui-workspace/webpack/runtime/hasOwnProperty shorthand","webpack://tgui-workspace/webpack/runtime/load script","webpack://tgui-workspace/webpack/runtime/hot module replacement","webpack://tgui-workspace/webpack/runtime/publicPath","webpack://tgui-workspace/webpack/runtime/css loading","webpack://tgui-workspace/webpack/runtime/jsonp chunk loading","webpack://tgui-workspace/webpack/startup"],"sourcesContent":["/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nexport const block = (base: string, suffix: string) => `${base}-${suffix}`;\n\nexport const element = (block: string, element: string) => `${block}__${element}`;\n\nexport const modifier = (element: string, modifier: string) => `${element}--${modifier}`;\n","/**\n * @file\n * @copyright 2020 Aleksej Komarov\n * @license MIT\n */\n\n// Themes\nimport './styles/main.scss';\n// import './styles/themes/abductor.scss';\n// import './styles/themes/cardtable.scss';\nimport './styles/themes/genetek.scss';\nimport './styles/themes/genetek-disabled.scss';\n// import './styles/themes/hackerman.scss';\n// import './styles/themes/malfunction.scss';\n// import './styles/themes/neutral.scss';\nimport './styles/themes/ntos.scss';\nimport './styles/themes/paper.scss';\nimport './styles/themes/retro-dark.scss';\nimport './styles/themes/syndicate.scss';\nimport './styles/themes/flock.scss';\n\nimport { perf } from 'common/perf';\nimport { setupHotReloading } from 'tgui-dev-server/link/client';\nimport { setupHotKeys } from './hotkeys';\nimport { captureExternalLinks } from './links';\nimport { createRenderer } from './renderer';\nimport { configureStore, StoreProvider } from './store';\nimport { setupGlobalEvents } from './events';\n\nperf.mark('inception', window.performance?.timing?.navigationStart);\nperf.mark('init');\n\nconst store = configureStore();\n\nconst renderApp = createRenderer(() => {\n  const { getRoutedComponent } = require('./routes');\n  const Component = getRoutedComponent(store);\n  return (\n    <StoreProvider store={store}>\n      <Component />\n    </StoreProvider>\n  );\n});\n\nconst setupApp = () => {\n  // Delay setup\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupApp);\n    return;\n  }\n\n  setupGlobalEvents();\n  setupHotKeys();\n  captureExternalLinks();\n\n  // Subscribe for state updates\n  store.subscribe(renderApp);\n\n  // Dispatch incoming messages\n  window.update = msg => store.dispatch(Byond.parseJson(msg));\n\n  // Process the early update queue\n  while (true) {\n    const msg = window.__updateQueue__.shift();\n    if (!msg) {\n      break;\n    }\n    window.update(msg);\n  }\n\n  // Enable hot module reloading\n  if (module.hot) {\n    setupHotReloading();\n    module.hot.accept([\n      './components',\n      './debug',\n      './layouts',\n      './routes',\n    ], () => {\n      renderApp();\n    });\n  }\n};\n\nsetupApp();\n","import { useBackend, useLocalState } from '../backend';\nimport { Button, ByondUi } from '../components';\nimport { Window } from '../layouts';\n\nexport const AIMap = (params, context) => {\n  return (\n    <Window\n      width={610}\n      height={640}\n      title=\"AI station map\"\n    >\n      <Window.Content>\n        <ByondUi\n          params={{\n            type: 'map',\n            id: \"ai_map\",\n          }}\n          style={{\n            width: \"600px\",\n            height: \"600px\",\n          }} />\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend } from '../backend';\nimport { BlockQuote, Button, Collapsible, Box, Section } from '../components';\nimport { Window } from '../layouts';\n\nexport const AIRack = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    lawTitles,\n    lawText,\n    welded,\n    screwed,\n  } = data;\n  return (\n    <Window\n      resizable\n      title=\"AI Law Rack\"\n      width={600}\n      height={800}>\n      <Window.Content scrollable>\n        <Section>\n          <Box>\n            {lawTitles.map((item, index) => (\n              <Collapsible\n                key={index}\n                title={item ? lawTitles[index] : \"Empty\"}\n                open={item ? true : false}>\n                <BlockQuote preserveWhitespace>{item ? lawText[index] : \"<Empty Slot>\"}</BlockQuote>\n                <Button\n                  icon={item ? 'circle' : 'circle-o'}\n                  content={item ? \"Remove\" : \"Empty\"}\n                  onClick={() => act(\"rack\", { rack_index: index+1 })}\n                  disabled={welded[index] || screwed[index]}\n                />\n                <Button\n                  icon={welded[index] ? 'circle' : 'circle-o'}\n                  content={welded[index] ? \"Welded\" : \"Not Welded\"}\n                  onClick={() => act(\"weld\", { rack_index: index+1 })}\n                  color={welded[index] ? \"red\" : \"green\"}\n                />\n                <Button\n                  icon={screwed[index] ? 'circle' : 'circle-o'}\n                  content={screwed[index] ? \"Screwed In\" : \"Not Screwed In\"}\n                  onClick={() => act(\"screw\", { rack_index: index+1 })}\n                  color={screwed[index] ? \"red\" : \"green\"}\n                />\n              </Collapsible>\n            ))}\n          </Box>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n* @file\n* @copyright 2020\n* @author ThePotato97 (https://github.com/ThePotato97)\n* @license ISC\n*/\n\nimport { Fragment } from \"inferno\";\nimport { useBackend, useLocalState } from \"../backend\";\nimport { truncate } from '../format';\nimport { Button, LabeledList, Section, Modal, Flex, Tabs, Box, NoticeBox, Divider, ProgressBar } from \"../components\";\nimport { Window } from \"../layouts\";\n\nexport const uiCurrentUserPermissions = data => {\n  const {\n    panelOpen,\n    userStates,\n  } = data;\n\n  return {\n    // can only access airlock if they're AI or a borg.\n    airlock: (userStates.isBorg) || (userStates.isAi),\n    /** borgs can only access panel when they're next to the airlock\n    * carbons are checked on the backend so no need to check their distance here\n    * so we'll return true\n    */\n    accessPanel: (\n      (userStates.isBorg && userStates.distance <= 1\n        && panelOpen) || (panelOpen && !userStates.isBorg && !userStates.isAi)\n    ),\n  };\n};\n\nexport const Airlock = (props, context) => {\n  const { data } = useBackend(context);\n  const userPerms = uiCurrentUserPermissions(data);\n  //  We render 3 different interfaces so we can change the window sizes\n  return (\n    <Window\n      theme=\"ntos\">\n      <Window.Content>\n        {(!userPerms[\"airlock\"] && !userPerms[\"accessPanel\"]) && (\n          <Modal\n            textAlign=\"center\"\n            fontSize=\"24px\">\n            <Box width={25} height={5} align=\"center\">\n              Access Panel is Closed\n            </Box>\n          </Modal>\n        )}\n        {(!!userPerms[\"airlock\"] && !!userPerms[\"accessPanel\"])\n          && <AirlockAndAccessPanel />\n          || !!userPerms[\"airlock\"] && <AirlockControlsOnly />\n          || !!userPerms[\"accessPanel\"] && <AccessPanelOnly />}\n      </Window.Content>\n    </Window>\n  );\n};\n\n\nconst AirlockAndAccessPanel = (props, context) => {\n  const { data } = useBackend(context);\n\n  const {\n    name,\n    canAiControl,\n    hackMessage,\n    canAiHack,\n    noPower,\n  } = data;\n\n  const [tabIndex, setTabIndex] = useLocalState(context, 'tabIndex', 1);\n  return (\n    <Window\n      width={354}\n      height={495}\n      title={`Airlock - ${truncate(name, 19)}`}>\n      <Window.Content>\n        <Tabs>\n          <Tabs.Tab\n            selected={tabIndex === 1}\n            onClick={() => {\n              setTabIndex(1);\n            }}>\n            Airlock Controls\n          </Tabs.Tab>\n          <Tabs.Tab\n            selected={tabIndex === 2}\n            onClick={() => {\n              setTabIndex(2);\n            }}>\n            Access Panel\n          </Tabs.Tab>\n        </Tabs>\n        {tabIndex === 1 && (\n          <>\n            <Section fitted backgroundColor=\"transparent\">\n              {(!canAiControl || !!noPower) && (\n                <Modal\n                  textAlign=\"center\"\n                  fontSize=\"24px\">\n                  <Box width={20} height={5} algin=\"center\">\n                    {hackMessage ? hackMessage : \"Airlock Controls Disabled\"}\n                  </Box>\n                </Modal>\n              )}\n              <PowerStatus />\n              <AccessAndDoorControl />\n              <Electrify />\n            </Section>\n            {!!canAiHack && (\n              <Hack />\n            )}\n          </>\n        )}\n        {tabIndex === 2 && (\n          <AccessPanel />\n        )}\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst AirlockControlsOnly = (props, context) => {\n  const { data } = useBackend(context);\n\n  const {\n    name,\n    canAiControl,\n    hackMessage,\n    canAiHack,\n    noPower,\n  } = data;\n\n  return (\n    <Window\n      width={315}\n      height={380}\n      title={`Airlock - ${truncate(name, 19)}`}>\n      <Window.Content>\n        {(!canAiControl || !!noPower) && (\n          <Modal\n            textAlign=\"center\"\n            fontSize=\"26px\">\n            <Box width={20} height={5} algin=\"center\">\n              {hackMessage ? hackMessage : \"Airlock Controls Disabled\"}\n            </Box>\n            {!!canAiHack && (\n              <Hack />\n            )}\n          </Modal>\n        )}\n        <PowerStatus />\n        <AccessAndDoorControl />\n        <Electrify />\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst AccessPanelOnly = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    name,\n  } = data;\n\n  return (\n    <Window\n      width={354}\n      height={465}\n      title={`Airlock - ${truncate(name, 19)}`}>\n      <Window.Content>\n        <AccessPanel />\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst PowerStatus = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    mainTimeLeft,\n    backupTimeLeft,\n    wires,\n    netId,\n    accessCode,\n  } = data;\n\n  const buttonProps = {\n    width: 6.7,\n    textAlign: \"center\",\n  };\n\n  return (\n    <Section title=\"Power Status\">\n      <Box>\n        {\"Access sensor reports the net identifer is:\"} <Box inline italic>{netId}</Box>\n      </Box>\n      <Box>\n        {\"Net access code:\"} <Box inline italic>{accessCode}</Box>\n      </Box>\n      <Divider />\n      <LabeledList>\n        <LabeledList.Item\n          label=\"Main\"\n          color={mainTimeLeft ? \"bad\" : \"good\"}\n          buttons={(\n            <Button\n              {...buttonProps}\n              color=\"bad\"\n              icon=\"plug\"\n              disabled={!!mainTimeLeft}\n              onClick={() => act(\"disruptMain\")}>\n              Disrupt\n            </Button>\n          )}>\n          {mainTimeLeft ? \"Offline\" : \"Online\"}\n          {\" \"}\n          {(!wires.main_1 || !wires.main_2)\n            && \"[Wires cut!]\"\n            || (mainTimeLeft > 0\n              && `[${mainTimeLeft}s]`)}\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Backup\"\n          color={backupTimeLeft ? \"bad\": \"good\"}\n          buttons={(\n            <Button\n              {...buttonProps}\n              mt={0.5}\n              color=\"bad\"\n              icon=\"plug\"\n              disabled={!!backupTimeLeft}\n              onClick={() => act(\"disruptBackup\")}>\n              Disrupt\n            </Button>\n          )}>\n          {backupTimeLeft ? \"Offline\" : \"Online\"}\n          {\" \"}\n          {(!wires.backup_1 || !wires.backup_2)\n            && \"[Wires cut!]\"\n            || (backupTimeLeft > 0\n              && `[${backupTimeLeft}s]`)}\n        </LabeledList.Item>\n      </LabeledList>\n    </Section>\n  );\n};\n\nconst AccessAndDoorControl = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    mainTimeLeft,\n    backupTimeLeft,\n    wires,\n    idScanner,\n    boltsAreUp,\n    opened,\n    welded,\n  } = data;\n\n  const buttonProps = {\n    width: 6.7,\n    textAlign: \"center\",\n  };\n  return (\n    <Section title=\"Access and Door Control\"\n      pt={1}>\n      <LabeledList>\n        <LabeledList.Item\n          label=\"ID Scan\"\n          color=\"bad\"\n          buttons={(\n            <Button\n              {...buttonProps}\n              color={idScanner ? \"good\" : \"bad\"}\n              icon={idScanner ? \"power-off\" : \"times\"}\n              disabled={!wires.idScanner\n                || (mainTimeLeft && backupTimeLeft)}\n              onClick={() => act(\"idScanToggle\")}>\n              {idScanner ? \"Enabled\" : \"Disabled\"}\n            </Button>\n          )}>\n          {!wires.idScanner && \"[Wires cut!]\"}\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Door Bolts\"\n          color=\"bad\"\n          buttons={(\n            <Button\n              mt={0.5}\n              {...buttonProps}\n              color={!boltsAreUp ? \"bad\" : \"good\"}\n              icon={!boltsAreUp ? \"unlock\" : \"lock\"}\n              disabled={!wires.bolts\n                || (mainTimeLeft && backupTimeLeft)}\n              onClick={() => act(\"boltToggle\")}>\n              {!boltsAreUp ? \"Lowered\" : \"Raised\"}\n            </Button>\n          )}>\n          {!wires.bolts && \"[Wires cut!]\"}\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Door Control\"\n          color=\"bad\"\n          buttons={(\n            <Button\n              {...buttonProps}\n              mt={0.5}\n              color={opened ? \"bad\" : \"good\"}\n              icon={opened ? \"sign-out-alt\" : \"sign-in-alt\"}\n              disabled={(!boltsAreUp || welded)\n                || (mainTimeLeft && backupTimeLeft)}\n              onClick={() => act(\"openClose\")}>\n              {opened ? \"Open\" : \"Closed\"}\n            </Button>\n          )}>\n          {!!(!boltsAreUp || welded) && (\n            <span>\n              [{!boltsAreUp && \"Bolted\"}\n              {(!boltsAreUp && welded) && \" & \"}\n              {welded && \"Welded\"}!]\n            </span>\n          )}\n        </LabeledList.Item>\n      </LabeledList>\n    </Section>\n  );\n};\n\n\nconst Electrify = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    mainTimeLeft,\n    backupTimeLeft,\n    wires,\n    shockTimeLeft,\n  } = data;\n\n  return (\n    <NoticeBox backgroundColor=\"#601B1B\">\n      <LabeledList>\n        <LabeledList.Item\n          labelColor=\"white\"\n          color={shockTimeLeft ? \"average\" : \"good\"}\n          label=\"Electrify\">\n          {!shockTimeLeft ? \"Safe\" : \"Electrified\"}\n          {\" \"}\n          {!wires.shock\n            && \"[Wires cut!]\"\n            || (shockTimeLeft > 0\n            && `[${shockTimeLeft}s]`)\n            || (shockTimeLeft === -1\n            && \"[Permanent]\")}\n        </LabeledList.Item>\n        <LabeledList.Item\n          color={!shockTimeLeft ? \"Average\" : \"Bad\"}>\n          <Box\n            pl={shockTimeLeft ? 18 : 0}\n            pt={0.5}>\n            {(!shockTimeLeft &&(\n              <Button.Confirm\n                width={9}\n                p={0.5}\n                align=\"center\"\n                color=\"average\"\n                content=\"Temporary\"\n                confirmContent=\"Are you sure?\"\n                icon=\"bolt\"\n                disabled={(!wires.shock)\n                || (mainTimeLeft && backupTimeLeft)}\n                onClick={(() => act(\"shockTemp\"))} />\n            ))}\n            <Button.Confirm\n              width={9}\n              p={0.5}\n              align=\"center\"\n              color={shockTimeLeft ? \"good\" : \"bad\"}\n              icon=\"bolt\"\n              confirmContent=\"Are you sure?\"\n              content={shockTimeLeft ? \"Restore\" : \"Permanent\"}\n              disabled={(!wires.shock)\n                || (mainTimeLeft && backupTimeLeft)}\n              onClick={shockTimeLeft ? (() => act(\"shockRestore\"))\n                : (() => act(\"shockPerm\"))} />\n          </Box>\n        </LabeledList.Item>\n      </LabeledList>\n    </NoticeBox>\n  );\n};\n\n\nconst Hack = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    aiHacking,\n    hackingProgression,\n  } = data;\n\n  return (\n    <Box\n      fitted py={0.5} pt={2}\n      align=\"center\">\n      {!aiHacking && (\n        <Button\n          className=\"Airlock-hack-button\"\n          fontSize=\"29px\"\n          backgroundColor=\"#00FF00\"\n          disabled={aiHacking}\n          textColor=\"black\"\n          textAlign=\"center\"\n          width={16}\n          onClick={() => act(\"hackAirlock\")}>\n          HACK\n        </Button>\n      )}\n      {!!aiHacking && (\n        <ProgressBar\n          ranges={{\n            good: [6, Infinity],\n            average: [2, 5],\n            bad: [-Infinity, 1],\n          }}\n          minValue={0}\n          maxValue={6}\n          value={hackingProgression} />\n      )}\n    </Box>\n  );\n};\n\nexport const AccessPanel = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    signalers,\n    wireColors,\n    wireStates,\n    netId,\n    powerIsOn,\n    boltsAreUp,\n    canAiControl,\n    aiControlVar,\n    safety,\n    panelOpen,\n    accessCode,\n  } = data;\n\n  const handleWireInteract = (wireColorIndex, action) => {\n    act(action, { wireColorIndex });\n  };\n\n  const wires = Object.keys(wireColors);\n\n  return (\n    <Section\n      title=\"Access Panel\">\n      {!panelOpen && (\n        <Modal\n          textAlign=\"center\"\n          fontSize=\"24px\">\n          Access Panel is Closed\n        </Modal>\n      )}\n      <Box>\n        {\"An identifier is engraved under the airlock's card sensors:\"} <Box inline italic>{netId}</Box>\n      </Box>\n      <Box>\n        {\"A display shows net access code:\"} <Box inline italic>{accessCode}</Box>\n      </Box>\n      <Divider />\n      <LabeledList>\n        { wires.map((entry, i) => (\n          <LabeledList.Item\n            key={entry}\n            label={(`${entry} wire`)}\n            labelColor={entry.toLowerCase()}>\n            {\n              !wireStates[i]\n                ? (\n                  <Box\n                    height={1.8} >\n                    <Button\n                      icon=\"cut\"\n                      onClick={() => handleWireInteract(i, \"cut\")}>\n                      Cut\n                    </Button>\n                    <Button\n                      icon=\"bolt\"\n                      onClick={() => handleWireInteract(i, \"pulse\")}>\n                      Pulse\n                    </Button>\n                    <Button\n                      icon=\"broadcast-tower\"\n                      width={10.5}\n                      className=\"AccessPanel-wires-btn\"\n                      selected={(signalers[i])}\n                      onClick={() => handleWireInteract(i, \"signaler\")}>\n                      {!(signalers[i]) ? \"Attach Signaler\" : \"Detach Signaler\"}\n                    </Button>\n                  </Box>\n                )\n                : (\n                  <Button\n                    color=\"green\"\n                    height={1.8}\n                    onClick={() => handleWireInteract(i, \"mend\")} >\n                    Mend\n                  </Button>\n                )\n            }\n          </LabeledList.Item>\n        )) }\n      </LabeledList>\n      <Divider />\n      <Flex\n        direction=\"row\">\n        <Flex.Item>\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Door bolts\"\n              color={boltsAreUp ? \"green\" : \"red\"}>\n              {boltsAreUp ? \"Disengaged\" : \"Engaged\"}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Test light\"\n              color={powerIsOn ? \"green\" : \"red\"}>\n              {powerIsOn ? \"Active\" : \"Inactive\"}\n            </LabeledList.Item>\n          </LabeledList>\n        </Flex.Item>\n        <Flex.Item>\n          <LabeledList>\n            <LabeledList.Item\n              label=\"AI control\"\n              color={canAiControl ? (aiControlVar === 2 ? \"orange\" : \"green\") : \"red\"}>\n              {canAiControl ? \"Enabled\" : \"Disabled\"}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Safety light\"\n              color={safety ? \"green\" : \"red\"}>\n              {safety ? \"Active\" : \"Inactive\"}\n            </LabeledList.Item>\n          </LabeledList>\n        </Flex.Item>\n      </Flex>\n    </Section>\n  );\n};\n\n","/**\n * @file\n * @copyright 2020 bobbahbrown (https://github.com/bobbahbrown)\n * @license MIT\n */\n\nimport { clamp01 } from 'common/math';\nimport { useBackend } from '../backend';\nimport { Component, createRef } from 'inferno';\nimport { Box, Flex, Section } from '../components';\nimport { Window } from '../layouts';\nimport {\n  KEY_ENTER,\n  KEY_LEFT,\n  KEY_RIGHT,\n  KEY_SPACE,\n  KEY_TAB,\n} from 'common/keycodes';\n\nexport class AlertModal extends Component {\n  constructor() {\n    super();\n\n    this.buttonRefs = [createRef()];\n    this.state = { current: 0 };\n  }\n\n  componentDidMount() {\n    const { data } = useBackend(this.context);\n    const { buttons } = data;\n    const { current } = this.state;\n    const button = this.buttonRefs[current].current;\n\n    // Fill ref array with refs for other buttons\n    for (let i = 1; i < buttons.length; i++) {\n      this.buttonRefs.push(createRef());\n    }\n\n    setTimeout(() => button.focus(), 1);\n  }\n\n  setCurrent(current, isArrowKey) {\n    const { data } = useBackend(this.context);\n    const { buttons } = data;\n\n    // Mimic alert() behavior for tabs and arrow keys\n    if (current >= buttons.length) {\n      current = isArrowKey ? current - 1 : 0;\n    } else if (current < 0) {\n      current = isArrowKey ? 0 : buttons.length - 1;\n    }\n\n    const button = this.buttonRefs[current].current;\n\n    // Prevents an error from occurring on close\n    if (button) {\n      setTimeout(() => button.focus(), 1);\n    }\n\n    this.setState({ current });\n  }\n\n  render() {\n    const { act, data } = useBackend(this.context);\n    const { title, message, buttons, timeout } = data;\n    const { current } = this.state;\n    const focusCurrentButton = () => this.setCurrent(current, false);\n\n    return (\n      <Window\n        title={title}\n        width={350}\n        height={150}>\n        {timeout && <Loader value={timeout} />}\n        <Window.Content\n          onFocus={focusCurrentButton}\n          onClick={focusCurrentButton}>\n          <Section fill>\n            <Flex direction=\"column\" height=\"100%\">\n              <Flex.Item grow={1}>\n                <Flex\n                  direction=\"column\"\n                  className=\"AlertModal__Message\"\n                  height=\"100%\">\n                  <Flex.Item>\n                    <Box m={1}>\n                      {message}\n                    </Box>\n                  </Flex.Item>\n                </Flex>\n              </Flex.Item>\n              <Flex.Item my={8}>\n                <Flex className=\"AlertModal__Buttons\">\n                  {buttons.map((button, buttonIndex) => (\n                    <Flex.Item key={buttonIndex} mx={1}>\n                      <div\n                        ref={this.buttonRefs[buttonIndex]}\n                        className=\"Button Button--color--default\"\n                        px={3}\n                        onClick={() => act(\"choose\", { choice: button })}\n                        onKeyDown={e => {\n                          const keyCode = window.event ? e.which : e.keyCode;\n\n                          /**\n                            * Simulate a click when pressing space or enter,\n                            * allow keyboard navigation, override tab behavior\n                            */\n                          if (keyCode === KEY_SPACE || keyCode === KEY_ENTER) {\n                            act(\"choose\", { choice: button });\n                          } else if (\n                            keyCode === KEY_LEFT\n                             || (e.shiftKey && keyCode === KEY_TAB)\n                          ) {\n                            this.setCurrent(current - 1, keyCode === KEY_LEFT);\n                          } else if (\n                            keyCode === KEY_RIGHT || keyCode === KEY_TAB\n                          ) {\n                            this.setCurrent(current + 1, keyCode === KEY_RIGHT);\n                          }\n                        }}>\n                        {button}\n                      </div>\n                    </Flex.Item>\n                  ))}\n                </Flex>\n              </Flex.Item>\n            </Flex>\n          </Section>\n        </Window.Content>\n      </Window>\n    );\n  }\n\n}\n\nexport const Loader = props => {\n  const { value } = props;\n\n  return (\n    <div className=\"AlertModal__Loader\">\n      <Box\n        className=\"AlertModal__LoaderProgress\"\n        style={{ width: clamp01(value) * 100 + '%' }} />\n    </div>\n  );\n};\n","import { Window } from '../../layouts';\nimport { useBackend } from \"../../backend\";\n\nimport {\n  Stack,\n  BlockQuote,\n  Box,\n  Button,\n  Divider,\n  Flex,\n  LabeledList,\n  ProgressBar,\n  Section,\n  Slider,\n  LabeledControls,\n} from '../../components';\n\nimport {\n  Wire,\n  WIRE_ORANGE,\n  WIRE_DARK_RED,\n  WIRE_WHITE,\n  WIRE_YELLOW,\n} from './Wire';\n\n\nexport const AccessPanel = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    net_id,\n    locked,\n    shorted,\n    aidisabled,\n  } = data;\n\n  return (\n    <Section title=\"Access Panel\">\n      <BlockQuote><b>An identifier is engraved above the APC{\"'\"}s wires: {net_id}</b></BlockQuote>\n      <Flex direction=\"column\">\n        <LabeledList>\n          <Wire wire={WIRE_ORANGE} />\n          <Wire wire={WIRE_DARK_RED} />\n          <Wire wire={WIRE_WHITE} />\n          <Wire wire={WIRE_YELLOW} />\n        </LabeledList>\n        <Divider />\n        <LabeledList>\n          <LabeledList.Item label=\"Controls\">\n            <font color={locked ? \"green\" : \"red\"}>\n              {locked ? \"Locked\" : \"Unlocked\"}\n            </font>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Circuitry\">\n            <font color={shorted ? \"red\" : \"green\"}>\n              {shorted ? \"Shorted\" : \"Working\"}\n            </font>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"AI Control\">\n            <font color={aidisabled ? \"red\" : \"green\"}>\n              {aidisabled ? \"Disabled\" : \"Enabled\"}\n            </font>\n          </LabeledList.Item>\n        </LabeledList>\n      </Flex>\n    </Section>\n  );\n};\n\n","import { useBackend } from \"../../backend\";\nimport {\n  Button,\n  LabeledList,\n} from '../../components';\n\n\nexport const POWER_CHANNEL_EQUIPMENT = 1;\nexport const POWER_CHANNEL_LIGHTING = 2;\nexport const POWER_CHANNEL_ENVIRONMENTAL = 3;\n\nexport const POWER_CHANNEL_STATUS_OFF = 0;\nexport const POWER_CHANNEL_STATUS_AUTO_OFF = 1;\nexport const POWER_CHANNEL_STATUS_ON = 2;\nexport const POWER_CHANNEL_STATUS_AUTO_ON = 3;\n\n\nexport const PowerChannelSection = (props, context) => {\n  const {\n    powerChannel,\n  } = props;\n  const { act, data } = useBackend(context);\n  const {\n    locked,\n    is_ai,\n    is_silicon,\n    can_access_remotely,\n    aidisabled,\n    equipment,\n    lighting,\n    environ,\n    lastused_equip,\n    lastused_light,\n    lastused_environ,\n  } = data;\n\n\n  const powerChannelToLabel = () => {\n    switch (powerChannel) {\n      case POWER_CHANNEL_EQUIPMENT:\n        return \"Equipment\";\n      case POWER_CHANNEL_LIGHTING:\n        return \"Lighting\";\n      case POWER_CHANNEL_ENVIRONMENTAL:\n        return \"Environmental\";\n      default:\n        return \"Unknown\";\n    }\n  };\n\n  const getPowerChannelStatus = () => {\n    switch (powerChannel) {\n      case POWER_CHANNEL_EQUIPMENT:\n        return equipment;\n      case POWER_CHANNEL_LIGHTING:\n        return lighting;\n      case POWER_CHANNEL_ENVIRONMENTAL:\n        return environ;\n    }\n  };\n\n  const powerChannelWatts = () => {\n    switch (powerChannel) {\n      case POWER_CHANNEL_EQUIPMENT:\n        return lastused_equip;\n      case POWER_CHANNEL_LIGHTING:\n        return lastused_light;\n      case POWER_CHANNEL_ENVIRONMENTAL:\n        return lastused_environ;\n      default:\n        return 0;\n    }\n  };\n\n  const powerChannelLabel = powerChannelToLabel(powerChannel);\n\n  // ------------ Events ------------\n  const onPowerChannelStatusChange = (status) => {\n    switch (powerChannel) {\n      case POWER_CHANNEL_EQUIPMENT:\n        act(\"onPowerChannelEquipmentStatusChange\", { status });\n        break;\n      case POWER_CHANNEL_LIGHTING:\n        act(\"onPowerChannelLightingStatusChange\", { status });\n        break;\n      case POWER_CHANNEL_ENVIRONMENTAL:\n        act(\"onPowerChannelEnvironStatusChange\", { status });\n        break;\n      default:\n        return;\n    }\n  };\n  // ------------ End Events ------------\n\n  const hasPermission = () => {\n    if (is_ai || is_silicon || can_access_remotely) {\n      return !aidisabled;\n    }\n    return !locked;\n  };\n\n  const isCurrentStatus = (status) => {\n    return status === getPowerChannelStatus();\n  };\n\n  return (\n    <LabeledList.Item label={powerChannelLabel} direction=\"row\">\n      <LabeledList>\n        <LabeledList.Item label={powerChannelWatts() + \" W\"} direction=\"row\" disabled={!hasPermission()}>\n          <Button content=\"Off\"\n            disabled={!hasPermission() && !isCurrentStatus(POWER_CHANNEL_STATUS_OFF)}\n            onClick={() => { onPowerChannelStatusChange(POWER_CHANNEL_STATUS_OFF); }}\n            selected={isCurrentStatus(POWER_CHANNEL_STATUS_OFF)}\n            align=\"center\"\n          />\n          <Button content=\"On\"\n            disabled={!hasPermission() && !isCurrentStatus(POWER_CHANNEL_STATUS_ON)}\n            onClick={() => { onPowerChannelStatusChange(POWER_CHANNEL_STATUS_ON); }}\n            selected={isCurrentStatus(POWER_CHANNEL_STATUS_ON)}\n          />\n          <Button content=\"Auto\"\n            disabled={!hasPermission() && !(\n              isCurrentStatus(POWER_CHANNEL_STATUS_AUTO_OFF) || isCurrentStatus(POWER_CHANNEL_STATUS_AUTO_ON)\n            )}\n            onClick={() => { onPowerChannelStatusChange(POWER_CHANNEL_STATUS_AUTO_ON); }}\n            selected={isCurrentStatus(POWER_CHANNEL_STATUS_AUTO_OFF) || isCurrentStatus(POWER_CHANNEL_STATUS_AUTO_ON)}\n          />\n        </LabeledList.Item>\n      </LabeledList>\n    </LabeledList.Item>\n  );\n};\n","import { useBackend } from \"../../backend\";\nimport {\n  Box,\n  Button,\n  LabeledList,\n} from '../../components';\n\n\nexport const WIRE_ORANGE = 1;\nexport const WIRE_DARK_RED = 2;\nexport const WIRE_WHITE = 3;\nexport const WIRE_YELLOW = 4;\n\n\nexport const Wire = (props, context) => {\n  const {\n    wire,\n  } = props;\n  const { act, data } = useBackend(context);\n  const {\n    orange_cut,\n    dark_red_cut,\n    white_cut,\n    yellow_cut,\n  } = data;\n\n  const wireColorToString = (wire) => {\n    switch (wire) {\n      case WIRE_ORANGE:\n        return \"Orange\";\n      case WIRE_DARK_RED:\n        return \"Dark red\";\n      case WIRE_WHITE:\n        return \"White\";\n      case WIRE_YELLOW:\n        return \"Yellow\";\n      default:\n        return \"unknown\";\n    }\n  };\n\n  const color = wireColorToString(wire);\n\n  // ------------ Events ------------\n  const onMend = (e) => {\n    act(\"onMendWire\", { wire });\n  };\n\n  const onCut = (e) => {\n    act(\"onCutWire\", { wire });\n  };\n\n  const onPulse = (e) => {\n    act(\"onPulseWire\", { wire });\n  };\n\n  const onBite = (e) => {\n    act(\"onBiteWire\", { wire });\n  };\n  // ------------ End Events ------------\n\n  const isCut = (wire) => {\n    // Logic is slightly different since dm doesn't 0 index for some reason\n    switch (wire) {\n      case WIRE_ORANGE:\n        return orange_cut;\n      case WIRE_DARK_RED:\n        return dark_red_cut;\n      case WIRE_WHITE:\n        return white_cut;\n      case WIRE_YELLOW:\n        return yellow_cut;\n    }\n  };\n\n  const toggleCutButton = () => {\n    if (isCut(wire)) {\n      return <Button content=\"mend\" onClick={onMend} align=\"center\" />;\n    } else {\n      return <Button content=\"cut\" icon=\"cut\" onClick={onCut} />;\n    }\n  };\n\n  const actionsDisplay = () => {\n    if (isCut(wire)) {\n      return (\n        <Box height={1.8}>\n          <Button content=\"Mend\" onClick={onMend} selected />\n        </Box>\n      );\n    } else {\n      return (\n        <Box height={1.8}>\n          <Button content=\"Cut\" icon=\"cut\" onClick={onCut} />\n          <Button content=\"Pulse\" icon=\"bolt\" onClick={onPulse} />\n          <Button content=\"Bite\" icon=\"tooth\" onClick={onBite} />\n        </Box>\n      );\n    }\n  };\n\n  return (\n    <LabeledList.Item key={wire} label={color} labelColor={color.toLowerCase().replace(' ', '')} >\n      {actionsDisplay()}\n    </LabeledList.Item>\n  );\n};\n","import { Window } from '../../layouts';\nimport { useBackend } from \"../../backend\";\n\nimport {\n  Stack,\n  Box,\n  Button,\n  Divider,\n  LabeledList,\n  ProgressBar,\n  Section,\n} from '../../components';\n\nimport {\n  AccessPanel,\n} from './AccessPanel';\n\nimport {\n  PowerChannelSection,\n  POWER_CHANNEL_EQUIPMENT,\n  POWER_CHANNEL_LIGHTING,\n  POWER_CHANNEL_ENVIRONMENTAL,\n} from './PowerChannelSection';\n\n\nconst OFF = 0;\nconst ON = 1;\nconst AUTO = 2;\n\nconst MAIN_STATUS_NONE = 0;\nconst MAIN_STATUS_LOW = 1;\nconst MAIN_STATUS_GOOD = 2;\n\nconst CHARGE_MODE_OFF = 0;\nconst CHARGE_MODE_AUTO = 1;\n\n\nexport const Apc = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    area_requires_power,\n    area_name,\n    cell_percent,\n    cell_present,\n    operating,\n    charging,\n    chargemode,\n    chargecount,\n    locked,\n    coverlocked,\n    aidisabled,\n    lastused_total,\n    main_status,\n    wiresexposed,\n    setup_networkapc,\n    can_access_remotely,\n    is_ai,\n    is_silicon,\n    host_id,\n  } = data;\n\n  // ------------ Events ------------\n  const onOperatingChange = (operating) => {\n    act(\"onOperatingChange\", { operating });\n  };\n\n  const onChargeModeChange = (chargemode) => {\n    act(\"onChargeModeChange\", { chargemode });\n  };\n\n  const onCoverLockedChange = (coverlocked) => {\n    act(\"onCoverLockedChange\", { coverlocked });\n  };\n\n  const onOverload = () => {\n    act(\"onOverload\", {});\n  };\n  // ------------ End Events ------------\n\n  const mainStatusToText = () => {\n    switch (main_status) {\n      case MAIN_STATUS_GOOD:\n        return <font color=\"green\">Good</font>;\n      case MAIN_STATUS_LOW:\n        return <font color=\"yellow\">Low</font>;\n      case MAIN_STATUS_NONE:\n        return <font color=\"red\">None</font>;\n    }\n  };\n\n  const chargingStatusToText = () => {\n    switch (charging) {\n      case 0:\n        return chargecount ? \"Performing self-test\" : \"Not charging\";\n      case 1:\n        return \"Fully Charged\";\n      default:\n        return \"Charging\";\n    }\n  };\n\n  const cellDisplay = () => {\n    if (cell_present) {\n      return (\n        <>\n          <LabeledList.Item label=\"Charging\" direction=\"row\">\n            <Button content=\"Off\"\n              onClick={() => { onChargeModeChange(CHARGE_MODE_OFF); }}\n              disabled={!hasPermission() && (chargemode !== CHARGE_MODE_OFF)}\n              selected={chargemode === CHARGE_MODE_OFF}\n            />\n            <Button content=\"Auto\"\n              onClick={() => { onChargeModeChange(CHARGE_MODE_AUTO); }}\n              disabled={!hasPermission() && (chargemode !== CHARGE_MODE_AUTO)}\n              selected={chargemode === CHARGE_MODE_AUTO}\n            />\n            <font>{\"(\"}{chargingStatusToText()}{\")\"}</font>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Cell Power\">\n            <ProgressBar value={cell_percent}\n              minValue={0}\n              maxValue={100}\n              color={cell_percent < 20 ? \"red\" : cell_percent < 50 ? \"yellow\" : \"green\"} />\n          </LabeledList.Item>\n        </>\n      );\n    } else {\n      return (\n        <LabeledList.Item label=\"Cell Power\">\n          <ProgressBar value={cell_percent}\n            minValue={0}\n            maxValue={100}\n            color={cell_percent < 20 ? \"red\" : cell_percent < 50 ? \"yellow\" : \"green\"} />\n          <font color=\"red\">Not Connected</font>\n        </LabeledList.Item>\n      );\n    }\n  };\n\n  const coverLockDisplay = () => {\n    let coverLockText = coverlocked ? \"Engaged\" : \"Disengaged\";\n    if (!hasPermission()) {\n      return <Box>{coverLockText}</Box>;\n    } else {\n      return <Button content={coverLockText} onClick={() => { onCoverLockedChange(!coverlocked); }} />;\n    }\n  };\n\n  const hasPermission = () => {\n    if (is_ai || is_silicon || can_access_remotely) {\n      return aidisabled ? false : true;\n    }\n    return locked ? false : true;\n  };\n\n  const isLocalAccess = () => {\n    return setup_networkapc < 2 && !can_access_remotely;\n  };\n\n  const hostConnectionDisplay = () => {\n    if (isLocalAccess()) {\n      return null;\n    } else {\n      return (\n        <LabeledList.Item label=\"Host Connection\">\n          <Box><font color={host_id ? \"green\" : \"red\"}>{host_id ? \"OK\" : \"NONE\"}</font></Box>\n        </LabeledList.Item>\n      );\n    }\n  };\n\n  const renderPoweredAreaApc = () => {\n    return (\n      <Window title=\"Area Power Controller\" width={400} height={data[\"wiresexposed\"] ? 680 : 420}>\n        <Window.Content>\n          <Section title={area_name}>\n            {isLocalAccess() ? <Box align=\"center\" bold fill>Swipe ID card to {locked ? \"unlock\" : \"lock\"} interface</Box> : null}\n            {isLocalAccess() ? <Divider /> : null}\n            <LabeledList>\n              <LabeledList.Item label=\"Main Breaker\">\n                <Button content=\"Off\" disabled={!hasPermission() && operating} onClick={() => { onOperatingChange(OFF); }} selected={!operating} />\n                <Button content=\"On\" disabled={!hasPermission() && !operating} onClick={() => { onOperatingChange(ON); }} selected={operating} />\n              </LabeledList.Item>\n              {cellDisplay()}\n              <LabeledList.Item label=\"External Power\">\n                <Box>{mainStatusToText()}</Box>\n              </LabeledList.Item>\n              {hostConnectionDisplay()}\n            </LabeledList>\n          </Section>\n          <Section title=\"PowerChannel\">\n            <LabeledList>\n              <PowerChannelSection powerChannel={POWER_CHANNEL_EQUIPMENT} />\n              <PowerChannelSection powerChannel={POWER_CHANNEL_LIGHTING} />\n              <PowerChannelSection powerChannel={POWER_CHANNEL_ENVIRONMENTAL} />\n              <LabeledList.Item label=\"Total Load\">\n                <Box>{lastused_total} W</Box>\n              </LabeledList.Item>\n            </LabeledList>\n          </Section>\n          <Section>\n            <Stack>\n              <Stack.Item align=\"center\">\n                <Box>Cover lock:</Box>\n              </Stack.Item>\n              <Stack.Item align=\"center\">\n                {coverLockDisplay()}\n              </Stack.Item>\n            </Stack>\n            {can_access_remotely ? <Button content=\"Overload lighting circuit\" onClick={() => { onOverload(); }} /> : null}\n          </Section>\n          {wiresexposed && !is_ai ? <AccessPanel /> : null}\n        </Window.Content>\n      </Window>\n    );\n  };\n\n  const renderUnPoweredAreaApc = () => {\n    return (\n      <Window title=\"Area Power Controller\" width={400} height={wiresexposed ? 500 : 350}>\n        <Window.Content>\n          <Section title={\"Area Power Controller (\" + area_name + \")\"}>\n            <Box>This APC has no configurable settings.</Box>\n          </Section>\n          {wiresexposed && !is_ai ? <AccessPanel /> : null}\n        </Window.Content>\n      </Window>\n    );\n  };\n\n  return area_requires_power ? renderPoweredAreaApc() : renderUnPoweredAreaApc();\n};\n","/**\n * @file\n * @copyright 2021\n * @author zjdtmkhzt (https://github.com/zjdtmkhzt)\n * @license MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Button, Section, Flex, TextArea } from '../components';\nimport { Window } from '../layouts';\n\nexport const ArtifactPaper = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    artifactName,\n    artifactOrigin,\n    artifactType,\n    artifactTriggers,\n    artifactFaults,\n    artifactDetails,\n    allArtifactOrigins,\n    allArtifactTypes,\n    allArtifactTriggers,\n    hasPen,\n  } = data;\n\n  return (\n    <Window\n      title=\"Nanotrasen Alien Artifact Analysis Form\"\n      theme=\"paper\"\n      width={800}\n      height={835}\n    >\n      <Window.Content>\n        <Section>\n          <h3>Artifact Name</h3>\n          <h4>{ artifactName === \"\" ? \"unknown\" : artifactName }</h4>\n          <h3>Artifact Origin</h3>\n          <Flex direction={\"column\"} wrap={\"wrap\"} height={3}>\n            {allArtifactOrigins.map(x => (\n              <Flex.Item key={x.id}\n                onClick={(e, value) => act(\"origin\", { newOrigin: x, hasPen: hasPen })}>\n                <Button.Checkbox\n                  checked={artifactOrigin === x}\n                />\n                <a>{x}</a>\n              </Flex.Item>\n            ))}\n          </Flex>\n          <h3>Artifact Type</h3>\n          <Flex direction={\"column\"} wrap={\"wrap\"} height={25} justify={\"space-evenly\"}>\n            {allArtifactTypes.map(x => (\n              <Flex.Item className={\"artifactType\" + x[1]} key={x[0].id}\n                onClick={(e, value) => act(\"type\", { newType: x[0], hasPen: hasPen })}>\n                <Button.Checkbox\n                  checked={artifactType === x[0]}\n                />\n                <a>{x[0]}</a>\n              </Flex.Item>\n            ))}\n          </Flex>\n          <h3>Artifact Triggers</h3>\n          <Flex direction={\"column\"} wrap={\"wrap\"} height={5}>\n            {allArtifactTriggers.map(x => (\n              <Flex.Item key={x.id}\n                onClick={(e, value) => act(\"trigger\", { newTriggers: x, hasPen: hasPen })}>\n                <Button.Checkbox\n                  checked={artifactTriggers === x}\n                />\n                <a>{x}</a>\n              </Flex.Item>\n            ))}\n          </Flex>\n          <h3>Artifact Faults</h3>\n          <TextArea\n            value={artifactFaults}\n            fluid\n            height={5}\n            onChange={(_, x) => act(\"fault\", { newFaults: x, hasPen: hasPen })} />\n\n          <h3>Additional Information</h3>\n          <TextArea\n            value={artifactDetails}\n            fluid\n            height={10}\n            onChange={(_, x) => act(\"detail\", { newDetail: x, hasPen: hasPen })} />\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend, useLocalState } from '../backend';\nimport { Button, LabeledList, NumberInput, Section, Flex, Box, Stack } from '../components';\nimport { Window } from '../layouts';\n\nconst BarcodeComputerSection = (props, context) => {\n  const {\n    title,\n    destinations,\n    act,\n    amount,\n  } = props;\n  return (\n    <Section title={title}>\n      {destinations.map(destination => {\n        const {\n          crate_tag,\n          name,\n        } = destination;\n        return (\n          <Button\n            width=\"100%\"\n            align=\"center\"\n            key={crate_tag}\n            content={name ? name : crate_tag}\n            onClick={() => act('print', { crate_tag, amount })}\n          />\n        );\n      })}\n    </Section>\n  );\n};\n\nconst IDCard = (props, context) => {\n  if (!props.card) {\n    return;\n  }\n  const {\n    card,\n    act,\n  } = props;\n  return (\n    <Button\n      icon=\"eject\"\n      content={card.name + ` (${card.role})`}\n      tooltip=\"Clear scanned card\"\n      tooltipPosition=\"bottom-end\"\n      onClick={() => { act(\"reset_id\"); }}\n    />\n  );\n};\n\nexport const BarcodeComputer = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    sections,\n    card,\n  } = data;\n  const [amount, setAmount] = useLocalState(context, 'amount', 1);\n  return (\n    <Window\n      title=\"Barcode computer\"\n      width={600}\n      height={450}\n    >\n      <Window.Content scrollable>\n        <Stack>\n          <Stack.Item grow={1}>\n            <Section title=\"Amount to print\" fill>\n              <Box align=\"center\">\n                <NumberInput\n                  value={amount}\n                  minValue={1} maxValue={5}\n                  stepPixelSize={15}\n                  unit={\"Barcodes\"}\n                  onDrag={(e, value) => setAmount(value)}\n                />\n              </Box>\n            </Section>\n          </Stack.Item>\n          <Stack.Item grow={1}>\n            <Section title=\"Scanned ID card\" fill>\n              <Box align=\"center\">\n                <IDCard card={card} act={act} />\n                <br />\n                {card ? `Account balance: $${card.balance}` : null}\n              </Box>\n            </Section>\n          </Stack.Item>\n        </Stack>\n        <br />\n        <Stack>\n          {sections.map(section => {\n            const {\n              title,\n              destinations,\n            } = section;\n            return (\n              <Stack.Item key={title} width=\"33%\">\n                <BarcodeComputerSection\n                  title={title}\n                  destinations={destinations}\n                  act={act}\n                  amount={amount} />\n              </Stack.Item>\n            );\n          })}\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022 pali (https://github.com/pali6)\n * @license MIT\n */\n\nimport { useBackend, useLocalState } from '../backend';\nimport { Box, Flex, Section, Input, LabeledControls } from '../components';\nimport { ButtonCheckbox } from '../components/Button';\nimport { Window } from '../layouts';\n\nexport const Textarea = (props, context) => {\n  return (\n    <textarea\n      rows={4}\n      style={{\n        \"overflow-y\": \"hidden\",\n        \"width\": \"100%\",\n        \"background-color\": \"black\",\n        \"border\": \"solid 1px #6992c2\",\n        \"color\": \"white\",\n      }}\n      onInput={(e) => {\n        e.target.style.height = \"auto\";\n        e.target.style.height = (e.target.scrollHeight) + \"px\";\n      }}\n      id={props.id}\n      placeholder={props.placeholder}\n    >\n      {props.defaultText}\n    </textarea>\n  );\n};\n\nexport const InputTitle = (props, context) => {\n  return (\n    <h2>\n      {props.children}\n      {props.required && (<span style={{ \"color\": \"red\" }}>{\" *\"}</span>)}\n    </h2>\n  );\n};\n\nexport const BugReportForm = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const [isSecret, setIsSecret] = useLocalState(context, 'is_secret', false);\n  const [chosenTag, setTag] = useLocalState(context, 'tag', 'BUG');\n\n  const tags = [\n    [\"Unclassified\", \"BUG\", \"A bug that impacts usage of a feature.\"],\n    [\"Trivial\", \"TRIVIAL\", \"A bug that is extremely trivial, such as a spelling issue.\"],\n    [\"Minor\", \"MINOR\", \"A bug that does not impact usage of a feature. These are often visual issues.\"],\n    [\"Major\", \"MAJOR\", \"A bug that significantly impacts the usage of a feature.\"],\n    [\"Critical\", \"CRITICAL\", \"A bug that significantly impacts the progression of the round.\"],\n  ];\n\n  const submit = () => {\n    let data = {};\n    data.secret = isSecret;\n    data.tags = [chosenTag];\n    data.steps = document.getElementById(\"steps\").value;\n    data.additional = document.getElementById(\"additional\").value;\n    data.title = document.getElementById(\"title\").getElementsByTagName('input')[0].value;\n    data.description = document.getElementById(\"description\").getElementsByTagName('input')[0].value;\n    data.expected_behavior = document.getElementById(\"expected_behavior\").getElementsByTagName('input')[0].value;\n    if (!data.title || !data.description || !data.expected_behavior || !data.steps) {\n      alert(\"Please fill out all required fields!\");\n      return;\n    }\n    act(\"confirm\", data);\n  };\n\n  return (\n    <Window\n      title={\"Bug Report Form\"}\n      width={600}\n      height={700}>\n      <Window.Content>\n        <Section fill scrollable>\n          <Flex direction=\"column\" height=\"100%\">\n            <Flex.Item style={{ \"text-align\": \"center\" }}>\n              <a\n                href=\"https://github.com/goonstation/goonstation/issues/new?assignees=&labels=&template=bug_report.yml\"\n                target=\"_blank\" rel=\"noreferrer\"\n                style={{\n                  \"color\": \"#6992c2\",\n                }}\n              >\n                If you have a GitHub account click here instead\n              </a>\n            </Flex.Item>\n            <Flex.Item>\n              <InputTitle required>{\"Title\"}</InputTitle>\n              <Input width=\"100%\" id=\"title\" />\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <h2>{\"Tags\"}</h2>\n              {tags.map(tag =>\n                (\n                  <ButtonCheckbox\n                    key={tag[1]}\n                    checked={tag[1] === chosenTag}\n                    onClick={() => setTag(tag[1])}\n                    tooltip={tag[2]}\n                    tooltipPosition=\"bottom\">\n                    {tag[0]}\n                  </ButtonCheckbox>\n                )\n              )}\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <InputTitle required>{\"Description\"}</InputTitle>\n              {\"Give a short description of the bug\"}\n              <Input width=\"100%\" id=\"description\" />\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <InputTitle required>{\"Steps To Reproduce\"}</InputTitle>\n              {\"Give a list of steps to reproduce this issue\"}\n              <Textarea id=\"steps\" placeholder=\"1.\\n2.\\n3.\" />\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <InputTitle required>{\"Expected Behavior\"}</InputTitle>\n              {\"Give a short description of what you expected to happen\"}\n              <Input width=\"100%\" id=\"expected_behavior\" />\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <h2>{\"Additional Information & Screenshots\"}</h2>\n              {\"Add screenshots and any other information here\"}\n              <Textarea id=\"additional\" />\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <h2>{\"Is this bug an exploit or related to secret content?\"}</h2>\n              <ButtonCheckbox checked={isSecret} onClick={() => { setIsSecret(!isSecret); }}>\n                {\"Exploit / Secret\"}\n              </ButtonCheckbox>\n            </Flex.Item>\n            <Flex.Item my={2}>\n              <Flex style={{ \"justify-content\": \"center\" }}>\n                <Flex.Item mx={1}>\n                  <div\n                    className=\"Button Button--color--default\"\n                    onClick={submit}\n                  >\n                    {\"Submit\"}\n                  </div>\n                </Flex.Item>\n                <Flex.Item mx={1}>\n                  <div\n                    className=\"Button Button--color--default\"\n                    onClick={() => act(\"cancel\")}\n                  >\n                    {\"Cancel\"}\n                  </div>\n                </Flex.Item>\n              </Flex>\n            </Flex.Item>\n          </Flex>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { Button, ColorButton, LabeledList, Section } from '../../components';\nimport { CharacterPreferencesData } from './type';\n\nconst CustomDetail = ({ id, color, style }, context) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <>\n      <ColorButton color={color} onClick={() => act('update-detail-color', { id })} />\n      <Button icon=\"chevron-left\" onClick={() => act('update-detail-style-cycle', { id, direction: -1 })} />\n      <Button icon=\"chevron-right\" onClick={() => act('update-detail-style-cycle', { id, direction: 1 })} />\n      <Button onClick={() => act('update-detail-style', { id })}>{style}</Button>\n    </>\n  );\n};\n\nexport const CharacterTab = (_props, context) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <>\n      <Section\n        title=\"Appearance\"\n        buttons={\n          <Button.Checkbox checked={data.randomAppearance} onClick={() => act('update-randomAppearance')}>\n            Random appearance\n          </Button.Checkbox>\n        }>\n        <LabeledList>\n          <LabeledList.Item label=\"Skin Tone\">\n            <ColorButton color={data.skinTone} onClick={() => act('update-skinTone')} />\n            <Button icon=\"angle-double-left\" onClick={() => act('decrease-skinTone', { alot: 1 })} />\n            <Button icon=\"chevron-left\" onClick={() => act('decrease-skinTone')} />\n            <Button icon=\"chevron-right\" onClick={() => act('increase-skinTone')} />\n            <Button icon=\"angle-double-right\" onClick={() => act('increase-skinTone', { alot: 1 })} />\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Eye Color\">\n            <ColorButton color={data.eyeColor} onClick={() => act('update-eyeColor')} />\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Top Detail\">\n            <CustomDetail id=\"custom3\" color={data.customColor3} style={data.customStyle3} />\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Middle Detail\">\n            <CustomDetail id=\"custom2\" color={data.customColor2} style={data.customStyle2} />\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Bottom Detail\">\n            <CustomDetail id=\"custom1\" color={data.customColor1} style={data.customStyle1} />\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Special Style\">\n            <Button onClick={() => act('update-specialStyle')}>{data.specialStyle || \"default\"}</Button>\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Underwear\">\n            <CustomDetail id=\"underwear\" color={data.underwearColor} style={data.underwearStyle} />\n          </LabeledList.Item>\n          <LabeledList.Divider />\n        </LabeledList>\n      </Section>\n      <Section title=\"Sounds\">\n        <LabeledList>\n          <LabeledList.Item label=\"Fart\">\n            <Button onClick={() => act('update-fartsound')}>{data.fartsound}</Button>\n            <Button icon=\"volume-up\" onClick={() => act('previewSound', { fartsound: 1 })}>\n              Preview\n            </Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Scream\">\n            <Button onClick={() => act('update-screamsound')}>{data.screamsound}</Button>\n            <Button icon=\"volume-up\" onClick={() => act('previewSound', { screamsound: 1 })}>\n              Preview\n            </Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Chat\">\n            <Button onClick={() => act('update-chatsound')}>{data.chatsound}</Button>\n            <Button icon=\"volume-up\" onClick={() => act('previewSound', { chatsound: 1 })}>\n              Preview\n            </Button>\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n    </>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { Box, Button, Image, LabeledList, Section } from '../../components';\nimport { CharacterPreferencesData, CharacterPreferencesTooltip } from './type';\n\nexport const GameSettingsTab = (_props, context) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <Section>\n      <LabeledList>\n        <LabeledList.Item\n          label=\"Popup Font Size\"\n          buttons={<Button onClick={() => act('update-fontSize', { reset: 1 })}>Reset</Button>}>\n          <Box mb=\"5px\" color=\"label\">\n            Changes the font size used in popup windows. Only works when CHUI is disabled.\n          </Box>\n          <Button onClick={() => act('update-fontSize')}>{data.fontSize ? data.fontSize + '%' : 'Default'}</Button>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Messages\">\n          <Box mb=\"5px\" color=\"label\">\n            Toggles if certain messages are shown in the chat window by default. You can change these mid-round by using\n            the Toggle OOC/LOOC commands under the Commands tab in the top right.\n          </Box>\n          {data.isMentor ? (\n            <Box mb=\"5px\">\n              <Button.Checkbox checked={data.seeMentorPms} onClick={() => act('update-seeMentorPms')}>\n                Display Mentorhelp\n              </Button.Checkbox>\n            </Box>\n          ) : null}\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.listenOoc}\n              onClick={() => act('update-listenOoc')}\n              tooltip=\"Out-of-Character chat. This mostly just shows up on the RP server and at the end of rounds.\">\n              Display OOC chat\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.listenLooc}\n              onClick={() => act('update-listenLooc')}\n              tooltip=\"Local Out-of-Character is OOC chat, but only appears for nearby players. This is basically only used on the RP server.\">\n              Display LOOC chat\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={!data.flyingChatHidden}\n              onClick={() => act('update-flyingChatHidden')}\n              tooltip=\"Chat messages will appear over characters as they're talking.\">\n              See chat above people&apos;s heads\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.autoCapitalization}\n              onClick={() => act('update-autoCapitalization')}\n              tooltip=\"Chat messages you send will be automatically capitalized.\">\n              Auto-capitalize your messages\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.localDeadchat}\n              onClick={() => act('update-localDeadchat')}\n              tooltip=\"You'll only hear chat messages from living people on your screen as a ghost.\">\n              Local ghost hearing\n            </Button.Checkbox>\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"HUD Theme\">\n          <Box mb=\"5px\">\n            <Button onClick={() => act('update-hudTheme')}>Change</Button>\n          </Box>\n          <Box>\n            <Image pixelated src={`data:image/png;base64,${data.hudThemePreview}`} width=\"32px\" height=\"32px\" />\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Targeting Cursor\">\n          <Box mb=\"5px\">\n            <Button onClick={() => act('update-targetingCursor')}>Change</Button>\n          </Box>\n          <Box>\n            <Image pixelated src={`data:image/png;base64,${data.targetingCursorPreview}`} width=\"32px\" height=\"32px\" />\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Tooltips\">\n          <Box mb=\"5px\" color=\"label\">\n            Tooltips can appear when hovering over items. These tooltips can provide bits of information about the item,\n            such as attack strength, special moves, etc.\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.tooltipOption === CharacterPreferencesTooltip.Always}\n              onClick={() =>\n                act('update-tooltipOption', {\n                  value: CharacterPreferencesTooltip.Always,\n                })}>\n              Show Always\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.tooltipOption === CharacterPreferencesTooltip.Alt}\n              onClick={() =>\n                act('update-tooltipOption', {\n                  value: CharacterPreferencesTooltip.Alt,\n                })}>\n              Show When ALT is held\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.tooltipOption === CharacterPreferencesTooltip.Never}\n              onClick={() =>\n                act('update-tooltipOption', {\n                  value: CharacterPreferencesTooltip.Never,\n                })}>\n              Never Show\n            </Button.Checkbox>\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"tgui\">\n          <Box mb=\"5px\" color=\"label\">\n            tgui is the UI framework we use for some game windows, and it comes with options!\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox checked={data.tguiFancy} onClick={() => act('update-tguiFancy')}>\n              Fast & Fancy Windows\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox checked={data.tguiLock} onClick={() => act('update-tguiLock')}>\n              Lock initial placement of windows\n            </Button.Checkbox>\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Popups\">\n          <Box mb=\"5px\" color=\"label\">\n            These options toggle the popups that appear when logging in and at the end of a round.\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.viewChangelog}\n              onClick={() => act('update-viewChangelog')}\n              tooltip=\"The changelog can be shown at any time by using the 'Changelog' command, under the Commands tab in the top right.\"\n              tooltipPosition=\"top\">\n              Auto-open changelog\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.viewScore}\n              onClick={() => act('update-viewScore')}\n              tooltip=\"The end-of-round scoring shows various stats on how the round went. If this option is off, you won't be able to see it.\"\n              tooltipPosition=\"top\">\n              Auto-open end-of-round score\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.viewTickets}\n              onClick={() => act('update-viewTickets')}\n              tooltip=\"The end-of-round ticketing summary shows the various tickets and fines that were handed out. If this option is off, you can still see them on Goonhub (goonhub.com).\"\n              tooltipPosition=\"top\">\n              Auto-open end-of-round ticket summary\n            </Button.Checkbox>\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Controls\">\n          <Box mb=\"5px\" color=\"label\">\n            Various options for how you control your character and the game.\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.useClickBuffer}\n              onClick={() => act('update-useClickBuffer')}\n              tooltip=\"There is a cooldown after clicking on things in-game. When enabled, if you click something during this cooldown, the game will apply that click after the cooldown. Otherwise, the click is ignored.\"\n              tooltipPosition=\"top\">\n              Queue Combat Clicks\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.useWasd}\n              onClick={() => act('update-useWasd')}\n              tooltip=\"Enabling this allows you to use WASD to move instead of the arrow keys, and enables a few other hotkeys.\"\n              tooltipPosition=\"top\">\n              Use WASD Mode\n            </Button.Checkbox>\n          </Box>\n          <Box mb=\"5px\">\n            <Button.Checkbox\n              checked={data.useAzerty}\n              onClick={() => act('update-useAzerty')}\n              tooltip=\"If you have an AZERTY keyboard, enable this. Yep. This sure is a tooltip.\"\n              tooltipPosition=\"top\">\n              Use AZERTY Keyboard Layout\n            </Button.Checkbox>\n          </Box>\n          <Box color=\"label\">\n            Familiar with /tg/station controls? You can enable/disable them under the Game/Interface menu in the top\n            left.\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Preferred Map\">\n          <Button onClick={() => act('update-preferredMap')}>\n            {data.preferredMap ? data.preferredMap : <Box italic>None</Box>}\n          </Button>\n        </LabeledList.Item>\n      </LabeledList>\n    </Section>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { decodeHtmlEntities } from 'common/string';\nimport { useBackend } from '../../backend';\nimport { BlockQuote, Box, Button, ColorButton, LabeledList, Section } from '../../components';\nimport { CharacterPreferencesData } from './type';\n\nexport const GeneralTab = (_props, context) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <>\n      <Section title=\"Records\">\n        <LabeledList>\n          <LabeledList.Item\n            label=\"Name\"\n            buttons={\n              <Button.Checkbox checked={data.randomName} onClick={() => act('update-randomName')}>\n                Random\n              </Button.Checkbox>\n            }>\n            <Button onClick={() => act('update-nameFirst')}>{data.nameFirst}</Button>\n            <Button onClick={() => act('update-nameMiddle')} color={data.nameMiddle === '' ? 'grey' : 'default'}>\n              {data.nameMiddle !== '' ? data.nameMiddle : <Box italic>None</Box>}\n            </Button>\n            <Button onClick={() => act('update-nameLast')}>{data.nameLast}</Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Gender\">\n            <Button onClick={() => act('update-gender')}>{data.gender}</Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Pronouns\">\n            <Button onClick={() => act('update-pronouns')}>{data.pronouns}</Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Age\">\n            <Button onClick={() => act('update-age')}>{data.age}</Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Blood Type\">\n            <Button onClick={() => act('update-bloodType')}>\n              {data.bloodRandom ? (\n                <Box as=\"span\" italic>\n                  Random\n                </Box>\n              ) : (\n                data.bloodType\n              )}\n            </Button>\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Bank PIN\"\n            buttons={\n              <Button.Checkbox checked={!data.pin} onClick={() => act('update-pin', { random: !!data.pin })}>\n                Random\n              </Button.Checkbox>\n            }>\n            <Button onClick={() => act('update-pin')}>\n              {data.pin ?? (\n                <Box as=\"span\" italic>\n                  Random\n                </Box>\n              )}\n            </Button>\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Flavor Text\"\n            buttons={\n              <Button onClick={() => act('update-flavorText')} icon=\"wrench\">\n                Edit\n              </Button>\n            }>\n            <BlockQuote>{data.flavorText ? decodeHtmlEntities(data.flavorText) : <Box italic>None</Box>}</BlockQuote>\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Security Note\"\n            buttons={\n              <Button onClick={() => act('update-securityNote')} icon=\"wrench\">\n                Edit\n              </Button>\n            }>\n            <BlockQuote>\n              {data.securityNote ? decodeHtmlEntities(data.securityNote) : <Box italic>None</Box>}\n            </BlockQuote>\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Medical Note\"\n            buttons={\n              <Button onClick={() => act('update-medicalNote')} icon=\"wrench\">\n                Edit\n              </Button>\n            }>\n            <BlockQuote>{data.medicalNote ? decodeHtmlEntities(data.medicalNote) : <Box italic>None</Box>}</BlockQuote>\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n      <Section title=\"Other names\">\n        <LabeledList>\n          <LabeledList.Item label=\"Preferred Cyborg Name\">\n            <Button onClick={() => act('update-robotName')} color={data.robotName ? 'default' : 'grey'}>\n              {data.robotName ? data.robotName : <Box italic>None</Box>}\n            </Button>\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n      <Section title=\"PDA\">\n        <LabeledList>\n          <LabeledList.Item label=\"Ringtone\">\n            <Button onClick={() => act('update-pdaRingtone')}>{data.pdaRingtone}</Button>\n            <Button onClick={() => act('previewSound', { pdaRingtone: 1 })} icon=\"volume-up\">\n              Preview\n            </Button>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Background Color\">\n            <ColorButton color={data.pdaColor} onClick={() => act('update-pdaColor')} />\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n    </>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { Fragment } from 'inferno';\nimport { useBackend } from '../../backend';\nimport { Box, Button, Divider, LabeledList, Section } from '../../components';\nimport { CharacterPreferencesData } from './type';\n\nexport const SavesTab = (_props, context) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <Section title=\"Cloud Saves\">\n      {data.cloudSaves ? (\n        <>\n          {data.cloudSaves.map((name, index) => (\n            <Fragment key={name}>\n              <Cloudsave name={name} index={index} />\n              <Divider />\n            </Fragment>\n          ))}\n          <Box mt=\"5px\">\n            <Button onClick={() => act('cloud-new')}>Create new save</Button>\n          </Box>\n        </>\n      ) : (\n        <Box italic color=\"label\">\n          Cloud saves could not be loaded.\n        </Box>\n      )}\n    </Section>\n  );\n};\n\ntype CloudSaveProps = {\n  name: string;\n  index: number;\n};\n\nconst Cloudsave = ({ name, index }: CloudSaveProps, context: any) => {\n  const { act } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <LabeledList>\n      <LabeledList.Item\n        label={`Cloud save ${index + 1}`}\n        buttons={\n          <>\n            {/* Just a small gap between these so you dont accidentally hit one */}\n            <Button onClick={() => act('cloud-load', { name })}>Load</Button> -{' '}\n            <Button onClick={() => act('cloud-save', { name })}>Save</Button> -{' '}\n            <Button.Confirm onClick={() => act('cloud-delete', { name })} content=\"Delete\" />\n          </>\n        }>\n        {name}\n      </LabeledList.Item>\n    </LabeledList>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { KEY_LEFT, KEY_RIGHT } from 'common/keycodes';\nimport { useBackend, useLocalState } from '../../backend';\nimport { Box, Button, ByondUi, LabeledList, Section, Stack, Tabs } from '../../components';\nimport { Window } from '../../layouts';\nimport { CharacterTab } from './CharacterTab';\nimport { GameSettingsTab } from './GameSettingsTab';\nimport { GeneralTab } from './GeneralTab';\nimport { SavesTab } from './SavesTab';\nimport { CharacterPreferencesData, CharacterPreferencesProfile, CharacterPreferencesTabKeys } from './type';\n\nlet nextRotateTime = 0;\n\nexport const CharacterPreferences = (_props: any, context: any) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n  const [menu, setMenu] = useLocalState(context, 'menu', CharacterPreferencesTabKeys.General);\n\n  const handleKeyDown = (e) => {\n    if (\n      (menu === CharacterPreferencesTabKeys.General || menu === CharacterPreferencesTabKeys.Character)\n      && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)\n    ) {\n      e.preventDefault();\n      if (nextRotateTime > performance.now()) {\n        return;\n      }\n      nextRotateTime = performance.now() + 125;\n\n      let direction = 'rotate-counter-clockwise';\n      if (e.keyCode === KEY_RIGHT) {\n        direction = 'rotate-clockwise';\n      }\n\n      act(direction);\n    }\n  };\n\n  return (\n    <Window width={600} height={750} title=\"Character Setup\">\n      <Window.Content onKeyDown={handleKeyDown}>\n        <Stack vertical fill>\n          <Stack.Item>\n            <SavesAndProfile />\n          </Stack.Item>\n          <Stack.Item>\n            <Tabs>\n              <Tabs.Tab\n                selected={menu === CharacterPreferencesTabKeys.General}\n                onClick={() => setMenu(CharacterPreferencesTabKeys.General)}>\n                General\n              </Tabs.Tab>\n              <Tabs.Tab\n                selected={menu === CharacterPreferencesTabKeys.Character}\n                onClick={() => setMenu(CharacterPreferencesTabKeys.Character)}>\n                Appearance\n              </Tabs.Tab>\n              <Tabs.Tab onClick={() => act('open-occupation-window')}>Occupation</Tabs.Tab>\n              <Tabs.Tab onClick={() => act('open-traits-window')}>Traits</Tabs.Tab>\n              <Tabs.Tab\n                selected={menu === CharacterPreferencesTabKeys.GameSettings}\n                onClick={() => setMenu(CharacterPreferencesTabKeys.GameSettings)}>\n                Game Settings\n              </Tabs.Tab>\n              <Tabs.Tab\n                selected={menu === CharacterPreferencesTabKeys.Saves}\n                onClick={() => setMenu(CharacterPreferencesTabKeys.Saves)}>\n                Cloud Saves\n              </Tabs.Tab>\n            </Tabs>\n          </Stack.Item>\n          <Stack.Item grow=\"1\">\n            {menu === CharacterPreferencesTabKeys.General || menu === CharacterPreferencesTabKeys.Character ? (\n              <Stack fill>\n                <Stack.Item basis={0} grow=\"1\">\n                  <Section scrollable fill>\n                    {menu === CharacterPreferencesTabKeys.General && <GeneralTab />}\n                    {menu === CharacterPreferencesTabKeys.Character && <CharacterTab />}\n                  </Section>\n                </Stack.Item>\n                <Stack.Item>\n                  <Section fill>\n                    <ByondUi\n                      params={{\n                        id: data.preview,\n                        type: 'map',\n                      }}\n                      style={{\n                        width: '64px',\n                        height: '128px',\n                      }}\n                    />\n                    <Box textAlign=\"center\" mt=\"5px\">\n                      <Button icon=\"chevron-left\" onClick={() => act('rotate-counter-clockwise')} />\n                      <Button icon=\"chevron-right\" onClick={() => act('rotate-clockwise')} />\n                    </Box>\n                  </Section>\n                </Stack.Item>\n              </Stack>\n            ) : (\n              <Section scrollable fill>\n                {menu === CharacterPreferencesTabKeys.GameSettings && <GameSettingsTab />}\n                {menu === CharacterPreferencesTabKeys.Saves && <SavesTab />}\n              </Section>\n            )}\n          </Stack.Item>\n          <Stack.Item>\n            <Section>\n              <Button.Confirm content=\"Reset All\" onClick={() => act('reset')} />\n            </Section>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst SavesAndProfile = (_props: any, context: any) => {\n  const { act, data } = useBackend<CharacterPreferencesData>(context);\n\n  const activeProfileIndex = data.profiles.findIndex((p) => p.active);\n\n  return (\n    <Stack vertical>\n      <Stack.Item>\n        <Stack>\n          {data.profiles.map((profile, index) => (\n            <Stack.Item key={index} basis={0} grow={1}>\n              <Profile profile={profile} index={index} />\n            </Stack.Item>\n          ))}\n        </Stack>\n      </Stack.Item>\n      <Stack.Item>\n        <Section>\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Profile Name\"\n              buttons={\n                activeProfileIndex > -1 ? (\n                  <>\n                    <Button onClick={() => act('load', { index: activeProfileIndex + 1 })}>Reload</Button>\n                    {' - '}\n                    <Button\n                      onClick={() => act('save', { index: activeProfileIndex + 1 })}\n                      icon={data.profileModified ? 'exclamation-triangle' : undefined}\n                      color={data.profileModified ? 'danger' : undefined}\n                      tooltip={\n                        data.profileModified\n                          ? 'You may have unsaved changes! Any unsaved changes will take effect for this round only.'\n                          : undefined\n                      }\n                      tooltipPosition=\"left\">\n                      Save\n                    </Button>\n                  </>\n                ) : null\n              }>\n              <Button onClick={() => act('update-profileName')}>\n                {data.profileName ? data.profileName : <Box italic>None</Box>}\n              </Button>\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Stack.Item>\n    </Stack>\n  );\n};\n\ntype ProfileProps = {\n  index: number;\n  profile: CharacterPreferencesProfile;\n};\n\nconst Profile = (props: ProfileProps, context: any) => {\n  const { index, profile } = props;\n  const { act } = useBackend<CharacterPreferencesData>(context);\n\n  return (\n    <Section\n      title={`Profile ${index + 1}`}\n      textAlign=\"center\"\n      backgroundColor={profile.active ? 'rgba(0, 0, 0, 0.10)' : null}\n      fill>\n      <Stack vertical fill justify=\"space-between\">\n        <Stack.Item>\n          <Box>\n            {profile.name ? (\n              <Box>{profile.name}</Box>\n            ) : (\n              <Box italic color=\"label\">\n                Empty\n              </Box>\n            )}\n          </Box>\n        </Stack.Item>\n        <Stack.Item>\n          <Button disabled={!profile.name} onClick={() => act('load', { index: index + 1 })}>\n            Load\n          </Button>\n          {' - '}\n          <Button onClick={() => act('save', { index: index + 1 })}>Save</Button>\n        </Stack.Item>\n      </Stack>\n    </Section>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { BooleanLike } from 'common/react';\n\nexport interface CharacterPreferencesData {\n  isMentor: BooleanLike;\n\n  profiles: CharacterPreferencesProfile[];\n\n  cloudSaves?: string[];\n\n  preview: string;\n  profileName: string;\n  profileModified: number;\n  nameFirst: string;\n  nameMiddle: string;\n  nameLast: string;\n  robotName: string;\n  randomName: number;\n  gender: string;\n  pronouns: string;\n  age: string;\n  bloodRandom: string;\n  bloodType: string;\n  pin: string;\n  flavorText: string;\n  securityNote: string;\n  medicalNote: string;\n  fartsound: string;\n  screamsound: string;\n  chatsound: string;\n  pdaColor: string;\n  pdaRingtone: string;\n  skinTone: string;\n  specialStyle: string;\n  eyeColor: string;\n  customColor1: string;\n  customStyle1: string;\n  customColor2: string;\n  customStyle2: string;\n  customColor3: string;\n  customStyle3: string;\n  underwearColor: string;\n  underwearStyle: string;\n  randomAppearance: BooleanLike;\n\n  fontSize: string;\n  seeMentorPms: BooleanLike;\n  listenOoc: BooleanLike;\n  listenLooc: BooleanLike;\n  flyingChatHidden: BooleanLike;\n  autoCapitalization: BooleanLike;\n  localDeadchat: BooleanLike;\n  targetingCursor: string;\n  targetingCursorPreview: string;\n  hudTheme: string;\n  hudThemePreview: string;\n  tooltipOption: CharacterPreferencesTooltip;\n  tguiFancy: BooleanLike;\n  tguiLock: BooleanLike;\n  viewChangelog: BooleanLike;\n  viewScore: BooleanLike;\n  viewTickets: BooleanLike;\n  useClickBuffer: BooleanLike;\n  useWasd: BooleanLike;\n  useAzerty: BooleanLike;\n  preferredMap: string;\n}\n\nexport interface CharacterPreferencesProfile {\n  active: boolean;\n  name: string;\n}\n\nexport enum CharacterPreferencesTabKeys {\n  Saves,\n  General,\n  Character,\n  GameSettings,\n}\n\nexport enum CharacterPreferencesTooltip {\n  Always = 1, // TOOLTIP_ALWAYS\n  Never = 2, // TOOLTIP_NEVER\n  Alt = 3, // TOOLTIP_ALT\n}\n","/**\n* @file\n* @copyright 2020\n* @author ThePotato97 (https://github.com/ThePotato97)\n* @license ISC\n*/\n\nimport { useBackend, useSharedState, useLocalState } from \"../backend\";\nimport { Button, NumberInput, Section, Box, Table, Tooltip, Icon, Tabs, Input, Modal } from \"../components\";\nimport { Window } from \"../layouts\";\n\nconst MatterState = {\n  Solid: 1,\n  Liquid: 2,\n  Gas: 3,\n};\n\nconst stateMap = {\n  [MatterState.Solid]: {\n    icon: 'square',\n    pr: 0.5,\n  },\n  [MatterState.Liquid]: {\n    icon: 'tint',\n    pr: 0.9,\n  },\n  [MatterState.Gas]: {\n    icon: 'wind',\n    pr: 0.5,\n  },\n};\n\nexport const ChemDispenser = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    beakerContents,\n  } = data;\n  return (\n    <Window\n      width={570}\n      height={705}\n      theme=\"ntos\">\n      <Window.Content scrollable>\n        <Box>\n          <ReagentDispenser />\n          <Beaker />\n          {!!beakerContents.length && (\n            <BeakerContentsGraph />\n          )}\n          <ChemGroups />\n        </Box>\n      </Window.Content>\n    </Window>\n  );\n};\n\nexport const ReagentDispenser = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    beakerName,\n    currentBeakerName,\n    maximumBeakerVolume,\n    beakerTotalVolume,\n  } = data;\n  const [addAmount, setAddAmount] = useSharedState(context, 'addAmount', 10);\n  const [iconToggle, setIconToggle] = useSharedState(context, 'iconToggle', false);\n  const [hoverOverId, setHoverOverId] = useLocalState(context, 'hoverOver', \"\");\n\n  const dispensableReagents = data.dispensableReagents || [];\n\n  return (\n    <Section\n      fontSize=\"12px\"\n      title={(\n        <>\n          Dispense\n          <Box\n            as=\"span\"\n            ml={18}>\n            Icons:\n            <Button\n              width={2}\n              textAlign=\"center\"\n              backgroundColor=\"rgba(0, 0, 0, 0)\"\n              textColor={iconToggle ? \"rgba(255, 255, 255, 0.5)\" : \"rgba(255, 255, 255, 1)\"}\n              onClick={() => setIconToggle(false)}>\n              <Icon mr={1} name={\"circle\"} />\n            </Button>\n            <Button\n              width={2}\n              backgroundColor=\"rgba(0, 0, 0, 0)\"\n              textColor={iconToggle ? \"rgba(255, 255, 255, 1)\" : \"rgba(255, 255, 255, 0.5)\"}\n              onClick={() => setIconToggle(true)}>\n              <Icon name={\"tint\"} />\n            </Button>\n          </Box>\n        </>\n      )}\n      buttons={(\n        <Box>\n          {\"Dispense Amount: \"}\n          <NumberInput\n            value={addAmount}\n            format={value => value + \"u\"}\n            width={4}\n            minValue={1}\n            maxValue={100}\n            onDrag={(e, value) => setAddAmount(value)}\n          />\n        </Box>\n      )}>\n      <Section fitted backgroundColor=\"rgba(0,0,0,0)\">\n        {(!maximumBeakerVolume || maximumBeakerVolume\n        === beakerTotalVolume) && (\n          <Modal\n            className=\"chem-dispenser__labels\"\n            fontSize=\"20px\"\n            mr={2}\n            p={3}>\n            <Box>\n              {!maximumBeakerVolume &&(\n                \"No \" + beakerName + \" Inserted\"\n              ) || currentBeakerName + \" Full\"}\n            </Box>\n          </Modal>\n        )}\n        {dispensableReagents.map((reagent, reagentIndex) => (\n          <Button\n            key={reagentIndex}\n            className=\"chem-dispenser__dispense-buttons\"\n            align=\"left\"\n            width=\"130px\"\n            onMouseEnter={() => setHoverOverId(reagent.id)}\n            onMouseLeave={() => setHoverOverId(\"\")}\n            disabled={maximumBeakerVolume === beakerTotalVolume}\n            lineHeight={1.75}\n            onClick={() => act(\"dispense\", {\n              amount: addAmount,\n              reagentId: reagent.id,\n            })}\n          >\n            <Icon\n              color={\"rgba(\" + reagent.colorR + \",\" + reagent.colorG + \", \" + reagent.colorB + \", 1)\"}\n              name={iconToggle ? stateMap[reagent.state].icon : \"circle\"}\n              pt={1}\n              style={{\n                \"text-shadow\": \"0 0 3px #000\",\n              }}\n            />\n            {reagent.name}\n          </Button>\n        ))}\n      </Section>\n      <Box italic pt={0.5}> {\"Reagent ID: \" + hoverOverId}</Box>\n    </Section>\n  );\n};\n\nexport const Beaker = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    beakerName,\n    beakerTotalVolume,\n    currentBeakerName,\n    maximumBeakerVolume,\n  } = data;\n\n  const [iconToggle] = useSharedState(context, 'iconToggle', false);\n  const [removeAmount, setRemoveAmount] = useSharedState(context, 'removeAmount', 10);\n  const removeReagentButtons = [removeAmount, 10, 5, 1];\n  const beakerContents = data.beakerContents || [];\n\n  return (\n    <Section\n      fontSize=\"12px\"\n      title={\n        <Button\n          className=\"chem-dispenser__buttons\"\n          icon=\"eject\"\n          onClick={() => act(\"eject\")}>\n          {!maximumBeakerVolume ? \"Insert \" + beakerName : \"Eject \" + currentBeakerName + \" (\" + beakerTotalVolume + \"/\" + maximumBeakerVolume + \")\"}\n        </Button>\n      }\n      buttons={(\n        <Box align=\"left\" as=\"span\">\n          {\"Remove Amount: \"}\n          <NumberInput\n            width={4}\n            format={value => value + \"u\"}\n            value={removeAmount}\n            minValue={1}\n            maxValue={100}\n            onDrag={(e, value) => setRemoveAmount(value)}\n          />\n        </Box>\n      )}>\n      <Table.Row>\n        <Table.Cell bold collapsing textAlign=\"center\" />\n        <Table.Cell collapsing />\n      </Table.Row>\n      <Box color=\"label\">\n        {!beakerContents.length && (\n          \"No Contents\"\n        )}\n      </Box>\n      {beakerContents.map((reagent, indexContents) => (\n        <Table.Row key={indexContents}>\n          <Table.Cell\n            collapsing\n            textAlign=\"left\"\n          >\n            <Icon\n              pr={stateMap[reagent.state].pr}\n              style={{\n                \"text-shadow\": \"0 0 3px #000;\",\n              }}\n              color={\"rgba(\" + reagent.colorR + \",\" + reagent.colorG + \", \" + reagent.colorB + \", 1)\"}\n              name={iconToggle ? stateMap[reagent.state].icon : \"circle\"}\n            />\n            { `( ${reagent.volume}u ) ${reagent.name}`}\n          </Table.Cell>\n          <Table.Cell collapsing textAlign=\"left\">\n            <Box mt={0.5}>\n              <Button\n                icon=\"filter\"\n                onClick={() => act(\"isolate\", {\n                  reagentId: reagent.id,\n                })}>\n                Isolate\n              </Button>\n              <Button\n                icon=\"minus\"\n                onClick={() => act(\"all\", {\n                  amount: removeAmount,\n                  reagentId: reagent.id,\n                })}>\n                All\n              </Button>\n              {removeReagentButtons.map((amount, indexButtons) => (\n                <Button\n                  key={indexButtons}\n                  icon=\"minus\"\n                  onClick={() => act(\"remove\", {\n                    amount: amount, reagentId: reagent.id,\n                  })}>\n                  {amount}\n                </Button>\n              ))}\n            </Box>\n          </Table.Cell>\n        </Table.Row>))}\n    </Section>\n  );\n};\n\nexport const BeakerContentsGraph = (props, context) => {\n  const { data } = useBackend(context);\n  const [sort, setSort] = useSharedState(context, 'sort', 1);\n  const {\n    beakerContents,\n    maximumBeakerVolume,\n    beakerTotalVolume,\n  } = data;\n  const finalColor = data.finalColor || \"\";\n  const sortMap = [\n    {\n      id: 0,\n      icon: \"sort-amount-down\",\n      contents: \"\",\n      compareFunction: (a, b) => b.volume - a.volume,\n    },\n    {\n      id: 1,\n      icon: \"sort-amount-up\",\n      contents: \"\",\n      compareFunction: (a, b) => a.volume - b.volume,\n    },\n    {\n      id: 2,\n      contents: \"Density\",\n      compareFunction: (a, b) => a.state - b.state,\n    },\n    {\n      id: 3,\n      contents: \"Order Added\",\n      compareFunction: () => 1,\n    },\n  ];\n  return (\n    <Section align=\"center\" p={0.5}\n      title={(\n        <Tabs>\n          {sortMap.map((sortBy, index) => (\n            <Tabs.Tab\n              key={index}\n              fontSize=\"11px\"\n              textAlign=\"center\"\n              align=\"center\"\n              selected={sort === sortBy.id}\n              onClick={() => setSort(sortBy.id)}>\n              {sortBy.icon && (\n                <Icon name={sortBy.icon} />\n              )}\n              {sortBy.contents}\n            </Tabs.Tab>\n          ))}\n        </Tabs>\n      )}>\n      <Tooltip\n        position=\"top\"\n        content=\"Current Mixture Color\"\n      >\n        <Box\n          position=\"relative\"\n          py={1.5}\n          pl={4}\n          backgroundColor={finalColor.substring(0, 7)}\n        />\n      </Tooltip>\n      {beakerContents.slice().sort(sortMap[sort].compareFunction).map(\n        (reagent, index) => (\n          <Tooltip\n            content={`${reagent.name} ( ${reagent.volume}u )`}\n            key={index}\n            position=\"top\"\n          >\n            <Box\n              position=\"relative\"\n              as=\"span\"\n              pl={((reagent.volume / maximumBeakerVolume)*100) / 1.146}\n              py={1}\n              backgroundColor={\"rgba(\" + reagent.colorR + \",\" + reagent.colorG + \", \" + reagent.colorB + \", 1)\"}\n            />\n          </Tooltip>\n        ))}\n      <Tooltip\n        content={`( ${maximumBeakerVolume - beakerTotalVolume}u )`}\n        position=\"top\"\n      >\n        <Box\n          as=\"span\"\n          position=\"relative\"\n          pl={((maximumBeakerVolume - beakerTotalVolume)\n            / maximumBeakerVolume * 100) / 1.146}\n          py={1}\n          backgroundColor=\"black\"\n        />\n      </Tooltip>\n    </Section>\n  );\n};\n\n\nexport const ChemGroups = (props, context) => {\n  const { act, data } = useBackend(context);\n  const [groupName, setGroupName] = useLocalState(context, 'groupName', \"\");\n  const [reagents, setReagents] = useLocalState(context, 'reagents', \"\");\n  const {\n    groupList,\n    idCardName,\n    idCardInserted,\n  } = data;\n\n  return (\n    <>\n      <Section\n        title=\"Reagent Groups\"\n        buttons={\n          <Box>\n            <Button\n              className=\"chem-dispenser__buttons\"\n              icon=\"eject\"\n              onClick={() => act(\"card\")}>\n              {idCardInserted ? (\"Eject ID: \" + idCardName) : \"Insert ID\"}\n            </Button>\n          </Box>\n        }>\n        <Box>\n\n          <Box>\n            <Box pt={1} pr={7} as=\"span\">\n              {\"Group Name:\"}\n            </Box>\n            <Box pt={1} as=\"span\">\n              {\"Reagents:\"}\n            </Box>\n          </Box>\n          <Input\n            pl={5}\n            placeholder=\"Name\"\n            value={groupName}\n            onInput={(e, value) => setGroupName(value)} />\n          <Box pt={1} as=\"span\">\n            <Input\n              pl={5}\n              placeholder=\"Reagents\"\n              value={reagents}\n              onInput={(e, value) => setReagents(value)} />\n          </Box>\n          <Box as=\"span\">\n            <Button\n              icon=\"plus-circle\"\n              lineHeight={1.75}\n              onClick={() => {\n                act(\"newGroup\", { reagents: reagents, groupName: groupName });\n                setGroupName(\"\");\n                setReagents(\"\");\n              }}>\n              Add Group\n            </Button>\n          </Box>\n\n        </Box>\n        <Box pt={0.5}>\n          {\"Reagents Format: water=1;sugar=1;\"}\n        </Box>\n      </Section>\n      {!!groupList.length && (\n        <Section>\n          {groupList.map((group, index) => (\n            <Box key={index}>\n              <Button\n                key={index}\n                icon=\"tint\"\n                lineHeight={1.75}\n                onClick={() => act(\"groupDispense\", {\n                  selectedGroup: group.ref,\n                })}>\n                {group.name}\n              </Button>\n              <Button\n                icon=\"trash\"\n                lineHeight={1.75}\n                onClick={() => act(\"deleteGroup\", {\n                  selectedGroup: group.ref,\n                })}>\n                Delete\n              </Button>\n              {\" \" + group.info}\n            </Box>\n          ))}\n        </Section>\n      )}\n    </>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { classes } from 'common/react';\nimport { useBackend } from \"../backend\";\nimport { AnimatedNumber, Box, Button, Dimmer, Icon, Knob, Section, SectionEx, Stack } from '../components';\nimport { Window } from '../layouts';\nimport { freezeTemperature, getTemperatureColor, getTemperatureIcon, getTemperatureChangeName } from './common/temperatureUtils';\nimport { NoContainer, ReagentGraph, ReagentList } from './common/ReagentInfo';\n\nexport const ChemHeater = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { containerData, isActive, targetTemperature } = data;\n\n  return (\n    <Window\n      title=\"Reagent Heater/Cooler\"\n      width={320}\n      height={385}>\n      <Window.Content>\n        <ChemDisplay container={containerData} targetTemperature={targetTemperature} active={isActive} />\n        <Section title=\"Temperature Control\">\n          <Stack align=\"center\">\n            <Stack.Item>\n              <Knob\n                animated\n                size={2}\n                value={targetTemperature}\n                minValue={0}\n                maxValue={1000}\n                format={value => value + \" K\"}\n                onDrag={(e, value) => act('adjustTemp', { temperature: value })}\n              />\n            </Stack.Item>\n            <Stack.Item grow basis={0} overflow=\"hidden\">\n              <Box\n                className=\"ChemHeater__TemperatureNumber\"\n                nowrap\n                p={1}\n                fontSize={1.5}\n                color={getTemperatureColor(targetTemperature)}\n                backgroundColor=\"black\">\n                <Box fontSize={1}>Target</Box>\n                <Icon name={getTemperatureIcon(targetTemperature)} pr={0.5} />\n                <AnimatedNumber value={targetTemperature} /> K\n              </Box>\n            </Stack.Item>\n            <Stack.Item basis={9.6} align=\"center\">\n              <Button\n                icon=\"power-off\"\n                disabled={!containerData?.totalVolume}\n                color={isActive ? \"red\" : \"green\"}\n                fluid\n                height=\"100%\"\n                fontSize={1.25}\n                textAlign=\"center\"\n                onClick={() => act(isActive ? 'stop' : 'start')}>\n                {isActive ? \"Deactivate\" : \"Activate\"}\n              </Button>\n            </Stack.Item>\n          </Stack>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst ChemDisplay = (props, context) => {\n  const { act } = useBackend(context);\n  const { active = false, targetTemperature = freezeTemperature } = props;\n  const container = props.container ?? NoContainer;\n  const working = active && !container.fake;\n  const { temperature, totalVolume } = container;\n\n  return (\n    <SectionEx\n      capitalize\n      title={container.name}\n      buttons={\n        <Button\n          icon=\"eject\"\n          disabled={!props.container}\n          onClick={() => act('eject')}>\n          Eject\n        </Button>\n      }>\n      <ReagentGraph container={container} />\n      <ReagentList container={container} />\n      <Box\n        className={classes([\"ChemHeater__TemperatureBox\", working && `ChemHeater__TemperatureBox__${getTemperatureChangeName(temperature, targetTemperature)}`])}>\n        {!totalVolume || (\n          <Box\n            fontSize={2}\n            color={getTemperatureColor(temperature)}\n            className={\"ChemHeater__TemperatureNumber\"}>\n            <Icon name=\"long-arrow-alt-down\"\n              className={classes([\"ChemHeater__TemperatureArrow\", working && `ChemHeater__TemperatureArrow__${getTemperatureChangeName(temperature, targetTemperature)}`])}\n              pt=\"2px\"\n              pr={0.25}\n              style={{\n                transform: active ? `scaleY(${Math.sign(temperature - targetTemperature)})` : \"scaleY(0)\",\n              }}\n            />\n            <Icon name={getTemperatureIcon(temperature)} pr={0.5} />\n            <AnimatedNumber value={temperature} /> K\n          </Box>\n        )}\n      </Box>\n      {!props.container && (\n        <Dimmer>\n          <Button\n            icon=\"eject\"\n            fontSize={1.5}\n            onClick={() => act('insert')}\n            bold>\n            Insert Beaker\n          </Button>\n        </Dimmer>\n      )}\n    </SectionEx>\n  );\n};\n","/**\n* @file\n* @copyright 2020\n* @author Original ThePotato97 (https://github.com/ThePotato97)\n* @author Changes Mordent (https://github.com/mordent-goonstation)\n* @license ISC\n*/\n\nimport { useBackend, useLocalState, useSharedState } from '../backend';\nimport { Box, Button, ColorBox, Flex, Icon, LabeledList, Modal, NoticeBox, ProgressBar, Section, Stack, Tabs } from '../components';\nimport { Window } from '../layouts';\nimport { HealthStat } from './common/HealthStat';\nimport { clamp } from 'common/math';\n\nconst Suffixes = ['', 'k', 'M', 'B', 'T'];\n\nexport const shortenNumber = (value, minimumTier = 0) => {\n  const tier = Math.log10(Math.abs(value)) / 3 | 0;\n  return (tier === minimumTier)\n    ? value\n    : `${Math.round(value / Math.pow(10, tier * 3))}${Suffixes[tier]}`;\n};\n\nconst healthColorByLevel = [\n  '#17d568',\n  '#2ecc71',\n  '#e67e22',\n  '#ed5100',\n  '#e74c3c',\n  '#ed2814',\n];\n\nconst healthToColor = (oxy, tox, burn, brute) => {\n  const healthSum = oxy + tox + burn + brute;\n  const level = clamp(Math.ceil(healthSum / 25), 0, 5);\n  return healthColorByLevel[level];\n};\n\nconst Tab = {\n  Functions: 'functions',\n  Records: 'records',\n  Pods: 'pods',\n};\n\nconst Types = {\n  Danger: 'danger',\n  Info: 'info',\n  Success: 'success',\n};\n\nconst TypedNoticeBox = props => {\n  const {\n    type,\n    ...rest\n  } = props;\n  const typeProps = {\n    ...(type === Types.Danger ? { danger: true } : {}),\n    ...(type === Types.Info ? { info: true } : {}),\n    ...(type === Types.Success ? { success: true } : {}),\n  };\n  return <NoticeBox {...typeProps} {...rest} />;\n};\n\nexport const CloningConsole = (props, context) => {\n  const { data, act } = useBackend(context);\n  const {\n    balance,\n    cloneSlave,\n    clonesForCash,\n    cloningWithRecords,\n  } = data;\n\n  // N.B. uses `deletionTarget` that is shared with Records component\n  const [deletionTarget, setDeletionTarget] = useLocalState(context, 'deletionTarget', '');\n  const [tab, setTab] = useSharedState(context, 'tab', Tab.Records);\n\n  if (!cloningWithRecords && tab === Tab.Records) {\n    setTab(Tab.Pods);\n  }\n\n  return (\n    <Window\n      theme={cloneSlave.some(Boolean) ? 'syndicate' : 'ntos'}\n      width={540}\n      height={595}>\n      <Window.Content>\n        {deletionTarget && (\n          <Modal\n            mx={7}\n            fontSize=\"31px\"\n          >\n            <Flex align=\"center\">\n              <Flex.Item mr={2} mt={1}>\n                <Icon name=\"trash\" />\n              </Flex.Item>\n              <Flex.Item>Delete Record?</Flex.Item>\n            </Flex>\n            <Box\n              mt={2}\n              textAlign=\"center\"\n              fontSize=\"24px\">\n              <Button\n                lineHeight=\"40px\"\n                icon=\"check\"\n                color=\"good\"\n                onClick={() => {\n                  act('delete', { ckey: deletionTarget });\n                  setDeletionTarget('');\n                }}\n              >\n                Yes\n              </Button>\n              <Button\n                width={8}\n                align=\"center\"\n                mt={2}\n                ml={5}\n                lineHeight=\"40px\"\n                icon=\"times\"\n                color=\"bad\"\n                onClick={() => setDeletionTarget('')}\n              >\n                No\n              </Button>\n            </Box>\n          </Modal>\n        )}\n        <Stack vertical fill>\n          <Stack.Item>\n            <Section fitted>\n              <Tabs>\n                {!!cloningWithRecords && (\n                  <Tabs.Tab\n                    icon=\"list\"\n                    selected={tab === Tab.Records}\n                    onClick={() => setTab(Tab.Records)}\n                  >\n                    Records\n                  </Tabs.Tab>\n                )}\n                <Tabs.Tab\n                  icon=\"box\"\n                  selected={tab === Tab.Pods}\n                  onClick={() => setTab(Tab.Pods)}\n                >\n                  Pods\n                </Tabs.Tab>\n                <Tabs.Tab\n                  icon=\"wrench\"\n                  selected={tab === Tab.Functions}\n                  onClick={() => setTab(Tab.Functions)}\n                >\n                  Functions\n                </Tabs.Tab>\n              </Tabs>\n            </Section>\n          </Stack.Item>\n          {!!clonesForCash && (\n            <Stack.Item>\n              <Section>\n                Current machine credit: {balance}\n              </Section>\n            </Stack.Item>\n          )}\n          <Stack.Item>\n            <StatusSection />\n          </Stack.Item>\n          <Stack.Item grow={1}>\n            {(tab === Tab.Records && !!cloningWithRecords) && <Records />}\n            {tab === Tab.Pods && <Pods />}\n            {tab === Tab.Functions && <Functions />}\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst Functions = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    allowMindErasure,\n    disk,\n    diskReadOnly,\n    geneticAnalysis,\n    mindWipe,\n    cloningWithRecords,\n  } = data;\n\n  return (\n    <>\n      <Section title=\"Advanced Genetic Analysis\">\n        <Box>\n          <Box bold>Notice:</Box>\n          <Box>\n            Enabling this feature will prompt the attached clone pod to\n            transfer active genetic mutations from the genetic record to the\n            subject during cloning.\n          </Box>\n          <Box>The cloning process will be slightly slower as a result.</Box>\n        </Box>\n        <Box pt={2}>\n          <Button\n            textAlign=\"center\"\n            width={6.7}\n            icon={geneticAnalysis ? 'toggle-on' : 'toggle-off'}\n            color={geneticAnalysis ? 'good' : 'bad'}\n            onClick={() => act('toggleGeneticAnalysis')}\n          >\n            {geneticAnalysis ? 'Enabled' : 'Disabled'}\n          </Button>\n        </Box>\n      </Section>\n      {!!allowMindErasure && (\n        <Section title=\"Criminal Rehabilitation Controls\">\n          <Box>\n            <Box bold>Notice:</Box>\n            <Box>\n              Enabling this feature will enable an experimental criminal\n              rehabilitation routine.\n            </Box>\n            <Box bold>\n              Human use is specifically forbidden by the Space Geneva\n              convention.\n            </Box>\n          </Box>\n          <Box pt={2}>\n            <Button\n              textAlign=\"center\"\n              width={6.7}\n              icon={mindWipe ? 'toggle-on' : 'toggle-off'}\n              color={mindWipe ? 'good' : 'bad'}\n              onClick={() => act('mindWipeToggle')}\n            >\n              {mindWipe ? 'Enabled' : 'Disabled'}\n            </Button>\n          </Box>\n        </Section>\n      )}\n      {(!!disk) && (\n        <Section\n          title=\"Disk Controls\"\n          buttons={\n            <>\n              {cloningWithRecords ? (\n                <Button\n                  icon=\"upload\"\n                  color={\"blue\"}\n                  onClick={() => act(\"load\")}>\n                  Load from disk\n                </Button>\n              ) : (\n                <Button\n                  icon=\"upload\"\n                  color={\"blue\"}\n                  onClick={() => act(\"loadAndClone\")}>\n                  Clone from disk\n                </Button>\n              )}\n              <Button\n                icon=\"eject\"\n                color={\"bad\"}\n                onClick={() => act(\"eject\")}>\n                Eject Disk\n              </Button>\n            </>\n          }\n        >\n          <Box>\n            <Icon\n              color={diskReadOnly ? 'bad' : 'good'}\n              name={'check'}\n            />\n            {' '}\n            {diskReadOnly ? 'Disk is read only.' : 'Disk is writeable.'}\n          </Box>\n        </Section>\n      )}\n    </>\n  );\n};\n\nconst StatusSection = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    scannerLocked,\n    occupantScanned,\n    scannerOccupied,\n    scannerGone,\n    cloningWithRecords,\n  } = data;\n\n  const message = data.message || { text: '', status: '' };\n\n  return (\n    <>\n      <Section\n        title=\"Status Messages\"\n        height={7}\n      >\n        {message.text && (\n          <TypedNoticeBox\n            type={message.status}\n            textColor=\"white\"\n            height={3.17}\n            align=\"center\"\n            style={{\n              'vertical-align': 'middle',\n              'horizontal-align': 'middle',\n            }}\n          >\n            <Box\n              style={{\n                position: 'relative', left: '50%', top: '50%',\n                transform: 'translate(-50%, -50%)',\n              }}\n            >\n              {message.text}\n            </Box>\n          </TypedNoticeBox>\n        )}\n      </Section>\n      <Section\n        title=\"Scanner Controls\"\n        buttons={\n          <Button\n            width={7}\n            icon={scannerLocked ? 'unlock' : 'lock-open'}\n            align=\"center\"\n            color={scannerLocked ? 'bad' : 'good'}\n            onClick={() => act('toggleLock')}\n          >\n            {scannerLocked ? 'Locked' : 'Unlocked'}\n          </Button>\n        }\n      >\n        {(!!cloningWithRecords && (!!scannerGone || !!occupantScanned || !scannerOccupied)) && (\n          <Box>\n            <Icon\n              color={(scannerGone || !scannerOccupied) ? 'bad' : 'good'}\n              name={(scannerGone || !scannerOccupied) ? 'times' : 'check'}\n            />\n            {' '}\n            {!!scannerGone && 'No scanner detected.'}\n            {!scannerGone && (scannerOccupied ? 'Occupant scanned.' : 'Scanner has no occupant.')}\n          </Box>\n        )}\n        {(!scannerGone && !occupantScanned && !!scannerOccupied && !!cloningWithRecords) && (\n          <Button\n            width={scannerGone ? 8 : 7}\n            icon=\"dna\"\n            align=\"center\"\n            color={scannerGone ? 'bad' : 'good'}\n            disabled={occupantScanned || scannerGone}\n            onClick={() => act('scan')}\n          >\n            Scan\n          </Button>\n        )}\n        {(!scannerGone && !!scannerOccupied && !cloningWithRecords) && (\n          <Button\n            icon=\"dna\"\n            align=\"center\"\n            color={'good'}\n            onClick={() => act('scanAndClone')}\n          >\n            Scan & Clone\n          </Button>\n        )}\n      </Section>\n    </>\n  );\n};\n\nconst Records = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    disk,\n    diskReadOnly,\n    allowedToDelete,\n    meatLevels,\n  } = data;\n  const records = data.cloneRecords || [];\n  // N.B. uses `deletionTarget` that is shared with CloningConsole component\n  const [, setDeletionTarget] = useLocalState(context, 'deletionTarget', '');\n\n  return (\n    <Flex direction=\"column\" height=\"100%\">\n      <Flex.Item>\n        <Section\n          mb={0}\n          title=\"Records\"\n          style={{ 'border-bottom': '2px solid rgba(51, 51, 51, 0.4);' }}\n        >\n          <Flex className=\"cloning-console__flex__head\">\n            <Flex.Item className=\"cloning-console__head__row\" mr={2}>\n              <Flex.Item\n                className=\"cloning-console__head__item\"\n                style={{ 'width': '190px' }}\n              >\n                Name\n              </Flex.Item>\n              <Flex.Item\n                className=\"cloning-console__head__item\"\n                style={{ 'width': '160px' }}\n              >\n                <Box>Damage</Box>\n                <Box\n                  style={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '20%',\n                    transform: 'translate(-40%, 22px)',\n                  }}\n                  fontSize=\"9px\"\n                >\n                  OXY / TOX / BURN / BRUTE\n                </Box>\n              </Flex.Item>\n              <Flex.Item\n                className=\"cloning-console__head__item\"\n                style={{ 'width': '155px' }}\n              >\n                Actions\n              </Flex.Item>\n            </Flex.Item>\n          </Flex>\n        </Section>\n      </Flex.Item>\n      <Flex.Item grow={1}>\n        <Section scrollable fill>\n          <Flex>\n            <Flex.Item className=\"cloning-console__flex__table\">\n              <Flex.Item>\n                {records.map(record => (\n                  <Flex.Item key={record.id} className=\"cloning-console__body__row\">\n                    <Flex.Item\n                      inline\n                      className=\"cloning-console__body__item\"\n                      style={{ 'width': '190px' }}\n                    >\n                      {record.name}\n                    </Flex.Item>\n                    <Flex.Item\n                      className=\"cloning-console__body__item\"\n                      style={{ 'width': '160px' }}\n                    >\n                      <ColorBox\n                        mr={1}\n                        color={healthToColor(\n                          record.health.OXY,\n                          record.health.TOX,\n                          record.health.BURN,\n                          record.health.BRUTE,\n                        )}\n                      />\n                      {\n                        (record.implant && record.health.OXY >= 0)\n                          ? (\n                            <Box inline>\n                              <HealthStat inline align=\"center\" type=\"oxy\" width={2}>\n                                {shortenNumber(record.health.OXY)}\n                              </HealthStat>\n                              {\"/\"}\n                              <HealthStat inline align=\"center\" type=\"toxin\" width={2}>\n                                {shortenNumber(record.health.TOX)}\n                              </HealthStat>\n                              {\"/\"}\n                              <HealthStat inline align=\"center\" type=\"burn\" width={2}>\n                                {shortenNumber(record.health.BURN)}\n                              </HealthStat>\n                              {\"/\"}\n                              <HealthStat inline align=\"center\" type=\"brute\" width={2}>\n                                {shortenNumber(record.health.BRUTE)}\n                              </HealthStat>\n                            </Box>\n                          )\n                          : 'No Implant Detected'\n                      }\n                    </Flex.Item>\n                    <Flex.Item\n                      align=\"baseline\"\n                      className=\"cloning-console__body__item\"\n                      style={{ 'width': '155px' }}\n                    >\n                      {!!allowedToDelete && (\n                        <Button\n                          icon=\"trash\"\n                          color=\"bad\"\n                          onClick={() => setDeletionTarget(record.ckey)} />\n                      )}\n                      {!!disk && (\n                        <Button\n                          icon={(!!diskReadOnly || !!record.saved) ? '' : 'save'}\n                          color=\"blue\"\n                          alignText=\"center\"\n                          width=\"22px\"\n                          disabled={record.saved || diskReadOnly}\n                          onClick={() => act('saveToDisk', { ckey: record.ckey })}\n                        >\n                          {(!diskReadOnly && !!record.saved) && (\n                            <Icon color=\"black\" name=\"check\" />\n                          )}\n                          {!!diskReadOnly && (\n                            <Icon.Stack>\n                              <Icon color=\"black\" name=\"pen\" />\n                              <Icon color=\"black\" name=\"slash\" />\n                            </Icon.Stack>\n                          )}\n                        </Button>\n                      )}\n                      <Button\n                        icon=\"dna\"\n                        color={\"good\"}\n                        disabled={!meatLevels.length}\n                        onClick={() => act('clone', { ckey: record.ckey })}>\n                        Clone\n                      </Button>\n                    </Flex.Item>\n                  </Flex.Item>\n                ))}\n              </Flex.Item>\n            </Flex.Item>\n          </Flex>\n        </Section>\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst Pods = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    completion,\n    meatLevels,\n    podNames,\n  } = data;\n\n  if (!meatLevels.length) {\n    return (\n      <Section title=\"Cloning Pod Status\">\n        <Box>\n          <Icon color=\"bad\"\n            name=\"times\" />\n          {\" No Pod Detected\"}\n        </Box>\n      </Section>\n    );\n  }\n\n  return meatLevels.map((meat, i) => (\n    <Section key={\"pod\" + i} title={podNames[i].replace(/cloning pod/, \"Cloning Pod\") + \" Status\"}>\n      <LabeledList>\n        <LabeledList.Item label=\"Completion\">\n          <ProgressBar\n            value={completion[i]}\n            maxValue={100}\n            minValue={0}\n            ranges={{\n              good: [90, Infinity],\n              average: [25, 90],\n              bad: [-Infinity, 25],\n            }} />\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Bio-Matter\">\n          <ProgressBar\n            value={meat}\n            maxValue={100}\n            minValue={0}\n            ranges={{\n              good: [50, 100],\n              average: [25, 50],\n              bad: [0, 25],\n            }} />\n        </LabeledList.Item>\n      </LabeledList>\n    </Section>\n  ));\n};\n","/**\n * @file\n * @copyright 2021\n * @author Zonespace (https://github.com/Zonespace27)\n * @license MIT\n */\n\nimport { toTitleCase } from 'common/string';\nimport { useBackend } from '../../backend';\nimport { Box, Button, Collapsible, LabeledList, Section, Stack, Table } from '../../components';\nimport { Window } from '../../layouts';\nimport { ComUplinkData, ComUplinkStockData } from './type';\n\nimport { pluralize } from '../common/stringUtils';\n\nexport const ComUplink = (props, context) => {\n  const { data } = useBackend<ComUplinkData>(context);\n  return (\n    <Window\n      theme=\"syndicate\"\n      title=\"Syndicate Commander Uplink\"\n      width={500}\n      height={500}>\n      <Window.Content scrollable>\n        <Stack className=\"ComUplink\" />\n        <Stack.Item>\n          <Section fill>\n            <LabeledList>\n              <LabeledList.Item label=\"Points\">\n                <Box key={data.points} inline bold color=\"green\" mr=\"5px\" className={`ComUplink__Points--commander`}>\n                  {data.points}\n                </Box>\n              </LabeledList.Item>\n            </LabeledList>\n          </Section>\n        </Stack.Item>\n        <Stack.Item grow={1}>\n          <Section\n            fill\n            scrollable\n            title=\"Uplink Items\"\n          />\n          <Collapsible className={`ComUplink__Category--Main`} title=\"Equipment\" open color=\"Main\">\n            <Table>\n              {data.stock\n                .filter((stock) => stock.category === \"Main\")\n                .map((stock) => (\n                  <Stock key={stock.name} stock={stock} />\n                ))}\n            </Table>\n          </Collapsible>\n        </Stack.Item>\n      </Window.Content>\n    </Window>\n  );\n};\n\ntype StockProps = {\n  stock: ComUplinkStockData;\n};\n\nconst Stock = ({ stock }: StockProps, context) => {\n  const { data, act } = useBackend<ComUplinkData>(context);\n\n  return (\n    <Table.Row className=\"ComUplink__Row\" opacity={stock.cost > data.points[stock.category] ? 0.5:1}>\n      <Table.Cell className=\"ComUplink__Cell\" py=\"5px\">\n        <Box mb=\"5px\" bold>\n          {stock.name}\n        </Box>\n        <Box>{stock.description}</Box>\n      </Table.Cell>\n      <Table.Cell className=\"ComUplink__Cell\" py=\"5px\" textAlign=\"right\">\n        <Button\n          disabled={stock.cost > data.points}\n          onClick={() => act('redeem', { ref: stock.ref })}>\n          Purchase {stock.cost} {pluralize('point', stock.cost)}\n        </Button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author ZeWaka (https://github.com/ZeWaka)\n * @license ISC\n */\n\nimport { useBackend } from '../backend';\nimport { Button, Collapsible, Box, Section } from '../components';\nimport { Window } from '../layouts';\n\nexport const ContributorRewards = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    rewardTitles,\n    rewardDescs,\n  } = data;\n  return (\n    <Window\n      resizable\n      title=\"Contributor Rewards\"\n      width={350}\n      height={200}>\n      <Window.Content scrollable>\n        {\"Howdy, contributor! These rewards don't revert until you respawn somehow.\"}\n        <Section>\n          <Box>\n            {rewardTitles.map((_item, index) => (\n              <Collapsible\n                key={index}\n                title={rewardTitles[index]}\n                open>\n                {rewardDescs[index]}\n                <Button\n                  ml={1}\n                  icon=\"check-circle\"\n                  content=\"Redeem\"\n                  onClick={() => act(\"redeem\", { reward_idx: index+1 })}\n                />\n              </Collapsible>\n            ))}\n          </Box>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { SFC } from 'inferno';\nimport { classes, pureComponentHooks } from 'common/react';\nimport * as styles from './style';\n\ninterface EmptyPlaceholderProps {\n  className?: string,\n}\n\nexport const EmptyPlaceholder: SFC<EmptyPlaceholderProps> = props => {\n  const {\n    children,\n    className,\n  } = props;\n  const cn = classes([\n    styles.EmptyPlaceholder,\n    className,\n  ]);\n  return (\n    <div className={cn}>{children}</div>\n  );\n};\n\nEmptyPlaceholder.defaultHooks = pureComponentHooks;\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { SFC } from 'inferno';\nimport { Button, Section } from '../../../components';\nimport { Tools } from './Tools';\nimport { ToolData } from '../type';\n\nconst resetOptions = [\n  {\n    id: 'brobocop',\n    name: 'Brobocop',\n  }, {\n    id: 'chemistry',\n    name: 'Chemistry',\n  }, {\n    id: 'civilian',\n    name: 'Civilian',\n  }, {\n    id: 'engineering',\n    name: 'Engineering',\n  }, {\n    id: 'medical',\n    name: 'Medical',\n  }, {\n    id: 'mining',\n    name: 'Mining',\n  },\n];\n\ninterface ModuleProps {\n  onMoveToolDown: (toolRef: string) => void,\n  onMoveToolUp: (toolRef: string) => void,\n  onRemoveTool: (toolRef: string) => void,\n  onResetModule: (moduleId: string) => void,\n  tools: Array<ToolData>,\n}\n\nexport const Module: SFC<ModuleProps> = props => {\n  const {\n    onMoveToolDown,\n    onMoveToolUp,\n    onRemoveTool,\n    onResetModule,\n    tools,\n  } = props;\n\n  return (\n    <>\n      <Section title=\"Preset\">\n        {\n          resetOptions.map(resetOption => {\n            const {\n              id,\n              name,\n            } = resetOption;\n            return (\n              <Button\n                key={id}\n                onClick={() => onResetModule(id)}\n                title={name}\n              >\n                {name}\n              </Button>\n            );\n          })\n        }\n      </Section>\n      <Section title=\"Tools\">\n        <Tools\n          onMoveToolDown={onMoveToolDown}\n          onMoveToolUp={onMoveToolUp}\n          onRemoveTool={onRemoveTool}\n          tools={tools}\n        />\n      </Section>\n    </>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { SFC } from 'inferno';\nimport { Button } from '../../../components';\nimport { EmptyPlaceholder } from '../EmptyPlaceholder';\nimport * as styles from '../style';\nimport { ToolData } from '../type';\n\ninterface ToolProps {\n  onMoveToolDown: () => void,\n  onMoveToolUp: () => void,\n  onRemoveTool: () => void,\n}\n\nconst Tool: SFC<ToolProps> = props => {\n  const {\n    children,\n    onMoveToolDown,\n    onMoveToolUp,\n    onRemoveTool,\n  } = props;\n  return (\n    <div>\n      <Button icon=\"arrow-up\" onClick={onMoveToolUp} title=\"Move Up\" />\n      <Button icon=\"arrow-down\" onClick={onMoveToolDown} title=\"Move Down\" />\n      <Button icon=\"trash\" onClick={onRemoveTool} title=\"Remove\" />\n      <span className={styles.ToolLabel}>{children}</span>\n    </div>\n  );\n};\n\ninterface ToolsProps {\n  onMoveToolDown: (toolRef: string) => void,\n  onMoveToolUp: (toolRef: string) => void,\n  onRemoveTool: (toolRef: string) => void,\n  tools: Array<ToolData>\n}\n\nexport const Tools: SFC<ToolsProps> = props => {\n  const {\n    onMoveToolDown,\n    onMoveToolUp,\n    onRemoveTool,\n    tools = [],\n  } = props;\n  return (\n    <div>\n      {\n        tools.length > 0\n          ? tools.map(tool => {\n            const {\n              name,\n              ref: toolRef,\n            } = tool;\n            return (\n              <Tool\n                onMoveToolDown={() => onMoveToolDown(toolRef)}\n                onMoveToolUp={() => onMoveToolUp(toolRef)}\n                onRemoveTool={() => onRemoveTool(toolRef)}\n                key={toolRef}\n              >\n                {name}\n              </Tool>\n            );\n          })\n          : <EmptyPlaceholder>Module has no tools</EmptyPlaceholder>\n      }\n    </div>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { Button, Flex, Section, Tabs } from '../../../components';\nimport { EmptyPlaceholder } from '../EmptyPlaceholder';\nimport { Module } from './Module';\nimport { ModulesData } from '../type';\n\n// width hard-coded to allow display of widest current module name\n// without resizing when ejected/reset\nconst ModuleListWidth = 18;\n\ninterface ModuleViewProps {\n  modules: ModulesData,\n  onEjectModule: (moduleRef: string) => void,\n  onMoveToolDown: (moduleRef: string, toolRef: string) => void,\n  onMoveToolUp: (moduleRef: string, toolRef: string) => void,\n  onRemoveTool: (moduleRef: string, toolRef: string) => void,\n  onResetModule: (moduleRef: string, moduleId: string) => void,\n  onSelectModule: (moduleRef: string) => void,\n}\n\nexport const ModuleView = (props: ModuleViewProps) => {\n  const {\n    modules: {\n      available = [],\n      selected,\n    } = {},\n    onEjectModule,\n    onMoveToolDown,\n    onMoveToolUp,\n    onRemoveTool,\n    onResetModule,\n    onSelectModule,\n  } = props;\n  const {\n    ref: selectedModuleRef,\n    tools = [],\n  } = selected || {};\n\n  const handleMoveToolDown = (toolRef: string) => onMoveToolDown(selectedModuleRef, toolRef);\n  const handleMoveToolUp = (toolRef: string) => onMoveToolUp(selectedModuleRef, toolRef);\n  const handleRemoveTool = (toolRef: string) => onRemoveTool(selectedModuleRef, toolRef);\n  const handleResetModule = (moduleId: string) => onResetModule(selectedModuleRef, moduleId);\n\n  return (\n    available.length > 0\n      ? (\n        <Flex>\n          <Flex.Item width={ModuleListWidth} mr={1}>\n            <Section title=\"Modules\" fitted>\n              <Tabs vertical>\n                {\n                  available.map(module => {\n                    const {\n                      ref: moduleRef,\n                      name,\n                    } = module;\n                    const ejectButton = (\n                      <Button\n                        icon=\"eject\"\n                        color=\"transparent\"\n                        onClick={() => onEjectModule(moduleRef)}\n                        title={`Eject ${name}`}\n                      />\n                    );\n                    return (\n                      <Tabs.Tab\n                        key={moduleRef}\n                        onClick={() => onSelectModule(moduleRef)}\n                        rightSlot={ejectButton}\n                        selected={moduleRef === selectedModuleRef}\n                      >\n                        {name}\n                      </Tabs.Tab>\n                    );\n                  })\n                }\n              </Tabs>\n            </Section>\n          </Flex.Item>\n          <Flex.Item grow={1} basis={0}>\n            {\n              selectedModuleRef\n                ? (\n                  <Module\n                    onMoveToolDown={handleMoveToolDown}\n                    onMoveToolUp={handleMoveToolUp}\n                    onRemoveTool={handleRemoveTool}\n                    onResetModule={handleResetModule}\n                    tools={tools}\n                  />\n                )\n                : (\n                  <Section>\n                    <EmptyPlaceholder>No module selected</EmptyPlaceholder>\n                  </Section>\n                )\n            }\n          </Flex.Item>\n        </Flex>\n      )\n      : (\n        <Section>\n          <EmptyPlaceholder>No modules inserted</EmptyPlaceholder>\n        </Section>\n      )\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport {\n  Act,\n  Action,\n  ModuleActionPayload,\n  MoveToolActionPayload,\n  ResetModuleActionPayload,\n  ToolActionPayload,\n} from './type';\n\nconst createAction = <T extends object>(action: Action) => (act: Act, payload: T) => act(action, payload);\n\nexport const ejectModule = createAction<ModuleActionPayload>(Action.EjectModule);\nexport const moveTool = createAction<MoveToolActionPayload>(Action.MoveTool);\nexport const removeTool = createAction<ToolActionPayload>(Action.RemoveTool);\nexport const resetModule = createAction<ResetModuleActionPayload>(Action.ResetModule);\nexport const selectModule = createAction<ModuleActionPayload>(Action.SelectModule);\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { useBackend } from '../../backend';\nimport { Window } from '../../layouts';\nimport { ModuleView } from './ModuleView';\nimport { ejectModule, moveTool, removeTool, resetModule, selectModule } from './action';\nimport * as styles from './style';\nimport { CyborgModuleRewriterData, Direction } from './type';\n\nexport const CyborgModuleRewriter = (_props, context) => {\n  const { act, data } = useBackend<CyborgModuleRewriterData>(context);\n  const { modules } = data;\n\n  const handleEjectModule = (moduleRef: string) => ejectModule(act, { moduleRef });\n  const handleMoveToolDown = (moduleRef: string, toolRef: string) => moveTool(act, {\n    dir: Direction.Down,\n    moduleRef,\n    toolRef,\n  });\n  const handleMoveToolUp = (moduleRef: string, toolRef: string) => moveTool(act, {\n    dir: Direction.Up,\n    moduleRef,\n    toolRef,\n  });\n  const handleRemoveTool = (moduleRef: string, toolRef: string) => removeTool(act, {\n    moduleRef,\n    toolRef,\n  });\n  const handleResetModule = (moduleRef: string, moduleId: string) => resetModule(act, {\n    moduleId,\n    moduleRef,\n  });\n  const handleSelectModule = (moduleRef: string) => selectModule(act, { moduleRef });\n\n  return (\n    <Window\n      width={670}\n      height={640}\n    >\n      <Window.Content className={styles.Block} scrollable>\n        <ModuleView\n          modules={modules}\n          onEjectModule={handleEjectModule}\n          onMoveToolDown={handleMoveToolDown}\n          onMoveToolUp={handleMoveToolUp}\n          onRemoveTool={handleRemoveTool}\n          onResetModule={handleResetModule}\n          onSelectModule={handleSelectModule}\n        />\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { block, element } from 'common/bem';\n\nexport const Block = 'cyborg-module-rewriter-interface';\n\nexport const ModuleView = block(Block, 'module-view');\nexport const ToolLabel = element(ModuleView, 'tool-label');\n\nexport const EmptyPlaceholder = block(Block, 'empty-placeholder');\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nexport interface CyborgModuleRewriterData {\n  modules: ModulesData,\n}\n\ninterface AvailableModule {\n  name: string,\n  ref: string,\n}\n\ninterface SelectedModule {\n  ref: string,\n  tools: Array<ToolData>,\n}\n\nexport interface ModulesData {\n  available: Array<AvailableModule>,\n  selected: SelectedModule,\n}\n\nexport interface ToolData {\n  name: string,\n  ref: string,\n}\n\nexport enum Action {\n  EjectModule = 'module-eject',\n  MoveTool = 'tool-move',\n  RemoveTool = 'tool-remove',\n  ResetModule = 'module-reset',\n  SelectModule = 'module-select',\n}\n\nexport enum Direction {\n  Up = 'up',\n  Down = 'down',\n}\n\nexport type Act = (action: string, payload?: object) => void\n\nexport interface ModuleActionPayload {\n  moduleRef: string,\n}\n\nexport interface ToolActionPayload extends ModuleActionPayload {\n  toolRef: string,\n}\n\nexport interface MoveToolActionPayload extends ToolActionPayload {\n  dir: Direction,\n}\n\nexport interface ResetModuleActionPayload extends ModuleActionPayload {\n  moduleId: string,\n}\n","/**\n * @file\n * @copyright 2020\n * @author ZeWaka (https://github.com/ZeWaka)\n * @license ISC\n */\n\nimport { toFixed } from 'common/math';\nimport { truncate } from '../format.js';\nimport { useBackend } from '../backend';\nimport { Button, Divider, NoticeBox, Section, Box, Knob, LabeledControls, Icon, NumberInput } from '../components';\nimport { Window } from '../layouts';\n\nexport const DJPanel = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { loadedSound, adminChannel, preloadedSounds } = data;\n  return (\n    <Window width={430} height={306} title=\"DJ Panel\">\n      <Window.Content>\n        <Section>\n          <Box>\n            <strong>Active Soundfile: </strong>\n            <Button\n              icon={loadedSound ? 'file-audio' : 'upload'}\n              selected={!loadedSound}\n              content={loadedSound ? truncate(loadedSound, 38) : \"Upload\"}\n              tooltip={loadedSound}\n              onClick={() => act('set-file')}\n            />\n          </Box>\n          <Divider />\n          <KnobZone />\n        </Section>\n        <Section>\n          <Box>\n            <Button\n              icon=\"music\"\n              selected={loadedSound}\n              disabled={!loadedSound}\n              content=\"Play Music\"\n              onClick={() => act('play-music')}\n            />\n            <Button\n              icon=\"volume-up\"\n              selected={loadedSound}\n              disabled={!loadedSound}\n              content=\"Play Sound\"\n              onClick={() => act('play-sound')}\n            />\n            <Button\n              icon=\"record-vinyl\"\n              selected={loadedSound}\n              disabled={!loadedSound}\n              content=\"Play Ambience\"\n              onClick={() => act('play-ambience')}\n            />\n            <Box as=\"span\" color=\"grey\" textAlign=\"right\" pl={1}>\n              <Icon name=\"satellite\" /> Channel: <em>{ -adminChannel + 1024 }</em>\n            </Box>\n          </Box>\n        </Section>\n        <Section>\n          <Box>\n            <Button\n              content=\"Play Remote\"\n              onClick={() => act('play-remote')}\n            />\n            <Button\n              disabled={!loadedSound}\n              content=\"Play To Player\"\n              onClick={() => act('play-player')}\n            />\n          </Box>\n          <Box>\n            <Button\n              disabled={!loadedSound}\n              content=\"Preload Sound\"\n              onClick={() => act('preload-sound')}\n            />\n            <Button\n              disabled={!Object.keys(preloadedSounds).length}\n              content=\"Play Preloaded Sound\"\n              onClick={() => act('play-preloaded')}\n            />\n          </Box>\n          <Box>\n            <Button\n              color=\"yellow\"\n              content=\"Toggle DJ Announcements\"\n              onClick={() => act('toggle-announce')}\n            />\n            <Button\n              color=\"yellow\"\n              content=\"Toggle DJ For Player\"\n              onClick={() => act('toggle-player-dj')}\n            />\n          </Box>\n          <Box>\n            <Button\n              icon=\"stop\"\n              color=\"red\"\n              content=\"Stop Last Sound\"\n              onClick={() => act('stop-sound')}\n            />\n            <Button\n              icon=\"broadcast-tower\"\n              color=\"red\"\n              content=\"Stop The Radio For Everyone\"\n              onClick={() => act('stop-radio')}\n            />\n          </Box>\n        </Section>\n        <AnnounceActive />\n      </Window.Content>\n    </Window>\n  );\n};\n\n\nconst AnnounceActive = (props, context) => {\n  const { data } = useBackend(context);\n  const { announceMode } = data;\n\n  if (announceMode) {\n    return (\n      <NoticeBox info>\n        Announce Mode Enabled\n      </NoticeBox>\n    );\n  }\n};\n\nconst formatDoublePercent = value => toFixed(value * 2) + '%';\nconst formatHundredPercent = value => toFixed(value * 100) + '%';\n\nconst KnobZone = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { loadedSound, volume, frequency } = data;\n\n  const setVolume = (e, value) => act('set-volume', { volume: value });\n  const resetVolume = (e, value) => act('set-volume', { volume: \"reset\" });\n  const setFreq = (e, value) => act('set-freq', { frequency: value });\n  const resetFreq = (e, value) => act('set-freq', { frequency: \"reset\" });\n\n  return (\n    <Box>\n      <LabeledControls>\n        <LabeledControls.Item label=\"Volume\">\n          <NumberInput\n            animated\n            value={volume}\n            minValue={0}\n            maxValue={100}\n            format={formatDoublePercent}\n            onDrag={setVolume}\n          />\n        </LabeledControls.Item>\n        <LabeledControls.Item>\n          <Knob\n            minValue={0}\n            maxValue={100}\n            ranges={{\n              primary: [20, 80],\n              average: [10, 90],\n              bad: [0, 100],\n            }}\n            value={volume}\n            format={formatDoublePercent}\n            onDrag={setVolume}\n          />\n          <Button\n            icon=\"sync-alt\"\n            top=\"0.3em\"\n            content=\"Reset\"\n            onClick={resetVolume}\n          />\n        </LabeledControls.Item>\n        <LabeledControls.Item label=\"Frequency\">\n          <NumberInput\n            animated\n            value={frequency}\n            step={0.1}\n            minValue={-100}\n            maxValue={100}\n            format={formatHundredPercent}\n            onDrag={setFreq}\n          />\n        </LabeledControls.Item>\n        <LabeledControls.Item>\n          <Knob\n            disabled={!loadedSound}\n            minValue={-100}\n            maxValue={100}\n            step={0.1}\n            stepPixelSize={0.1}\n            ranges={{\n              primary: [-40, 40],\n              average: [-70, 70],\n              bad: [-100, 100],\n            }}\n            value={frequency}\n            format={formatHundredPercent}\n            onDrag={setFreq}\n          />\n          <Button\n            icon=\"sync-alt\"\n            top=\"0.3em\"\n            content=\"Reset\"\n            onClick={resetFreq}\n          />\n        </LabeledControls.Item>\n      </LabeledControls>\n    </Box>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Sovexe (https://github.com/Sovexe)\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { useBackend, useLocalState } from '../../backend';\nimport { Box, Button, Divider, LabeledList, ProgressBar, Stack } from '../../components';\nimport { Window } from '../../layouts';\nimport { ListSearch } from '../common/ListSearch';\nimport { DisposalChuteConfigLookup, DisposalChuteData, DisposalChuteState } from './type';\n\nconst disposalChuteConfigLookup: DisposalChuteConfigLookup = {\n  [DisposalChuteState.Off]: {\n    pumpColor: 'bad',\n    pumpText: 'Inactive',\n  },\n  [DisposalChuteState.Charging]: {\n    pumpColor: 'average',\n    pumpText: 'Pressurizing',\n  },\n  [DisposalChuteState.Charged]: {\n    pumpColor: 'good',\n    pumpText: 'Ready',\n  },\n};\n\nexport const DisposalChute = (_props, context) => {\n  const { act, data } = useBackend<DisposalChuteData>(context);\n  const {\n    name,\n    destinations = null,\n    destinationTag,\n    flush,\n    mode,\n    pressure,\n  } = data;\n\n  const disposalChuteConfig = disposalChuteConfigLookup[mode];\n  const {\n    pumpColor,\n    pumpText,\n  } = disposalChuteConfig;\n\n  return (\n    <Window\n      title={name}\n      width={355}\n      height={destinations ? 350 : 140}\n    >\n      <Window.Content className=\"disposal-chute-interface\" scrollable={!!destinations}>\n        <Stack vertical>\n          <Stack.Item>\n            <LabeledList>\n              <LabeledList.Item label=\"Current Pressure\" />\n            </LabeledList>\n          </Stack.Item>\n          <Stack.Item>\n            <ProgressBar\n              ranges={{\n                good: [1, Infinity],\n                average: [0.75, 1],\n                bad: [-Infinity, 0.75],\n              }}\n              value={pressure}\n            />\n          </Stack.Item>\n        </Stack>\n        <Divider />\n        <LabeledList>\n          <LabeledList.Item\n            label=\"Air Pump\"\n            buttons={\n              <Button\n                icon=\"power-off\"\n                content={mode ? 'Enabled' : 'Disabled'}\n                color={mode ? 'green' : 'red'}\n                onClick={() => act('togglePump')}\n              />\n            }\n          >\n            <Box color={pumpColor}>{pumpText}</Box>\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Chute Handle\"\n            buttons={\n              <Button\n                icon={destinations ? \"envelope\" : \"trash-alt\"}\n                content={flush ? \"Flushing\" : \"Flush\"}\n                color={flush ? '' : 'red'}\n                onClick={() => act('toggleHandle')}\n              />\n            }\n          >\n            <Button\n              content=\"Eject Contents\"\n              icon=\"eject\"\n              onClick={() => act('eject')}\n            />\n          </LabeledList.Item>\n        </LabeledList>\n        {!!destinations && (\n          <>\n            <Divider />\n            <Stack vertical>\n              <Stack.Item>\n                <LabeledList>\n                  <LabeledList.Item\n                    label=\"Destination\"\n                    buttons={\n                      <Button\n                        icon=\"search\"\n                        content=\"Rescan\"\n                        onClick={() => act('rescanDest')} />\n                    } >\n                    {destinationTag}\n                  </LabeledList.Item>\n                </LabeledList>\n              </Stack.Item>\n              <Stack.Item>\n                <DestinationSearch\n                  destinations={destinations}\n                  destinationTag={destinationTag}\n                />\n              </Stack.Item>\n            </Stack>\n          </>\n        )}\n      </Window.Content>\n    </Window>\n  );\n};\n\ninterface DestinationSearchProps {\n  destinations: string[],\n  destinationTag: string,\n}\n\nconst DestinationSearch = (props: DestinationSearchProps, context) => {\n  const {\n    destinations = [],\n    destinationTag = null,\n  } = props;\n  const { act } = useBackend(context);\n\n  const [searchText, setSearchText] = useLocalState(context, 'searchText', '');\n  const handleSelectDestination = (destination: string) => act('select-destination', {\n    destination,\n  });\n\n  const filteredDestinations = (\n    destinations.filter(destination => destination.includes(searchText))\n  );\n\n  return (\n    <ListSearch\n      autoFocus\n      currentSearch={searchText}\n      onSearch={setSearchText}\n      onSelect={handleSelectDestination}\n      options={filteredDestinations}\n      selectedOption={destinationTag}\n    />\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nexport enum DisposalChuteState {\n  Off = 0, // DISPOSAL_CHUTE_OFF\n  Charging = 1, // DISPOSAL_CHUTE_CHARGING\n  Charged = 2, // DISPOSAL_CHUTE_CHARGED\n}\n\nexport interface DisposalChuteConfig {\n  pumpColor: string,\n  pumpText: string,\n}\n\nexport type DisposalChuteConfigLookup = {\n  [key in DisposalChuteState]: DisposalChuteConfig;\n}\n\nexport interface DisposalChuteData {\n  name: string,\n  destinations: string[],\n  destinationTag: string,\n  flush: boolean,\n  mode: DisposalChuteState,\n  pressure: number,\n}\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { Button, Knob, LabeledControls, Section, Stack, TimeDisplay } from '../../components';\nimport { formatTime } from '../../format';\nimport { Window } from '../../layouts';\nimport { DoorTimerData } from './type';\n\nexport const DoorTimer = (_props, context) => {\n  const { act, data } = useBackend<DoorTimerData>(context);\n\n  return (\n    <Window width={260} height={data.flasher ? 279 : 207}>\n      <Window.Content>\n        <Stack vertical fill justify=\"stretch\">\n          <Stack.Item grow={1}>\n            <Section title=\"Timer\" fill>\n              <LabeledControls justify=\"start\">\n                <LabeledControls.Item label=\"Time\">\n                  <Stack align=\"center\">\n                    <Stack.Item>\n                      <Knob\n                        animated\n                        minValue={0}\n                        maxValue={data.maxTime}\n                        value={data.time}\n                        format={(v) => formatTime(v * 10)}\n                        onDrag={(_e: any, time: number) => act('set-time', { time })}\n                        onChange={(_e: any, time: number) => act('set-time', { time, finish: true })}\n                      />\n                    </Stack.Item>\n                    <Stack.Item>\n                      <TimeDisplay value={data.time * 10} timing={data.timing} format={formatTime} />\n                    </Stack.Item>\n                  </Stack>\n                </LabeledControls.Item>\n                <LabeledControls.Item>\n                  <Button onClick={() => act('toggle-timing')}>{data.timing ? 'Stop' : 'Start'}</Button>\n                </LabeledControls.Item>\n              </LabeledControls>\n            </Section>\n          </Stack.Item>\n          {!!data.flusher && (\n            <Stack.Item>\n              <Section title=\"Floor Flusher\" fill>\n                <Button\n                  onClick={() => act('toggle-flusher')}\n                  backgroundColor={data.opening ? 'orange' : undefined}>\n                  {data.opening ? (data.flusheropen ? 'Opening...' : 'Closing...') : (data.flusheropen ? 'Close Flusher' : 'Open Flusher')}\n                </Button>\n              </Section>\n            </Stack.Item>\n          )}\n          {!!data.flasher && (\n            <Stack.Item>\n              <Section title=\"Flasher\" fill>\n                <Button\n                  onClick={() => act('activate-flasher')}\n                  backgroundColor={data.recharging ? 'orange' : undefined}>\n                  Flash Cell {!!data.recharging && '(Recharging)'}\n                </Button>\n              </Section>\n            </Stack.Item>\n          )}\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author ZeWaka (https://github.com/ZeWaka)\n * @license ISC\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Chart, Modal, Section, Stack, Button } from '../components';\nimport { Window } from '../layouts';\nimport { formatSiUnit } from '../format';\n\n/**\n * Helper function to transform the data into something displayable\n * Lovingly made by Mordent and adapted\n * @param {*} rawData - [ { foo: v, bar: v2, ... }, { foo: v3, bar: v4, ... }, ... ]\n * @returns - { foo: [[i, v], [i+1, v2], ...], bar: [[i, v3], [i+1, v4], ...], ... }\n */\nconst processStatsData = rawData => {\n  if ((rawData ?? []).length === 0) {\n    return null;\n  }\n  // intialize our data structure\n  const keys = Object.keys(rawData[0]);\n\n  const resolvedData = keys.reduce((acc, curr) => {\n    acc[curr] = [];\n    return acc;\n  }, {});\n\n  for (let statsDataIndex = 0; statsDataIndex < rawData.length; statsDataIndex++) {\n    const tegValues = rawData[statsDataIndex];\n    for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\n      const key = keys[keyIndex];\n      // x, y coords for graph (y defaults to 0)\n      resolvedData[key].push([statsDataIndex, tegValues[key] ?? 0]); // 0 but \"None\" later\n    }\n  }\n  return resolvedData;\n};\n\n/**\n * Helper function to get the maximum value of our stats information for display\n * @param {*} stats - { [i, value], [i+1, value2], ...}\n * @returns float maximum value\n */\nconst getStatsMax = stats => {\n  let found_maximum = 0; // Chart always starts at 0\n  for (const index in stats) {\n    const stat = stats[index][1]; // get the value\n    if (stat > found_maximum) {\n      found_maximum = stat;\n    }\n  }\n  return found_maximum;\n};\n\n/**\n * Generates stack items of labeled charts for display\n * @param {*} stats - { foo: [[i, v], [i+1, v2], ...], bar: [[i, v3], [i+1, v4], ...] }\n * @returns JSX of stack items\n */\nconst generateChartsFromStats = stats => {\n  return Object.entries(stats).map(([key, chart_data], index) => (\n    // margin fuckery is to remove the extra left margin on the first stack item for alignment reasons\n    <Stack.Item key={key} mt={0.5} ml={index === 0 ? 1 : undefined} >\n      <Box>\n        { key.split(\"|\")[0] }\n        :&nbsp;\n        {\n          chart_data[chart_data.length - 1][1] === 0\n            ? (\"No Data\")\n            : (formatSiUnit(chart_data[chart_data.length - 1][1], 0, key.split(\"|\")[1]))\n        }\n      </Box>\n      <Chart.Line\n        height=\"3.5em\"\n        width=\"20em\"\n        data={chart_data}\n        rangeX={[0, chart_data.length - 1]}\n        rangeY={[0, getStatsMax(chart_data)]}\n        strokeColor=\"\trgba(55,170,25, 1)\"\n        fillColor=\"rgba(55,170,25, 0.25)\" />\n    </Stack.Item>\n  ));\n};\n\n\nexport const EngineStats = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    turnedOn,\n    tegData,\n    chamberData,\n    // meterData,\n  } = data;\n\n  const tegStats = processStatsData(tegData);\n  const chamberStats = processStatsData(chamberData);\n  // const meterStats = processStatsData(meterData);\n\n  return (\n    <Window\n      height=\"560\"\n      width=\"760\"\n      theme=\"retro-dark\"\n      title=\"Engine Statistics\"\n    >\n      <Window.Content>\n        {!turnedOn || !tegStats || !chamberStats // Need stats or window will freak out\n          ? (\n            // Turned off screen\n            <Modal\n              textAlign=\"center\"\n              width={20}\n              height={5}\n              fontSize={2}\n              fontFamily=\"Courier\">\n              POWER ON\n              <Button\n                tooltip=\"Power\"\n                icon=\"power-off\"\n                selected={turnedOn}\n                color=\"caution\"\n                ml={3}\n                onClick={() => act('toggle-power')}\n              />\n            </Modal>\n          )\n          : (\n            <Box>\n              <Section title={\n                <Box>\n                  TEG Data\n                  <Button\n                    tooltip=\"Power\"\n                    icon=\"power-off\"\n                    color=\"caution\"\n                    position=\"absolute\"\n                    right={0.25}\n                    top={0.25}\n                    onClick={() => act('toggle-power')}\n                  />\n                </Box>\n              }>\n                <Stack\n                  wrap=\"wrap\"\n                  justify=\"space-around\"\n                  ml={-1}\n                >\n                  { generateChartsFromStats(tegStats) }\n                </Stack>\n              </Section>\n              <Section title=\"Combustion Chamber Data\">\n                <Stack\n                  wrap=\"wrap\"\n                  justify=\"space-around\"\n                  ml={-1}\n                >\n                  { generateChartsFromStats(chamberStats) }\n                </Stack>\n              </Section>\n            </Box>\n          )}\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n* @file\n* @copyright 2020\n* @author actioninja  (https://github.com/actioninja )\n* @license MIT\n*/\n\nimport { useBackend, useLocalState } from \"../backend\";\nimport { Fragment } from 'inferno';\nimport { Box, Button, Collapsible, ColorBox, Dropdown, Input, LabeledList, NoticeBox, NumberInput, Section } from '../components';\nimport { Window } from '../layouts';\nimport { map } from 'common/collections';\nimport { toFixed } from 'common/math';\nimport { numberOfDecimalDigits } from \"../../common/math\";\n\nconst FilterIntegerEntry = (props, context) => {\n  const { value, name, filterName } = props;\n  const { act } = useBackend(context);\n  return (\n    <NumberInput\n      value={value}\n      minValue={-500}\n      maxValue={500}\n      stepPixelSize={5}\n      width=\"39px\"\n      onDrag={(e, value) => act('modify_filter_value', {\n        name: filterName,\n        new_data: {\n          [name]: value,\n        },\n      })} />\n  );\n};\n\nconst FilterFloatEntry = (props, context) => {\n  const { value, name, filterName } = props;\n  const { act } = useBackend(context);\n  const [step, setStep] = useLocalState(context, `${filterName}-${name}`, 0.01);\n  return (\n    <Fragment>\n      <NumberInput\n        value={value}\n        minValue={-500}\n        maxValue={500}\n        stepPixelSize={4}\n        step={step}\n        format={value => toFixed(value, numberOfDecimalDigits(step))}\n        width=\"80px\"\n        onDrag={(e, value) => act('transition_filter_value', {\n          name: filterName,\n          new_data: {\n            [name]: value,\n          },\n        })} />\n      <Box\n        inline\n        ml={2}\n        mr={1}>\n        Step:\n      </Box>\n      <NumberInput\n        value={step}\n        step={0.001}\n        format={value => toFixed(value, 4)}\n        width=\"70px\"\n        onChange={(e, value) => setStep(value)} />\n    </Fragment>\n  );\n};\n\nconst FilterTextEntry = (props, context) => {\n  const { value, name, filterName } = props;\n  const { act } = useBackend(context);\n\n  return (\n    <Input\n      value={value}\n      width=\"250px\"\n      onInput={(e, value) => act('modify_filter_value', {\n        name: filterName,\n        new_data: {\n          [name]: value,\n        },\n      })} />\n  );\n};\n\nconst FilterColorEntry = (props, context) => {\n  const { value, filterName, name } = props;\n  const { act } = useBackend(context);\n  return (\n    <Fragment>\n      <Button\n        icon=\"pencil-alt\"\n        onClick={() => act('modify_color_value', {\n          name: filterName,\n        })} />\n      <ColorBox\n        color={value}\n        mr={0.5} />\n      <Input\n        value={value}\n        width=\"90px\"\n        onInput={(e, value) => act('transition_filter_value', {\n          name: filterName,\n          new_data: {\n            [name]: value,\n          },\n        })} />\n    </Fragment>\n  );\n};\n\nconst FilterIconEntry = (props, context) => {\n  const { value, filterName } = props;\n  const { act } = useBackend(context);\n  return (\n    <Fragment>\n      <Button\n        icon=\"pencil-alt\"\n        onClick={() => act('modify_icon_value', {\n          name: filterName,\n        })} />\n      <Box inline ml={1}>\n        {value}\n      </Box>\n    </Fragment>\n  );\n};\n\nconst FilterFlagsEntry = (props, context) => {\n  const { name, value, filterName, filterType } = props;\n  const { act, data } = useBackend(context);\n\n  const filterInfo = data.filter_info;\n  const flags = filterInfo[filterType]['flags'];\n  return (\n    map((bitField, flagName) => (\n      <Button.Checkbox\n        checked={value & bitField}\n        content={flagName}\n        onClick={() => act('modify_filter_value', {\n          name: filterName,\n          new_data: {\n            [name]: value ^ bitField,\n          },\n        })} />\n    ))(flags)\n  );\n};\n\nconst FilterSpaceEntry = (props, context) => {\n  const { name, value, filterName, filterType } = props;\n  const { act, data } = useBackend(context);\n\n  const filterInfo = data.filter_info;\n  const flags = filterInfo[filterType]['space'];\n  return (\n    map((spaceField, flagName) => (\n      <Button.Checkbox\n        checked={value === spaceField}\n        content={flagName}\n        onClick={() => act('modify_filter_value', {\n          name: filterName,\n          new_data: {\n            [name]: spaceField,\n          },\n        })} />\n    ))(flags)\n  );\n};\n\nconst FilterDataEntry = (props, context) => {\n  const { name, value, hasValue, filterName } = props;\n\n  const filterEntryTypes = {\n    int: <FilterIntegerEntry {...props} />,\n    float: <FilterFloatEntry {...props} />,\n    string: <FilterTextEntry {...props} />,\n    color: <FilterColorEntry {...props} />,\n    icon: <FilterIconEntry {...props} />,\n    flags: <FilterFlagsEntry {...props} />,\n    space: <FilterSpaceEntry {...props} />,\n  };\n\n  const filterEntryMap = {\n    x: 'float',\n    y: 'float',\n    icon: 'icon',\n    render_source: 'string',\n    flags: 'flags',\n    size: 'float',\n    color: 'color',\n    offset: 'float',\n    radius: 'float',\n    space: 'space',\n    falloff: 'float',\n    density: 'int',\n    threshold: 'float',\n    factor: 'float',\n    repeat: 'int',\n  };\n\n  return (\n    <LabeledList.Item label={name}>\n      {filterEntryTypes[filterEntryMap[name]] || \"Not Found (This is an error)\"}\n      {' '}\n      {!hasValue && <Box inline color=\"average\">(Default)</Box>}\n    </LabeledList.Item>\n  );\n};\n\nconst FilterEntry = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { name, filterDataEntry } = props;\n  const { type, priority, ...restOfProps } = filterDataEntry;\n\n  const filterDefaults = data[\"filter_info\"];\n\n  const targetFilterPossibleKeys = Object.keys(filterDefaults[type]['defaults']);\n\n  return (\n    <Collapsible\n      title={name + \" (\" + type + \")\"}\n      buttons={(\n        <Fragment>\n          <NumberInput\n            value={priority}\n            stepPixelSize={10}\n            width=\"60px\"\n            onChange={(e, value) => act('change_priority', {\n              name: name,\n              new_priority: value,\n            })}\n          />\n          <Button.Input\n            content=\"Rename\"\n            placeholder={name}\n            onCommit={(e, new_name) => act('rename_filter', {\n              name: name,\n              new_name: new_name,\n            })}\n            width=\"90px\" />\n          <Button.Confirm\n            icon=\"minus\"\n            onClick={() => act(\"remove_filter\", { name: name })} />\n        </Fragment>\n      )}>\n      <Section level={2}>\n        <LabeledList>\n          {targetFilterPossibleKeys.map(entryName => {\n            const defaults = filterDefaults[type]['defaults'];\n            const value = restOfProps[entryName] || defaults[entryName];\n            const hasValue = value !== defaults[entryName];\n            return (\n              <FilterDataEntry\n                key={entryName}\n                filterName={name}\n                filterType={type}\n                name={entryName}\n                value={value}\n                hasValue={hasValue} />\n            );\n          })}\n        </LabeledList>\n      </Section>\n    </Collapsible>\n  );\n};\n\nexport const Filteriffic = (props, context) => {\n  const { act, data } = useBackend(context);\n  const name = data.target_name || \"Unknown Object\";\n  const filters = data.target_filter_data || {};\n  const hasFilters = filters !== {};\n  const filterDefaults = data[\"filter_info\"];\n  const [massApplyPath, setMassApplyPath] = useLocalState(context, 'massApplyPath', '');\n  const [hiddenSecret, setHiddenSecret] = useLocalState(context, 'hidden', false);\n  return (\n    <Window\n      width={500}\n      height={500}\n      title=\"Filteriffic\"\n      resizable>\n      <Window.Content scrollable>\n        <NoticeBox danger>\n          DO NOT MESS WITH EXISTING FILTERS IF YOU DO NOT KNOW THE CONSEQUENCES.\n          YOU HAVE BEEN WARNED.\n        </NoticeBox>\n        <Section\n          title={hiddenSecret ? (\n            <Fragment>\n              <Box mr={0.5} inline>\n                MASS EDIT:\n              </Box>\n              <Input\n                value={massApplyPath}\n                width=\"100px\"\n                onInput={(e, value) => setMassApplyPath(value)} />\n              <Button.Confirm\n                content=\"Apply\"\n                confirmContent=\"ARE YOU SURE?\"\n                onClick={() => act('mass_apply', { path: massApplyPath })} />\n            </Fragment>\n          ) : (\n            <Box\n              inline\n              onDblClick={() => setHiddenSecret(true)}>\n              {name}\n            </Box>\n          )}\n          buttons={(\n            <Dropdown\n              icon=\"plus\"\n              displayText=\"Add Filter\"\n              nochevron\n              options={Object.keys(filterDefaults)}\n              onSelected={value => act('add_filter', {\n                name: 'default',\n                priority: 10,\n                type: value,\n              })} />\n          )} >\n          {!hasFilters ? (\n            <Box>\n              No filters\n            </Box>\n          ) : (\n            map((entry, key) => (\n              <FilterEntry filterDataEntry={entry} name={key} key={key} />\n            ))(filters)\n          )}\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author LeahTheTech (https://github.com/TobleroneSwordfish)\n * @license MIT\n */\n\nimport { useBackend, useLocalState } from \"../backend\";\nimport { Tooltip, Button, Stack, Tabs, Icon, Box, Section, Dropdown } from \"../components\";\nimport { Window } from '../layouts';\n\nconst FlockPartitions = (props, context) => {\n  const { act } = useBackend(context);\n  const {\n    partitions,\n  } = props;\n  return (\n    <Stack vertical>\n      {partitions.map(partition => {\n        return (\n          <Stack.Item key={partition.ref}>\n            <Stack align=\"center\" height=\"100%\">\n              {/* name */}\n              <Stack.Item width=\"20%\" height=\"100%\">\n                <Section align=\"center\" height=\"100%\">\n                  {partition.name}\n                </Section>\n              </Stack.Item>\n              {/* show host if they are in one */}\n              <Stack.Item height=\"100%\" grow={1}>\n                <Section height=\"100%\">\n                  {partition.host\n                  && (\n                    <Stack>\n                      <Stack.Item><Icon name=\"wifi\" size={3} /></Stack.Item>\n                      <Stack.Item>\n                        <Stack vertical align=\"center\">\n                          <Stack.Item>{partition.host}</Stack.Item>\n                          <Stack.Item >{partition.health}<Icon name=\"heart\" /></Stack.Item>\n                        </Stack>\n                      </Stack.Item>\n                    </Stack>\n                  )}\n                </Section>\n              </Stack.Item>\n              {/* buttons */}\n              <Stack.Item height=\"100%\">\n                <Section height=\"100%\">\n                  <Stack>\n                    {partition.host\n                    && (\n                      <Stack.Item>\n                        <Button onClick={() => act('eject_trace', { 'origin': partition.ref })} >\n                          Eject\n                        </Button>\n                      </Stack.Item>\n                    )}\n                    <Stack.Item>\n                      <Button onClick={() => act('delete_trace', { 'origin': partition.ref })} >\n                        Remove sentience\n                      </Button>\n                    </Stack.Item>\n                    <Stack.Item>\n                      <Button onClick={() => act('jump_to', { 'origin': partition.ref })} >\n                        Jump\n                      </Button>\n                    </Stack.Item>\n                  </Stack>\n                </Section>\n              </Stack.Item>\n            </Stack>\n          </Stack.Item>\n        );\n      })}\n    </Stack>\n  );\n};\n\n// basic sorting function for numbers and strings\nconst compare = function (a, b, sortBy) {\n  if (!isNaN(a[sortBy]) && !isNaN(b[sortBy])) {\n    return b[sortBy] - a[sortBy];\n  }\n  return ('' + a[sortBy]).localeCompare(b[sortBy]);\n};\n\n// maps drone tasks to icons\nconst iconLookup = {\n  \"thinking\": \"brain\",\n  \"shooting\": \"bolt\",\n  \"rummaging\": \"dumpster\",\n  \"wandering\": \"route\",\n  \"building\": \"hammer\",\n  \"nesting\": \"hammer\",\n  \"harvesting\": \"cogs\",\n  \"controlled\": \"wifi\",\n  \"replicating\": \"egg\",\n  \"rallying\": \"map-marker\",\n  \"opening container\": \"box-open\",\n  \"butchering\": \"recycle\",\n  \"repairing\": \"tools\",\n  \"capturing\": \"bars\",\n  \"depositing\": \"border-style\",\n  \"observing\": \"eye\",\n  \"deconstructing\": \"trash\",\n};\nconst taskIcon = function (task) {\n  let iconString = iconLookup[task];\n  if (iconString) {\n    return <Icon size={3} name={iconString} />;\n  }\n  return \"\";\n};\n\nconst capitalizeString = function (string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst FlockDrones = (props, context) => {\n  const { act } = useBackend(context);\n  const {\n    drones,\n    sortBy,\n  } = props;\n  return (\n    <Stack vertical>\n      {drones\n        .sort(\n          (a, b) => (compare(a, b, sortBy))\n        ).map(drone => {\n          return (\n            <Stack.Item key={drone.ref}>\n              <Stack>\n                {/* name, health and resources */}\n                <Stack.Item width=\"20%\">\n                  <Section height=\"100%\">\n                    <Stack vertical align=\"center\">\n                      <Stack.Item >{drone.name}</Stack.Item>\n                      <Stack.Item >{drone.health}<Icon name=\"heart\" /> {drone.resources}<Icon name=\"cog\" /></Stack.Item>\n                    </Stack>\n                  </Section>\n                </Stack.Item>\n                {/* area and task */}\n                <Stack.Item grow={1}>\n                  <Section height=\"100%\">\n                    <Stack align=\"center\">\n                      <Stack.Item width=\"50px\">\n                        <Box align=\"center\">\n                          {taskIcon(drone.task)}\n                        </Box>\n                      </Stack.Item>\n                      <Stack.Item>\n                        <b>{drone.area}</b> <br /> {drone.task && capitalizeString(drone.task)}\n                      </Stack.Item>\n                    </Stack>\n                  </Section>\n                </Stack.Item>\n                {/* buttons */}\n                <Stack.Item>\n                  <Section height=\"100%\">\n                    <Stack>\n                      {drone.task === \"controlled\"\n                          && (\n                            <Stack.Item>\n                              <Button onClick={() => act('eject_trace', { 'origin': drone.controller_ref })} >\n                                Eject Trace\n                              </Button>\n                            </Stack.Item>\n                          )}\n                      <Stack.Item>\n                        <Button onClick={() => act('rally', { 'origin': drone.ref })} >\n                          Rally\n                        </Button>\n                      </Stack.Item>\n                      <Stack.Item>\n                        <Button onClick={() => act('jump_to', { 'origin': drone.ref })} >\n                          Jump\n                        </Button>\n                      </Stack.Item>\n                    </Stack>\n                  </Section>\n                </Stack.Item>\n\n              </Stack>\n            </Stack.Item>\n          );\n        })}\n    </Stack>\n  );\n};\n\n// TODO: actual structure information (power draw/generation etc.)\nconst FlockStructures = (props, context) => {\n  const { act } = useBackend(context);\n  const { structures } = props;\n  return (\n    <Stack vertical>\n      {structures.map(structure => {\n        return (\n          <Stack.Item key={structure.ref}>\n            <Stack>\n              {/* name and health */}\n              <Stack.Item width=\"30%\">\n                <Tooltip position=\"bottom\" content={structure.desc}>\n                  <Section position=\"relative\">\n                    <Stack vertical align=\"center\">\n                      <Stack.Item >{structure.name}</Stack.Item>\n                      <Stack.Item >{structure.health} <Icon name=\"heart\" /></Stack.Item>\n                    </Stack>\n                  </Section>\n                </Tooltip>\n              </Stack.Item>\n              <Stack.Item grow={1}>\n                <Section height=\"100%\">\n                  {structure.compute > 0 && (\"Compute provided: \" + structure.compute)}\n                </Section>\n              </Stack.Item>\n              {/* buttons */}\n              <Stack.Item>\n                <Section height=\"100%\">\n                  <Stack>\n                    {structure.name === \"Construction Tealprint\"\n                          && (\n                            <Stack.Item>\n                              <Button onClick={() => act('cancel_tealprint', { 'origin': structure.ref })} >\n                                Cancel\n                              </Button>\n                            </Stack.Item>\n                          )}\n                    <Stack.Item>\n                      <Button onClick={() => act('jump_to', { 'origin': structure.ref })} >\n                        Jump\n                      </Button>\n                    </Stack.Item>\n                  </Stack>\n                </Section>\n              </Stack.Item>\n\n            </Stack>\n          </Stack.Item>\n        );\n      })}\n    </Stack>\n  );\n};\n\n\nconst FlockEnemies = (props, context) => {\n  const { act } = useBackend(context);\n  const { enemies } = props;\n  return (\n    <Stack vertical>\n      {enemies.map(enemy => {\n        return (\n          <Stack.Item key={enemy.ref}>\n            <Stack>\n              {/* name and remove button */}\n              <Stack.Item width=\"30%\">\n                <Section height=\"100%\">\n                  {enemy.name}\n                </Section>\n              </Stack.Item>\n              {/* area and jump button */}\n              <Stack.Item grow={1}>\n                <Section height=\"100%\">\n                  <Stack>\n                    <Stack.Item grow={1}>\n                      <b>{enemy.area}</b>\n                    </Stack.Item>\n\n                  </Stack>\n                </Section>\n              </Stack.Item>\n              <Stack.Item>\n                <Section height=\"100%\">\n                  <Stack>\n                    <Stack.Item>\n                      <Button icon=\"times\" onClick={() => act('remove_enemy', { 'origin': enemy.ref })} >\n                        Remove\n                      </Button>\n                    </Stack.Item>\n                    <Stack.Item>\n                      <Button onClick={() => act('jump_to', { 'origin': enemy.ref })} >\n                        Jump\n                      </Button>\n                    </Stack.Item>\n                  </Stack>\n                </Section>\n              </Stack.Item>\n\n            </Stack>\n          </Stack.Item>\n        );\n      })}\n    </Stack>\n  );\n};\n\nexport const FlockPanel = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [sortBy, setSortBy] = useLocalState(context, 'sortBy', 'resources');\n  const {\n    vitals,\n    partitions,\n    drones,\n    structures,\n    enemies,\n    category_lengths,\n    category,\n  } = data;\n  return (\n    <Window\n      theme=\"flock\"\n      title={\"Flockmind \" + vitals.name}\n      width={600}\n      height={450}\n    >\n      <Window.Content scrollable>\n        <Tabs>\n          <Tabs.Tab\n            selected={category === 'drones'}\n            onClick={() => {\n              act('change_tab', { 'tab': 'drones' });\n            }}>\n            Drones {`(${category_lengths['drones']})`}\n          </Tabs.Tab>\n          <Tabs.Tab\n            selected={category === 'traces'}\n            onClick={() => {\n              act('change_tab', { 'tab': 'traces' });\n            }}>\n            Partitions {`(${category_lengths['traces']})`}\n          </Tabs.Tab>\n          <Tabs.Tab\n            selected={category === 'structures'}\n            onClick={() => {\n              act('change_tab', { 'tab': 'structures' });\n            }}>\n            Structures {`(${category_lengths['structures']})`}\n          </Tabs.Tab>\n          <Tabs.Tab\n            selected={category === 'enemies'}\n            onClick={() => {\n              act('change_tab', { 'tab': 'enemies' });\n            }}>\n            Enemies {`(${category_lengths['enemies']})`}\n          </Tabs.Tab>\n        </Tabs>\n\n        {category === 'drones'\n        && (\n          <Box>\n            <Dropdown\n              options={[\"name\", \"health\", \"resources\", \"area\"]}\n              selected=\"resources\"\n              onSelected={(value) => setSortBy(value)}\n            />\n            <FlockDrones drones={drones} sortBy={sortBy} />\n          </Box>\n        )}\n        {category === 'traces' && <FlockPartitions partitions={partitions} />}\n        {category === 'structures' && <FlockStructures structures={structures} />}\n        {category === 'enemies' && <FlockEnemies enemies={enemies} />}\n      </Window.Content>\n    </Window>\n  );\n};\n","import { Box, Button, Divider, Flex, LabeledList, Section } from '../../components';\nimport { DetonatorTimer } from './DetonatorTimer';\n\nexport const Detonator = props => {\n  const {\n    detonator,\n    detonatorAttachments,\n    onToggleAnchor,\n    onToggleSafety,\n    onWireInteract,\n    onPrimeDetonator,\n    onTriggerActivate,\n    onSetTimer,\n  } = props;\n\n  return (\n    <Section\n      title=\"Detonator\">\n      <DetonatorWires\n        detonator={detonator}\n        onWireInteract={onWireInteract}\n        onSetTimer={onSetTimer} />\n      <Divider />\n      <DetonatorUtility\n        detonator={detonator}\n        detonatorAttachments={detonatorAttachments}\n        onToggleAnchor={onToggleAnchor}\n        onToggleSafety={onToggleSafety}\n        onPrimeDetonator={onPrimeDetonator}\n        onTriggerActivate={onTriggerActivate} />\n    </Section>\n  );\n};\n\nconst DetonatorWires = props => {\n  const {\n    detonator: {\n      wireNames,\n      wireStatus,\n      time,\n      isPrimed,\n    } = {},\n    onWireInteract,\n    onSetTimer,\n  } = props;\n\n  return (\n    <Flex>\n      <Flex.Item>\n        <LabeledList>\n          { wireNames.map((entry, i) => (\n            <LabeledList.Item\n              key={entry + i}\n              label={entry}>\n              <Box\n                height={1.7}>\n                { (wireStatus && wireStatus[i]) ? (\n                  <>\n                    <Button\n                      icon=\"cut\"\n                      content=\"Cut\"\n                      onClick={() => onWireInteract(\"cut\", i)} />\n                    <Button\n                      icon=\"bolt\"\n                      content=\"Pulse\"\n                      onClick={() => onWireInteract(\"pulse\", i)} />\n                  </>)\n                  : (\n                    <Box\n                      color=\"average\"\n                      minHeight={1.4}>\n                      Cut\n                    </Box>) }\n              </Box>\n            </LabeledList.Item>\n          ))}\n        </LabeledList>\n      </Flex.Item>\n      <Flex.Item\n        mr={2}\n        mt={2} >\n        <Flex\n          direction=\"column\"\n          align=\"center\">\n          <Flex.Item>\n            <DetonatorTimer\n              time={time}\n              isPrimed={isPrimed} />\n          </Flex.Item>\n          <Flex.Item>\n            <Button\n              mt={1}\n              disabled={isPrimed}\n              icon=\"fast-backward\"\n              onClick={() => onSetTimer(time - 300)} />\n            <Button\n              mt={1}\n              disabled={isPrimed}\n              icon=\"backward\"\n              onClick={() => onSetTimer(time - 10)} />\n            <Button\n              mt={1}\n              disabled={isPrimed}\n              icon=\"forward\"\n              onClick={() => onSetTimer(time + 10)} />\n            <Button\n              mt={1}\n              disabled={isPrimed}\n              icon=\"fast-forward\"\n              onClick={() => onSetTimer(time + 300)} />\n          </Flex.Item>\n        </Flex>\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst DetonatorUtility = props => {\n  const {\n    detonator: {\n      isAnchored,\n      trigger,\n      safetyIsOn,\n      isPrimed,\n    } = {},\n    detonatorAttachments,\n    onToggleAnchor,\n    onToggleSafety,\n    onPrimeDetonator,\n    onTriggerActivate,\n  } = props;\n\n  const renderArmingStatus = () => {\n    if (safetyIsOn) {\n      return (\"The safety is on, therefore, you cannot prime the bomb.\");\n    } else if (!isPrimed) {\n      return (\n        <Button\n          color=\"danger\"\n          icon=\"bomb\"\n          content=\"Prime\"\n          onClick={onPrimeDetonator} />);\n    } else {\n      return (\n        <Box\n          bold\n          color=\"red\">\n          PRIMED\n        </Box>);\n    }\n  };\n\n  return (\n    <LabeledList>\n      <LabeledList.Item\n        className=\"gas-canister-detonator-utility__list-item\"\n        label=\"Anchor Status\">\n        { isAnchored\n          ? \"Anchored. There are no controls for undoing this.\"\n          : (\n            <Button\n              icon=\"anchor\"\n              content=\"Anchor\"\n              onClick={onToggleAnchor} />)}\n      </LabeledList.Item>\n      <LabeledList.Item\n        className=\"gas-canister-detonator-utility__list-item\"\n        label=\"Trigger\">\n        {trigger ? (\n          <Button\n            onClick={onTriggerActivate} >\n            {trigger}\n          </Button>)\n          : \"There is no trigger attached.\"}\n\n      </LabeledList.Item>\n      <LabeledList.Item\n        className=\"gas-canister-detonator-utility__list-item\"\n        label=\"Safety\">\n        { safetyIsOn\n          ? (\n            <Button\n              color=\"average\"\n              icon=\"power-off\"\n              content=\"Turn Off\"\n              onClick={onToggleSafety} />)\n          : <Box color=\"average\">Off</Box> }\n      </LabeledList.Item>\n      <LabeledList.Item\n        className=\"gas-canister-detonator-utility__list-item\"\n        label=\"Arming\">\n        { renderArmingStatus() }\n      </LabeledList.Item>\n      <LabeledList.Item\n        label=\"Attachments\"\n        className=\"gas-canister-detonator-utility__list-item\">\n        {detonatorAttachments && detonatorAttachments.length > 0 ? (\n          detonatorAttachments.map((entry, i) => (\n            <Box\n              className=\"gas-canister-detonator-utility__attachment-item\"\n              key={entry + i}>\n              { detonatorAttachments[i] }\n            </Box>\n          )))\n          : \"There are no additional attachments to the detonator.\"}\n      </LabeledList.Item>\n    </LabeledList>\n  );\n};\n","import { Box, TimeDisplay } from '../../components';\nimport { formatTime } from '../../format';\n\nexport const DetonatorTimer = props => {\n  const {\n    time,\n    isPrimed,\n    warningThreshold = 300,\n    dangerThreshold = 100,\n    explosionMessage = \"BO:OM\",\n  } = props;\n\n  let timeColor = \"green\";\n  if (time <= dangerThreshold) {\n    timeColor = \"red\";\n  } else if (time <= warningThreshold) {\n    timeColor = \"orange\";\n  }\n\n  return (\n    <Box\n      p={1}\n      textAlign=\"center\"\n      backgroundColor=\"black\"\n      color={timeColor}\n      maxWidth=\"90px\"\n      width=\"90px\"\n      fontSize=\"20px\">\n      <TimeDisplay\n        value={time}\n        timing={isPrimed}\n        format={value => formatTime(value, explosionMessage)} />\n    </Box>\n  );\n};\n","import { Component } from 'inferno';\nimport { useBackend } from '../../backend';\nimport { Box, Divider, Flex, Section } from '../../components';\nimport { Window } from '../../layouts';\nimport { PortableBasicInfo, PortableHoldingTank } from '../common/PortableAtmos';\nimport { ReleaseValve } from '../common/ReleaseValve';\nimport { PaperSheetView } from '../PaperSheet';\nimport { Detonator } from './Detonator';\n\nexport const GasCanister = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    connected,\n    holding,\n    hasValve,\n    valveIsOpen,\n    pressure,\n    maxPressure,\n    releasePressure,\n    minRelease,\n    maxRelease,\n    detonator,\n    detonatorAttachments,\n    hasPaper,\n  } = data;\n\n  const handleSetPressure = releasePressure => {\n    act(\"set-pressure\", {\n      releasePressure,\n    });\n  };\n\n  const handleToggleValve = () => {\n    act(\"toggle-valve\");\n  };\n\n  const handleEjectTank = () => {\n    act(\"eject-tank\");\n  };\n\n  const handleWireInteract = (toolAction, index) => {\n    act(\"wire-interact\", {\n      index,\n      toolAction,\n    });\n  };\n\n  const handleToggleAnchor = () => {\n    act(\"anchor\");\n  };\n\n  const handleToggleSafety = () => {\n    act(\"safety\");\n  };\n\n  const handlePrimeDetonator = () => {\n    act(\"prime\");\n  };\n\n  const handleTriggerActivate = () => {\n    act(\"trigger\");\n  };\n\n  const handleSetTimer = newTime => {\n    act(\"timer\", {\n      newTime,\n    });\n  };\n\n  const hasDetonator = !!(detonator);\n\n  return (\n    <Window\n      width={(hasDetonator ? (hasPaper ? 880 : 470) : 305)}\n      height={hasDetonator ? 685 : 340}>\n      <Window.Content>\n        <Flex>\n          <Flex.Item width=\"480px\">\n            <PortableBasicInfo\n              connected={connected}\n              pressure={pressure}\n              maxPressure={maxPressure}>\n              <Divider />\n              {\n                hasValve\n                  ? (\n                    <ReleaseValve\n                      valveIsOpen={valveIsOpen}\n                      releasePressure={releasePressure}\n                      minRelease={minRelease}\n                      maxRelease={maxRelease}\n                      onToggleValve={handleToggleValve}\n                      onSetPressure={handleSetPressure} />\n                  )\n                  : (\n                    <Box\n                      color=\"average\">The release valve is missing.\n                    </Box>\n                  )\n              }\n            </PortableBasicInfo>\n            {\n              detonator\n                ? (\n                  <Detonator\n                    detonator={detonator}\n                    detonatorAttachments={detonatorAttachments}\n                    onToggleAnchor={handleToggleAnchor}\n                    onToggleSafety={handleToggleSafety}\n                    onWireInteract={handleWireInteract}\n                    onPrimeDetonator={handlePrimeDetonator}\n                    onTriggerActivate={handleTriggerActivate}\n                    onSetTimer={handleSetTimer} />\n                )\n                : (\n                  <PortableHoldingTank\n                    holding={holding}\n                    onEjectTank={handleEjectTank} />\n                )\n            }\n          </Flex.Item>\n          {!!hasPaper && (\n            <Flex.Item width=\"410px\">\n              <PaperView />\n            </Flex.Item>\n          )}\n        </Flex>\n      </Window.Content>\n    </Window>\n  );\n};\n\nclass PaperView extends Component {\n  constructor(props, context) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  render() {\n    const { data } = useBackend(this.context);\n    const {\n      text,\n      stamps,\n    } = data.paperData;\n    return (\n      <Section\n        scrollable\n        width=\"400px\"\n        height=\"518px\"\n        backgroundColor=\"white\"\n        style={{ 'overflow-wrap': 'break-word' }}>\n        <PaperSheetView\n          value={text ? text : \"\"}\n          stamps={stamps}\n          readOnly />\n      </Section>\n    );\n  }\n}\n","import { useBackend } from '../backend';\nimport { LabeledList, RoundGauge, Section } from '../components';\nimport { Window } from '../layouts';\nimport { formatPressure } from '../format';\nimport { ReleaseValve } from './common/ReleaseValve';\n\nexport const GasTank = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    pressure,\n    maxPressure,\n    valveIsOpen,\n    releasePressure,\n    maxRelease,\n  } = data;\n\n  const handleSetPressure = releasePressure => {\n    act('set-pressure', {\n      releasePressure,\n    });\n  };\n\n  const handleToggleValve = () => {\n    act('toggle-valve');\n  };\n\n  return (\n    <Window\n      width={400}\n      height={220}>\n      <Window.Content>\n        <Section\n          title=\"Status\">\n          <GasTankInfo\n            pressure={pressure}\n            maxPressure={maxPressure} />\n        </Section>\n        <Section>\n          <ReleaseValve\n            valveIsOpen={valveIsOpen}\n            releasePressure={releasePressure}\n            maxRelease={maxRelease}\n            onToggleValve={handleToggleValve}\n            onSetPressure={handleSetPressure} />\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n\n};\n\nexport const GasTankInfo = props => {\n  const {\n    pressure,\n    maxPressure,\n  } = props;\n\n  return (\n    <LabeledList>\n      <LabeledList.Item\n        label=\"Pressure\">\n        <RoundGauge\n          size={1.75}\n          value={pressure}\n          minValue={0}\n          maxValue={maxPressure}\n          alertAfter={maxPressure * 0.70}\n          ranges={{\n            \"good\": [0, maxPressure * 0.70],\n            \"average\": [maxPressure * 0.70, maxPressure * 0.85],\n            \"bad\": [maxPressure * 0.85, maxPressure],\n          }}\n          format={formatPressure}\n        />\n      </LabeledList.Item>\n    </LabeledList>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend, useSharedState } from \"../backend\";\nimport { Box, Button, Divider, Flex, Icon, LabeledList, NoticeBox, ProgressBar, Tabs, TimeDisplay } from \"../components\";\nimport { Window } from \"../layouts\";\nimport { BuyMaterialsModal, CombineGenesModal, MutationsTab, RecordTab, ResearchTab, ScannerTab, StorageTab } from \"./GeneTek/index\";\n\nconst formatSeconds = v => v > 0 ? (v / 10).toFixed(0) + \"s\" : \"Ready\";\n\nexport const GeneTek = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [menu, setMenu] = useSharedState(context, \"menu\", \"research\");\n  const [buyMats, setBuyMats] = useSharedState(context, \"buymats\", null);\n  const [isCombining] = useSharedState(context, \"iscombining\", false);\n  const {\n    materialCur,\n    materialMax,\n    currentResearch,\n    equipmentCooldown,\n    subject,\n    costPerMaterial,\n    budget,\n    record,\n    scannerAlert,\n    scannerError,\n    allowed,\n  } = data;\n\n  const {\n    name,\n    stat,\n    health,\n    stability,\n  } = subject || {};\n\n  const maxBuyMats = Math.min(\n    materialMax - materialCur,\n    Math.floor(budget / costPerMaterial),\n  );\n\n  return (\n    <Window\n      theme={allowed ? \"genetek\" : \"genetek-disabled\"}\n      width={730}\n      height={415}>\n      <Flex height=\"100%\">\n        <Flex.Item\n          width=\"245px\"\n          height=\"100%\"\n          style={{ \"padding\": \"5px 5px 5px 5px\" }}>\n          <Flex\n            direction=\"column\"\n            height=\"100%\">\n            {!allowed && (\n              <>\n                <div style={{ \"color\": \"#ff3333\", \"text-align\": \"center\" }}>\n                  Insufficient access to interact.\n                </div>\n                <Divider />\n              </>\n            )}\n            <Flex>\n              <ProgressBar\n                value={materialCur}\n                maxValue={materialMax}\n                mb={1}>\n                <Box position=\"absolute\" bold>Materials</Box>\n                {materialCur}\n                {\" / \"}\n                {materialMax}\n              </ProgressBar>\n              <Flex.Item grow={0} shrink={0} ml={1}>\n                <Button\n                  circular\n                  compact\n                  icon=\"dollar-sign\"\n                  disabled={maxBuyMats <= 0}\n                  onClick={() => setBuyMats(1)} />\n              </Flex.Item>\n            </Flex>\n            {subject && (\n              <LabeledList>\n                <LabeledList.Item label=\"Occupant\">\n                  {name}\n                </LabeledList.Item>\n                <LabeledList.Item label=\"Health\">\n                  <ProgressBar\n                    ranges={{\n                      bad: [-Infinity, 0.15],\n                      average: [0.15, 0.75],\n                      good: [0.75, Infinity],\n                    }}\n                    value={health}>\n                    {stat < 2 ? health <= 0 ? (\n                      <Box color=\"bad\">\n                        <Icon name=\"exclamation-triangle\" />\n                        {\" Critical\"}\n                      </Box>\n                    ) : (health * 100).toFixed(0) + \"%\" : (\n                      <Box>\n                        <Icon name=\"skull\" />\n                        {\" Deceased\"}\n                      </Box>\n                    )}\n                  </ProgressBar>\n                </LabeledList.Item>\n                <LabeledList.Item label=\"Stability\">\n                  <ProgressBar\n                    ranges={{\n                      bad: [-Infinity, 15],\n                      average: [15, 75],\n                      good: [75, Infinity],\n                    }}\n                    value={stability}\n                    maxValue={100} />\n                </LabeledList.Item>\n              </LabeledList>\n            )}\n            <Divider />\n            <Flex.Item grow={1} style={{ overflow: \"hidden\" }}>\n              {currentResearch.map(r => (\n                <ProgressBar\n                  key={r.ref}\n                  value={r.total - r.current}\n                  maxValue={r.total}\n                  mb={1}>\n                  <Box position=\"absolute\">\n                    {r.name}\n                  </Box>\n                  <TimeDisplay\n                    timing\n                    value={r.current}\n                    format={formatSeconds}\n                  />\n                </ProgressBar>\n              ))}\n            </Flex.Item>\n            {!!scannerAlert && (\n              <NoticeBox info={!scannerError} danger={!!scannerError}>\n                {scannerAlert}\n              </NoticeBox>\n            )}\n            <Divider />\n            <LabeledList>\n              {equipmentCooldown.map(e => (\n                <LabeledList.Item key={e.label} label={e.label}>\n                  {e.cooldown < 0 ? \"Ready\" : (\n                    <TimeDisplay\n                      timing\n                      value={e.cooldown}\n                      format={formatSeconds}\n                    />\n                  )}\n                </LabeledList.Item>\n              ))}\n            </LabeledList>\n          </Flex>\n        </Flex.Item>\n        <Window.Content scrollable>\n          <Flex.Item>\n            <Box ml=\"250px\">\n              <Tabs>\n                <Tabs.Tab\n                  icon=\"flask\"\n                  selected={menu === \"research\"}\n                  onClick={() => setMenu(\"research\")}>\n                  Research\n                </Tabs.Tab>\n                <Tabs.Tab\n                  icon=\"radiation\"\n                  selected={menu === \"mutations\"}\n                  onClick={() => setMenu(\"mutations\")}>\n                  Mutations\n                </Tabs.Tab>\n                <Tabs.Tab\n                  icon=\"server\"\n                  selected={menu === \"storage\" || (!record && menu === \"record\")}\n                  onClick={() => setMenu(\"storage\")}>\n                  Storage\n                </Tabs.Tab>\n                {!!record && (\n                  <Tabs.Tab\n                    icon=\"save\"\n                    selected={menu === \"record\"}\n                    onClick={() => setMenu(\"record\")}\n                    rightSlot={menu === \"record\" && (\n                      <Button\n                        circular\n                        compact\n                        color=\"transparent\"\n                        icon=\"times\"\n                        onClick={() => act(\"clearrecord\")} />\n                    )}>\n                    Record\n                  </Tabs.Tab>\n                )}\n                {subject && (\n                  <Tabs.Tab\n                    icon=\"dna\"\n                    selected={menu === \"scanner\"}\n                    onClick={() => setMenu(\"scanner\")}>\n                    Scanner\n                  </Tabs.Tab>\n                )}\n              </Tabs>\n              {buyMats !== null && <BuyMaterialsModal maxAmount={maxBuyMats} />}\n              {!!isCombining && <CombineGenesModal />}\n              {menu === \"research\" && <ResearchTab maxBuyMats={maxBuyMats} setBuyMats={setBuyMats} />}\n              {menu === \"mutations\" && <MutationsTab />}\n              {menu === \"storage\" && <StorageTab />}\n              {menu === \"record\" && (record ? <RecordTab /> : <StorageTab />)}\n              {menu === \"scanner\" && <ScannerTab />}\n            </Box>\n          </Flex.Item>\n        </Window.Content>\n      </Flex>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend } from \"../../backend\";\nimport { Box, Button, ByondUi, ColorBox, Dropdown, Flex, Knob, LabeledList, Section } from \"../../components\";\n\nexport const AppearanceEditor = (params, context) => {\n  const { act } = useBackend(context);\n  const {\n    preview,\n    hairStyles,\n    skin,\n    eyes,\n    color1,\n    color2,\n    color3,\n    style1,\n    style2,\n    style3,\n    fixColors,\n    hasEyes,\n    hasSkin,\n    hasHair,\n    channels,\n  } = params;\n\n  return (\n    <Section\n      title=\"Appearance Editor\"\n      buttons={\n        <Fragment>\n          <Button\n            onClick={() => act(\"editappearance\", { apply: true })}\n            icon=\"user\"\n            color=\"good\">\n            Apply Changes\n          </Button>\n          <Button\n            onClick={() => act(\"editappearance\", { cancel: true })}\n            icon=\"times\"\n            color=\"bad\" />\n        </Fragment>\n      }>\n      <Flex>\n        <Flex.Item shrink=\"1\">\n          <LabeledList>\n            {!!hasSkin && (\n              <LabeledList.Item label=\"Skin Tone\">\n                <ColorInput\n                  color={skin}\n                  onChange={c => act(\"editappearance\", { skin: c })} />\n              </LabeledList.Item>\n            )}\n            {!!hasEyes && (\n              <LabeledList.Item label=\"Eye Color\">\n                <ColorInput\n                  color={eyes}\n                  onChange={c => act(\"editappearance\", { eyes: c })} />\n              </LabeledList.Item>\n            )}\n            {!!((hasSkin || hasEyes) && channels[0]) && <LabeledList.Divider />}\n            {!!channels[0] && !!hasHair && (\n              <LabeledList.Item label={channels[0]}>\n                <Dropdown\n                  width={20}\n                  selected={style1}\n                  onSelected={s => act(\"editappearance\", { style1: s })}\n                  options={hairStyles} />\n              </LabeledList.Item>\n            )}\n            {!!channels[0] && (\n              <LabeledList.Item label={`${channels[0].replace(/ Detail$/, \"\")} Color`}>\n                <ColorInput\n                  color={color1}\n                  onChange={c => act(\"editappearance\", { color1: c })}\n                  fix={fixColors} />\n              </LabeledList.Item>\n            )}\n            {!!channels[1] && <LabeledList.Divider />}\n            {!!channels[1] && !!hasHair && (\n              <LabeledList.Item label={channels[1]}>\n                <Dropdown\n                  width={20}\n                  selected={style2}\n                  onSelected={s => act(\"editappearance\", { style2: s })}\n                  options={hairStyles} />\n              </LabeledList.Item>\n            )}\n            {!!channels[1] && (\n              <LabeledList.Item label={`${channels[1].replace(/ Detail$/, \"\")} Color`}>\n                <ColorInput\n                  color={color2}\n                  onChange={c => act(\"editappearance\", { color2: c })}\n                  fix={fixColors} />\n              </LabeledList.Item>\n            )}\n            {!!channels[2] && <LabeledList.Divider />}\n            {!!channels[2] && !!hasHair && (\n              <LabeledList.Item label={channels[2]}>\n                <Dropdown\n                  width={20}\n                  selected={style3}\n                  onSelected={s => act(\"editappearance\", { style3: s })}\n                  options={hairStyles} />\n              </LabeledList.Item>\n            )}\n            {!!channels[2] && (\n              <LabeledList.Item label={`${channels[2].replace(/ Detail$/, \"\")} Color`}>\n                <ColorInput\n                  color={color3}\n                  onChange={c => act(\"editappearance\", { color3: c })}\n                  fix={fixColors} />\n              </LabeledList.Item>\n            )}\n          </LabeledList>\n        </Flex.Item>\n        <Flex.Item basis=\"80px\" shrink=\"0\">\n          <ByondUi\n            params={{\n              id: preview,\n              type: \"map\",\n            }}\n            style={{\n              width: \"80px\",\n              height: \"160px\",\n            }} />\n        </Flex.Item>\n      </Flex>\n    </Section>\n  );\n};\n\nconst ColorInput = (params, context) => {\n  const {\n    color,\n    onChange,\n    fix,\n  } = params;\n\n  const r = parseInt(color.substr(1, 2), 16);\n  const g = parseInt(color.substr(3, 2), 16);\n  const b = parseInt(color.substr(5, 2), 16);\n\n  const onComponentChange = (newR, newG, newB) => {\n    if (onChange) {\n      onChange(\"#\"\n        + newR.toString(16).padStart(2, \"0\")\n        + newG.toString(16).padStart(2, \"0\")\n        + newB.toString(16).padStart(2, \"0\"));\n    }\n  };\n\n  return (\n    <Box>\n      <ColorBox color={color} />\n      <Knob\n        inline\n        ml={1}\n        minValue={fix ? 50 : 0}\n        maxValue={fix ? 190 : 255}\n        value={r}\n        color=\"red\"\n        onChange={(_, newR) => onComponentChange(newR, g, b)} />\n      <Knob\n        inline\n        ml={1}\n        minValue={fix ? 50 : 0}\n        maxValue={fix ? 190 : 255}\n        value={g}\n        color=\"green\"\n        onChange={(_, newG) => onComponentChange(r, newG, b)} />\n      <Knob\n        inline\n        ml={1}\n        minValue={fix ? 50 : 0}\n        maxValue={fix ? 190 : 255}\n        value={b}\n        color=\"blue\"\n        onChange={(_, newB) => onComponentChange(r, g, newB)} />\n    </Box>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend, useSharedState } from \"../../backend\";\nimport { Box, Button, Flex, Icon, Input, LabeledList, Modal, NumberInput, Section } from \"../../components\";\nimport { UnlockModal } from \"./modals/UnlockModal\";\nimport { DNASequence } from \"./DNASequence\";\nimport { GeneIcon } from \"./GeneIcon\";\n\nexport const ResearchLevel = {\n  None: 0,\n  InProgress: 1,\n  Done: 2,\n  Activated: 3,\n};\n\nexport const haveDevice = (equipmentCooldown, name) => {\n  for (const { label, cooldown } of equipmentCooldown) {\n    if (label === name) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const onCooldown = (equipmentCooldown, name) => {\n  for (const { label, cooldown } of equipmentCooldown) {\n    if (label === name) {\n      return cooldown > 0;\n    }\n  }\n\n  return true;\n};\n\nexport const BioEffect = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [booth, setBooth] = useSharedState(context, \"booth\", null);\n  const {\n    materialCur,\n    researchCost,\n    equipmentCooldown,\n    saveSlots,\n    savedMutations,\n    subject,\n    boothCost,\n    injectorCost,\n    precisionEmitter,\n    toSplice,\n  } = data;\n  const {\n    gene,\n    showSequence,\n    isSample,\n    isPotential,\n    isActive,\n    isStorage,\n  } = props;\n  const {\n    ref,\n    name,\n    desc,\n    icon,\n    research,\n    canResearch,\n    canInject,\n    canScramble,\n    canReclaim,\n    spliceError,\n    dna,\n  } = gene;\n\n  const dnaGood = dna.every(pair => !pair.style);\n  const dnaGoodExceptLocks = dna.every(pair =>\n    !pair.style || pair.marker === \"locked\");\n\n  return (\n    <Section\n      title={name}\n      buttons={\n        <GeneIcon\n          name={icon}\n          size={1.5} />\n      }>\n      {booth && booth.ref === ref && (\n        <Modal full>\n          <Section\n            width={35}\n            title={name}\n            style={{\n              \"margin\": \"-10px\",\n              \"margin-right\": \"2px\",\n            }}\n            buttons={(\n              <GeneIcon\n                name={icon}\n                size={4}\n                style={{\n                  \"margin-top\": \"-2px\",\n                  \"margin-right\": \"-4px\",\n                }} />\n            )}>\n            <LabeledList>\n              <LabeledList.Item label=\"Price\">\n                <NumberInput\n                  minValue={0}\n                  maxValue={999999}\n                  width={5}\n                  value={booth.price}\n                  onChange={(_, price) => setBooth({\n                    ref: booth.ref,\n                    price: price,\n                    desc: booth.desc,\n                  })} />\n              </LabeledList.Item>\n              <LabeledList.Item label=\"Description\">\n                <Input\n                  width={25}\n                  value={booth.desc}\n                  onChange={(_, desc) => setBooth({\n                    ref: booth.ref,\n                    price: booth.price,\n                    desc: desc,\n                  })} />\n              </LabeledList.Item>\n            </LabeledList>\n            <Box\n              inline\n              width=\"50%\"\n              textAlign=\"center\"\n              mt={2}>\n              <Button\n                icon=\"person-booth\"\n                color=\"good\"\n                disabled={boothCost > materialCur}\n                onClick={() => act(\"booth\", booth)}>\n                Send to Booth\n              </Button>\n            </Box>\n            <Box\n              inline\n              width=\"50%\"\n              textAlign=\"center\">\n              <Button\n                icon=\"times\"\n                color=\"bad\"\n                onClick={() => setBooth(null)}>\n                Cancel\n              </Button>\n            </Box>\n          </Section>\n        </Modal>\n      )}\n      <UnlockModal />\n      <Box textAlign=\"right\">\n        <Box\n          mr={1}\n          style={{ \"float\": \"left\" }}>\n          <Icon\n            color={research >= 3 ? \"good\" : research >= 2 ? \"teal\" : research >= 1 ? \"average\" : \"bad\"}\n            name={research >= 2 ? \"flask\" : research >= 1 ? \"hourglass\" : \"times\"} />\n          {research >= 2 ? \" Researched\" : research >= 1 ? \" In Progress\" : \" Not Researched\"}\n        </Box>\n        {!isActive && !!canResearch && research === 0 && (\n          <Button\n            icon=\"flask\"\n            disabled={researchCost > materialCur}\n            onClick={() => act(\"researchmut\", {\n              ref: ref,\n              sample: !!isSample,\n            })}\n            color=\"teal\">\n            Research\n          </Button>\n        )}\n        {isPotential && (\n          <Button\n            icon=\"check\"\n            disabled={!dnaGood}\n            onClick={() => act(\"activate\", { ref })}\n            color=\"blue\">\n            Activate\n          </Button>\n        )}\n        {research >= 3 && !dnaGood && (\n          <Button\n            icon=\"magic\"\n            disabled={dnaGoodExceptLocks}\n            onClick={() => act(\"autocomplete\", { ref })}>\n            Autocomplete DNA\n          </Button>\n        )}\n        {haveDevice(equipmentCooldown, \"Analyzer\") && !dnaGood && isPotential && (\n          <Button\n            disabled={onCooldown(equipmentCooldown, \"Analyzer\")}\n            icon=\"microscope\"\n            color=\"average\"\n            onClick={() => act(\"analyze\", { ref })}>\n            Check Stability\n          </Button>\n        )}\n        {haveDevice(equipmentCooldown, \"Reclaimer\") && isPotential && !!canReclaim && (\n          <Button\n            disabled={onCooldown(equipmentCooldown, \"Reclaimer\")}\n            icon=\"times\"\n            color=\"bad\"\n            onClick={() => act(\"reclaim\", { ref })}>\n            Reclaim\n          </Button>\n        )}\n        {boothCost >= 0 && research >= 2 && (isActive || isStorage) && (\n          <Button\n            disabled={materialCur < boothCost}\n            icon=\"person-booth\"\n            color=\"good\"\n            onClick={() => setBooth({ ref: ref, price: 200, desc: \"\" })}>\n            Sell at Booth\n          </Button>\n        )}\n        {!!precisionEmitter && research >= 2\n          && isPotential && !!canScramble && (\n          <Button\n            icon=\"radiation\"\n            disabled={onCooldown(equipmentCooldown, \"Emitter\") || subject.stat > 0}\n            color=\"bad\"\n            onClick={() => act(\"precisionemitter\", { ref })}>\n            Scramble Gene\n          </Button>\n        )}\n        {saveSlots > 0 && research >= 2 && isActive && (\n          <Button\n            disabled={saveSlots <= savedMutations.length}\n            icon=\"save\"\n            color=\"average\"\n            onClick={() => act(\"save\", { ref })}>\n            Store\n          </Button>\n        )}\n        {research >= 2 && !!canInject && haveDevice(equipmentCooldown, \"Injectors\") && (\n          <Button\n            disabled={onCooldown(equipmentCooldown, \"Injectors\")}\n            icon=\"syringe\"\n            onClick={() => act(\"activator\", { ref })}>\n            Activator\n          </Button>\n        )}\n        {research >= 2 && !!canInject && injectorCost >= 0\n          && (isActive || isStorage) && (\n          <Button\n            disabled={onCooldown(equipmentCooldown, \"Injectors\") || materialCur < injectorCost}\n            icon=\"syringe\"\n            onClick={() => act(\"injector\", { ref })}\n            color=\"bad\">\n            Injector\n          </Button>\n        )}\n        {(isActive || isStorage) && !!toSplice && (\n          <Button\n            disabled={!!spliceError}\n            icon=\"map-marker-alt\"\n            onClick={() => act(\"splicegene\", { ref })}\n            tooltip={spliceError}\n            tooltipPosition=\"left\">\n            Splice\n          </Button>\n        )}\n        {isStorage && subject && (\n          <Button\n            icon=\"check\"\n            onClick={() => act(\"addstored\", { ref })}\n            color=\"blue\">\n            Add to Occupant\n          </Button>\n        )}\n        {isStorage && (\n          <Button\n            icon=\"trash\"\n            onClick={() => act(\"deletegene\", { ref })}\n            color=\"bad\" />\n        )}\n        <Box inline />\n      </Box>\n      <Description text={desc} />\n      {showSequence && (\n        <DNASequence {...props} />\n      )}\n    </Section>\n  );\n};\n\nexport const Description = (props, context) => {\n  const lines = props.text.split(/<br ?\\/?>/g);\n\n  return lines.map((line, i) => (\n    <p key={i}>\n      {line}\n    </p>\n  ));\n};\n\nexport const GeneList = (props, context) => {\n  const { data, act } = useBackend(context);\n  const {\n    activeGene,\n  } = data;\n  const {\n    genes,\n    noSelection,\n    noGenes,\n    ...rest\n  } = props;\n  const ag = genes.find(g => g.ref === activeGene);\n\n  const researchLevels = {\n    [ResearchLevel.None]: {\n      icon: \"question\",\n      color: \"grey\",\n    },\n    [ResearchLevel.InProgress]: {\n      icon: \"hourglass\",\n      color: \"average\",\n    },\n    [ResearchLevel.Done]: {\n      icon: \"flask\",\n      color: \"teal\",\n    },\n    [ResearchLevel.Activated]: {\n      icon: \"flask\",\n      color: \"good\",\n    },\n  };\n\n  return (\n    <Fragment>\n      <Flex wrap mb={1}>\n        {genes.map(g => (\n          <Flex.Item\n            key={g.ref}\n            grow={1}\n            textAlign=\"center\">\n            <Button\n              icon={researchLevels[g.research].icon}\n              color={g.ref === activeGene ? \"black\" : researchLevels[g.research].color}\n              onClick={() => act(\"setgene\", { ref: g.ref })}\n              tooltip={g.research === ResearchLevel.InProgress ? \"Researching...\" : g.name}\n              tooltipPosition=\"left\"\n              width=\"80%\" />\n          </Flex.Item>\n        ))}\n      </Flex>\n      {!genes.length && (noGenes || \"No genes found.\")}\n      {!!genes.length && !ag && (noSelection || \"Select a gene to view it.\")}\n      {ag && (\n        <BioEffect\n          key={ag.ref}\n          gene={ag}\n          showSequence\n          {...rest} />\n      )}\n    </Fragment>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend } from \"../../backend\";\nimport { Button, Icon } from \"../../components\";\n\nconst letterColor = {\n  \"?\": \"grey\",\n  \"A\": \"red\",\n  \"T\": \"blue\",\n  \"C\": \"yellow\",\n  \"G\": \"green\",\n};\n\nconst typeColor = {\n  \"\": \"good\",\n  \"X\": \"grey\",\n  \"1\": \"good\",\n  \"2\": \"olive\",\n  \"3\": \"average\",\n  \"4\": \"orange\",\n  \"5\": \"bad\",\n};\n\nexport const DNASequence = (props, context) => {\n  const { act } = useBackend(context);\n  const {\n    gene,\n    isPotential,\n  } = props;\n\n  const sequence = gene.dna;\n  let allGood = true;\n\n  const blocks = [];\n  for (let i = 0; i < sequence.length; i++) {\n    if (i % 4 === 0) {\n      blocks.push([]);\n    }\n\n    blocks[blocks.length - 1].push(sequence[i]);\n\n    if (sequence[i].style) {\n      allGood = false;\n    }\n  }\n\n  const advancePair = i => {\n    if (isPotential) {\n      act(\"advancepair\", {\n        ref: gene.ref,\n        pair: i,\n      });\n    }\n  };\n\n  return blocks.map((block, i) => (\n    <table key={i} style={{\n      display: \"inline-table\",\n      \"margin-top\": \"1em\",\n      \"margin-left\": i % 4 === 0 ? \"0\" : \"0.25em\",\n      \"margin-right\": i % 4 === 3 ? \"0\" : \"0.25em\",\n    }}>\n      <tr>\n        {block.map((pair, j) => (\n          <td key={j}>\n            <Nucleotide\n              letter={pair.pair.charAt(0)}\n              type={pair.style}\n              mark={pair.marker}\n              useLetterColor={allGood}\n              onClick={() => advancePair(i * 4 + j + 1)} />\n          </td>\n        ))}\n      </tr>\n      <tr>\n        {block.map((pair, j) => (\n          <td key={j} style={{ \"text-align\": \"center\" }}>\n            {allGood ? \"|\" : pair.marker === \"locked\" ? (\n              <Icon\n                name=\"lock\"\n                color=\"average\"\n                onClick={() => advancePair(i * 4 + j + 1)} />\n            ) : (\n              <Icon name={\n                pair.style === \"\" ? \"check\" // correct\n                  : pair.style === \"5\" ? \"times\" // incorrect\n                    : \"question\" // changed since last analyze\n              } color={typeColor[pair.style]} />\n            )}\n          </td>\n        ))}\n      </tr>\n      <tr>\n        {block.map((pair, j) => (\n          <td key={j}>\n            <Nucleotide\n              letter={pair.pair.charAt(1)}\n              type={pair.style}\n              mark={pair.marker}\n              useLetterColor={allGood}\n              onClick={() => advancePair(i * 4 + j + 1)} />\n          </td>\n        ))}\n      </tr>\n    </table>\n  ));\n};\n\nexport const Nucleotide = props => {\n  const {\n    letter,\n    type,\n    mark,\n    useLetterColor,\n    ...rest\n  } = props;\n\n  const color = useLetterColor ? letterColor[letter] : typeColor[type];\n\n  return (\n    <Button\n      width=\"1.75em\"\n      textAlign=\"center\"\n      color={color}\n      {...rest}>\n      {letter}\n    </Button>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { classes, pureComponentHooks } from 'common/react';\nimport { Box } from '../../components/Box';\n\nexport const GeneIcon = props => {\n  const {\n    name,\n    size,\n    style = {},\n    ...rest\n  } = props;\n  if (size) {\n    style[\"font-size\"] = (size * 100) + \"%\";\n  }\n  return (\n    <Box\n      as=\"i\"\n      className={classes([\n        \"GeneIcon\",\n        \"GeneIcon--\" + name,\n      ])}\n      style={style}\n      {...rest} />\n  );\n};\n\nGeneIcon.defaultHooks = pureComponentHooks;\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nexport { BuyMaterialsModal } from \"./modals/BuyMaterialsModal\";\nexport { CombineGenesModal } from \"./modals/CombineGenesModal\";\nexport { UnlockModal } from \"./modals/UnlockModal\";\n\nexport { MutationsTab } from \"./tabs/MutationsTab\";\nexport { ResearchTab } from \"./tabs/ResearchTab\";\nexport { ScannerTab } from \"./tabs/ScannerTab\";\nexport { RecordTab, StorageTab } from \"./tabs/StorageTab\";\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { Box, Button, Divider, Knob, LabeledList, Modal } from \"../../../components\";\n\nexport const BuyMaterialsModal = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [buyMats, setBuyMats] = useSharedState(context, \"buymats\", null);\n  const maxBuyMats = props.maxAmount;\n  const {\n    budget,\n    costPerMaterial,\n  } = data;\n\n  const resolvedBuyMats = Math.min(buyMats, maxBuyMats);\n\n  return (\n    <Modal full>\n      <Box\n        position=\"relative\"\n        width={18}>\n        <Box\n          position=\"absolute\"\n          right={1}\n          top={0}>\n          <Knob\n            inline\n            value={resolvedBuyMats}\n            onChange={(e, value) => setBuyMats(value)}\n            minValue={1}\n            maxValue={maxBuyMats} />\n        </Box>\n        <LabeledList>\n          <LabeledList.Item label=\"Purchase\">\n            {resolvedBuyMats}\n            {resolvedBuyMats === 1 ? \" Material\" : \" Materials\"}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Budget\">\n            {`${budget} Credits`}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Cost\">\n            {`${resolvedBuyMats * costPerMaterial} Credits`}\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Remainder\">\n            <Box inline color={budget - resolvedBuyMats * costPerMaterial < 0 && \"bad\"}>\n              {budget - resolvedBuyMats * costPerMaterial}\n            </Box>\n            {\" Credits\"}\n          </LabeledList.Item>\n        </LabeledList>\n        <Divider hidden />\n        <Box inline width=\"50%\" textAlign=\"center\">\n          <Button\n            color=\"good\"\n            icon=\"dollar-sign\"\n            disabled={resolvedBuyMats <= 0}\n            onClick={() => {\n              act(\"purchasematerial\", { amount: resolvedBuyMats });\n              setBuyMats(null);\n            }}>\n            Submit\n          </Button>\n        </Box>\n        <Box inline width=\"50%\" textAlign=\"center\">\n          <Button\n            color=\"bad\"\n            icon=\"times\"\n            onClick={() => setBuyMats(null)}>\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { Box, Button, Modal } from \"../../../components\";\n\nexport const CombineGenesModal = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [isCombining, setIsCombining] = useSharedState(context, \"iscombining\", false);\n  const {\n    savedMutations,\n    combining = [],\n  } = data;\n\n  return (\n    <Modal full>\n      <Box width={16} mr={2}>\n        <Box bold mb={2}>\n          Select genes to combine\n        </Box>\n        <Box mb={2}>\n          {savedMutations.map(g => (\n            <Box key={g.ref}>\n              {combining.indexOf(g.ref) >= 0 ? (\n                <Button\n                  icon=\"check\"\n                  color=\"blue\"\n                  onClick={() => act(\"togglecombine\", { ref: g.ref })} />\n              ) : (\n                <Button\n                  icon=\"blank\"\n                  color=\"grey\"\n                  onClick={() => act(\"togglecombine\", { ref: g.ref })} />\n              )}\n              {\" \" + g.name}\n            </Box>\n          ))}\n        </Box>\n        <Box inline width=\"50%\" textAlign=\"center\">\n          <Button\n            icon=\"sitemap\"\n            disabled={!combining.length}\n            onClick={() => {\n              act(\"combinegenes\");\n              setIsCombining(false);\n            }}>\n            Combine\n          </Button>\n        </Box>\n        <Box inline width=\"50%\" textAlign=\"center\">\n          <Button\n            color=\"bad\"\n            icon=\"times\"\n            onClick={() => setIsCombining(false)}>\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { Box, Button, Input, LabeledList, Modal } from \"../../../components\";\n\nexport const UnlockModal = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [unlockCode, setUnlockCode] = useSharedState(context, \"unlockcode\", \"\");\n  const {\n    autoDecryptors,\n    unlock,\n  } = data;\n\n  if (!unlock) {\n    return;\n  }\n\n  return (\n    <Modal full>\n      <Box width={22} mr={2}>\n        <LabeledList>\n          <LabeledList.Item label=\"Detected Length\">\n            {unlock.length} characters\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Possible Characters\">\n            {unlock.chars.join(\" \")}\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Enter Unlock Code\">\n            <Input\n              value={unlockCode}\n              onChange={(_, code) => setUnlockCode(code.toUpperCase())} />\n          </LabeledList.Item>\n          <LabeledList.Divider />\n          <LabeledList.Item label=\"Correct Characters\">\n            {unlock.correctChar} of {unlock.length}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Correct Positions\">\n            {unlock.correctPos} of {unlock.length}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Attempts Remaining\">\n            {unlock.tries} before mutation\n          </LabeledList.Item>\n        </LabeledList>\n        <Box\n          textAlign=\"right\"\n          mt={2}>\n          <Button\n            icon=\"magic\"\n            color=\"average\"\n            tooltip={\"Auto-Decryptors Available: \" + autoDecryptors}\n            disabled={autoDecryptors < 1}\n            onClick={() => {\n              setUnlockCode(\"\");\n              act(\"unlock\", { code: \"UNLOCK\" });\n            }}>\n            Use Auto-Decryptor\n          </Button>\n        </Box>\n        <Box textAlign=\"right\" mt={1}>\n          <Button\n            mr={1}\n            icon=\"check\"\n            color=\"good\"\n            tooltip={unlockCode.length !== unlock.length\n              ? \"Code is the wrong length.\"\n              : unlockCode.split(\"\").some(c => unlock.chars.indexOf(c) === -1)\n                ? \"Invalid character in code.\" : \"\"}\n            disabled={unlockCode.length !== unlock.length\n              || unlockCode.split(\"\").some(c => unlock.chars.indexOf(c) === -1)}\n            onClick={() => {\n              setUnlockCode(\"\");\n              act(\"unlock\", { code: unlockCode });\n            }}>\n            Attempt Decryption\n          </Button>\n          <Button\n            icon=\"times\"\n            color=\"bad\"\n            onClick={() => {\n              setUnlockCode(\"\");\n              act(\"unlock\", { code: null });\n            }}>\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { Button, Section } from \"../../../components\";\nimport { BioEffect } from \"../BioEffect\";\n\nexport const MutationsTab = (props, context) => {\n  const { data } = useBackend(context);\n  const [sortMode, setSortMode] = useSharedState(context, \"mutsortmode\", \"time\");\n  const [showSequence, toggleShowSequence] = useSharedState(context, 'showSequence', false);\n  const bioEffects = (data.bioEffects || []).slice(0);\n\n  if (sortMode === \"time\") {\n    bioEffects.sort((a, b) => a.time - b.time);\n  } else if (sortMode === \"alpha\") {\n    bioEffects.sort((a, b) => {\n      if (a.name > b.name) {\n        return 1;\n      }\n\n      if (a.name < b.name) {\n        return -1;\n      }\n\n      return 0;\n    });\n  }\n\n  return (\n    <Fragment>\n      <Section>\n        <Button\n          icon={sortMode === \"time\" ? \"clock\" : \"sort-alpha-down\"}\n          onClick={() => setSortMode(sortMode === \"time\" ? \"alpha\" : \"time\")}>\n          Sort Mode\n        </Button>\n        <Button.Checkbox\n          inline\n          content=\"Show Sequence\"\n          checked={showSequence}\n          onClick={() => toggleShowSequence(!showSequence)}\n        />\n      </Section>\n      {bioEffects.map(be => (\n        <BioEffect\n          key={be.ref}\n          gene={be}\n          showSequence={showSequence} />\n      ))}\n    </Fragment>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend } from \"../../../backend\";\nimport { AnimatedNumber, Button, LabeledList, Section } from \"../../../components\";\nimport { Description } from \"../BioEffect\";\n\nexport const ResearchTab = (props, context) => {\n  const { data, act } = useBackend(context);\n  const {\n    materialCur,\n    materialMax,\n    budget,\n    mutationsResearched,\n    autoDecryptors,\n    saveSlots,\n    availableResearch,\n    finishedResearch,\n    savedMutations,\n    research,\n  } = data;\n\n  const {\n    maxBuyMats,\n    setBuyMats,\n  } = props;\n\n  return (\n    <Fragment>\n      <Section\n        title=\"Statistics\"\n        buttons={(\n          <Button\n            icon=\"dollar-sign\"\n            disabled={maxBuyMats <= 0}\n            onClick={() => setBuyMats(1)}>\n            Purchase Additional Materials\n          </Button>\n        )}>\n        <LabeledList>\n          <LabeledList.Item label=\"Research Materials\">\n            {materialCur}{\" / \"}{materialMax}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Research Budget\">\n            <AnimatedNumber value={budget} />\n            {\" Credits\"}\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Mutations Researched\">\n            {mutationsResearched}\n          </LabeledList.Item>\n          {saveSlots > 0 && (\n            <LabeledList.Item label=\"Mutations Stored\">\n              {savedMutations.length}{\" / \"}{saveSlots}\n            </LabeledList.Item>\n          )}\n          <LabeledList.Item label=\"Auto-Decryptors\">\n            {autoDecryptors}\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n      <Section title=\"Available Research\">\n        {availableResearch.map((ar, tier) => (\n          <Section\n            key={tier}\n            title={\"Tier \" + (tier + 1)}>\n            {ar.length ? ar.map(r => (\n              <Section\n                key={r.ref}\n                title={research[r.ref].name}\n                buttons={\n                  <Button\n                    icon=\"flask\"\n                    disabled={materialCur < r.cost}\n                    onClick={() => act(\"research\", { ref: r.ref })}\n                    color=\"teal\">\n                    {\"Research (\" + r.cost + \" mat, \" + r.time + \"s)\"}\n                  </Button>\n                }>\n                <Description text={research[r.ref].desc} />\n              </Section>\n            )) : \"No research is currently available at this tier.\"}\n          </Section>\n        ))}\n      </Section>\n      <Section title=\"Finished Research\">\n        {finishedResearch.map((fr, tier) => (\n          <Section\n            key={tier}\n            title={\"Tier \" + (tier + 1)}>\n            {fr.length ? fr.map(r => (\n              <Section\n                key={research[r.ref].name}\n                title={research[r.ref].name}>\n                <Description text={research[r.ref].desc} />\n              </Section>\n            )) : \"No research has been completed at this tier.\"}\n          </Section>\n        ))}\n      </Section>\n    </Fragment>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { Box, Button, ByondUi, Flex, LabeledList, Modal, Section } from \"../../../components\";\nimport { AppearanceEditor } from \"../AppearanceEditor\";\nimport { GeneList, haveDevice, onCooldown } from \"../BioEffect\";\nimport { GeneIcon } from \"../GeneIcon\";\n\nexport const ScannerTab = (props, context) => {\n  const { data, act } = useBackend(context);\n  let [changingMutantRace, setChangingMutantRace] = useSharedState(context, \"changingmutantrace\", false);\n  const [showPreview, togglePreview] = useSharedState(context, 'togglePreview', false);\n  const {\n    haveScanner,\n    subject,\n    modifyAppearance,\n    equipmentCooldown,\n    mutantRaces,\n  } = data;\n\n  const {\n    preview,\n    name,\n    health,\n    human,\n    age,\n    bloodType,\n    mutantRace,\n    canAppearance,\n    premature,\n    potential,\n    active,\n  } = subject || {};\n\n  if (changingMutantRace\n    && (!subject || !human || premature)) {\n    changingMutantRace = false;\n    setChangingMutantRace(false);\n  }\n\n  if (!subject) {\n    return (\n      <Section title=\"Scanner Error\">\n        {haveScanner ? \"Subject has absconded.\" : \"Check connection to scanner.\"}\n      </Section>\n    );\n  }\n\n  return (\n    <Fragment>\n      {!!changingMutantRace && (\n        <Modal full>\n          <Box bold width={20} mb={0.5}>\n            Change to which body type?\n          </Box>\n          {mutantRaces.map(mr => (\n            <Box key={mr.ref}>\n              <Button\n                color=\"blue\"\n                disabled={mutantRace === mr.name}\n                mt={0.5}\n                onClick={() => {\n                  setChangingMutantRace(false);\n                  act(\"mutantrace\", { ref: mr.ref });\n                }}>\n                <GeneIcon\n                  name={mr.icon}\n                  size={1.5}\n                  style={{\n                    \"margin\": \"-4px\",\n                    \"margin-right\": \"4px\",\n                  }} />\n                {mr.name}\n              </Button>\n            </Box>\n          ))}\n          <Box mt={1} textAlign=\"right\">\n            <Button\n              color=\"bad\"\n              icon=\"times\"\n              onClick={() => setChangingMutantRace(false)}>\n              Cancel\n            </Button>\n          </Box>\n        </Modal>\n      )}\n      {modifyAppearance ? (\n        <AppearanceEditor {...modifyAppearance} />\n      ) : (\n        <Fragment>\n          <Section title=\"Occupant\">\n            <Flex>\n              <Flex.Item mr={1}>\n                <LabeledList>\n                  <LabeledList.Item\n                    label=\"Name\"\n                    buttons={haveDevice(equipmentCooldown, \"Emitter\") && (\n                      <Button\n                        icon=\"radiation\"\n                        disabled={onCooldown(equipmentCooldown, \"Emitter\") || health <= 0}\n                        color=\"bad\"\n                        onClick={() => act(\"emitter\")}>\n                        Scramble DNA\n                      </Button>\n                    )}>\n                    {name}\n                  </LabeledList.Item>\n                  <LabeledList.Item\n                    label=\"Body Type\"\n                    buttons={!!human && (\n                      <Fragment>\n                        <Button\n                          icon=\"user\"\n                          color=\"blue\"\n                          disabled={!!premature}\n                          onClick={() => setChangingMutantRace(true)}>\n                          Change\n                        </Button>\n                        <Button\n                          icon=\"wrench\"\n                          color=\"average\"\n                          disabled={!canAppearance}\n                          onClick={() => act(\"editappearance\")} />\n                      </Fragment>\n                    )}>\n                    {mutantRace}\n                  </LabeledList.Item>\n                  <LabeledList.Item\n                    label=\"Physical Age\"\n                    buttons={!!human && (\n                      <Button.Checkbox\n                        inline\n                        color=\"good\"\n                        content=\"DNA Render\"\n                        checked={showPreview}\n                        onClick={() => togglePreview(!showPreview)}\n                      />\n                    )}>\n                    {age} years\n                  </LabeledList.Item>\n                  <LabeledList.Item label=\"Blood Type\">\n                    {bloodType}\n                  </LabeledList.Item>\n                </LabeledList>\n              </Flex.Item>\n              {human && showPreview && (\n                <Flex.Item grow={0} shrink={0}>\n                  <ByondUi\n                    params={{\n                      id: preview,\n                      type: \"map\",\n                    }}\n                    style={{\n                      width: \"64px\",\n                      height: \"128px\",\n                    }}\n                    hideOnScroll />\n                </Flex.Item>\n              )}\n            </Flex>\n          </Section>\n          <Section title=\"Potential Genes\">\n            <GeneList\n              genes={potential}\n              noGenes=\"All detected potential mutations are active.\"\n              isPotential />\n          </Section>\n          <Section title=\"Active Mutations\">\n            <GeneList\n              genes={active}\n              noGenes=\"Subject has no detected mutations.\"\n              isActive />\n          </Section>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { Fragment } from \"inferno\";\nimport { useBackend, useSharedState } from \"../../../backend\";\nimport { BioEffect, GeneList } from \"../BioEffect\";\nimport { Box, Button, LabeledList, Section } from \"../../../components\";\n\nexport const StorageTab = (props, context) => {\n  const { data, act } = useBackend(context);\n  const [menu, setMenu] = useSharedState(context, \"menu\", \"research\");\n  const [isCombining, setIsCombining] = useSharedState(context, \"iscombining\", false);\n  const {\n    saveSlots,\n    samples,\n    savedMutations,\n    savedChromosomes,\n    toSplice,\n  } = data;\n\n  const chromosomes = Object.values(savedChromosomes.reduce((p, c) => {\n    if (!p[c.name]) {\n      p[c.name] = {\n        name: c.name,\n        desc: c.desc,\n        count: 0,\n      };\n    }\n\n    p[c.name].count++;\n    p[c.name].ref = c.ref;\n\n    return p;\n  }, {}));\n  chromosomes.sort((a, b) => a.name > b.name ? 1 : -1);\n\n  return (\n    <Fragment>\n      {saveSlots > 0 && (\n        <Section\n          title=\"Stored Mutations\"\n          buttons={\n            <Button\n              icon=\"sitemap\"\n              onClick={() => setIsCombining(true)}>\n              Combine\n            </Button>\n          }>\n          {savedMutations.length ? savedMutations.map(g => (\n            <BioEffect\n              key={g.ref}\n              gene={g}\n              showSequence\n              isStorage />\n          )) : \"There are no mutations in storage.\"}\n        </Section>\n      )}\n      <Section title=\"Stored Chromosomes\">\n        {chromosomes.length ? (\n          <LabeledList>\n            {chromosomes.map(c => (\n              <LabeledList.Item\n                key={c.ref}\n                label={c.name}\n                buttons={\n                  <Fragment>\n                    <Button\n                      disabled={c.name === toSplice}\n                      icon=\"map-marker-alt\"\n                      onClick={() => act(\"splicechromosome\", { ref: c.ref })}>\n                      Splice\n                    </Button>\n                    <Button\n                      color=\"bad\"\n                      icon=\"trash\"\n                      onClick={() => act(\"deletechromosome\", { ref: c.ref })} />\n                  </Fragment>\n                }>\n                {c.desc}\n                <Box mt={0.5}>\n                  <Box inline color=\"grey\">Stored Copies:</Box> {c.count}\n                </Box>\n              </LabeledList.Item>\n            ))}\n          </LabeledList>\n        ) : \"There are no chromosomes in storage.\"}\n      </Section>\n      <Section title=\"DNA Samples\">\n        <LabeledList>\n          {samples.map(s => (\n            <LabeledList.Item\n              key={s.ref}\n              label={s.name}\n              buttons={\n                <Button\n                  icon=\"save\"\n                  onClick={() => {\n                    act(\"setrecord\", { ref: s.ref });\n                    setMenu(\"record\");\n                  }}>\n                  View Record\n                </Button>\n              }>\n              <tt>{s.uid}</tt>\n            </LabeledList.Item>\n          ))}\n        </LabeledList>\n      </Section>\n    </Fragment>\n  );\n};\n\nexport const RecordTab = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    record,\n  } = data;\n\n  if (!record) {\n    return;\n  }\n\n  const {\n    name,\n    uid,\n    genes,\n  } = record;\n\n  return (\n    <Fragment>\n      <Section title={name}>\n        <LabeledList>\n          <LabeledList.Item label=\"Genetic Signature\">\n            <tt>{uid}</tt>\n          </LabeledList.Item>\n        </LabeledList>\n      </Section>\n      <Section>\n        <GeneList\n          genes={genes}\n          noGenes=\"No genes found in sample.\"\n          isSample />\n      </Section>\n    </Fragment>\n  );\n};\n","/**\n * Copyright (c) 2022 @Azrun\n * SPDX-License-Identifier: MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Button, Flex, NumberInput, LabeledList, Input, Section, Tooltip } from '../components';\nimport { Window } from '../layouts';\n\nexport const GimmickObject = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    eventList,\n    interactiveTypes,\n    activeStage,\n    icon,\n    iconState,\n  } = data;\n\n  return (\n    <Window\n      title=\"Gimmick Object Editor\"\n      width={675}\n      height={600}>\n      <Window.Content scrollable>\n        <Section\n          title={\n            <Box\n              inline>\n              Edit Interactive Steps\n            </Box>\n          }>\n          <Flex direction=\"column\">\n            {Object.keys(eventList).map((event, eventIndex) => (\n              <Flex.Item key={eventIndex}>\n                <Section title={eventIndex}>\n                  <Flex.Item mb={1}>\n                    <Tooltip content=\"Move Step Down\">\n                      <Button\n                        icon=\"angle-down\"\n                        disabled={parseInt(event, 10) >= eventList.length - 1}\n                        onClick={() => act('move-down', { event: eventIndex })} />\n                    </Tooltip>\n\n                    <Tooltip content=\"Move Step Down\">\n\n                      <Button\n                        icon=\"angle-up\"\n                        disabled={parseInt(event, 10) <= 0}\n                        onClick={() => act('move-up', { event: eventIndex })} />\n                    </Tooltip>\n\n                    <Tooltip content=\"Make Active Step\">\n\n                      <Button\n                        icon=\"play\"\n                        // color=\n                        disabled={parseInt(event, 10) === parseInt(activeStage, 10)-1}\n                        onClick={() => act('active_step', { event: eventIndex })} />\n                    </Tooltip>\n\n\n                    <Tooltip content=\"Remove step from Gimmick\">\n\n                      <Button\n                        icon=\"trash\"\n                        color=\"red\"\n                        onClick={() => act('delete_event', { event: eventIndex })}\n                      />\n                    </Tooltip>\n\n                    <LabeledList>\n                      <Tooltip content=\"Set Tool Interactive Flags (Blank will be AttackHand)\">\n                        <LabeledList.Item label=\"Interactive Flags\" >\n                          {Object.keys(interactiveTypes).map((type, interactiveIndex) => (\n                            <Button\n                              key={interactiveIndex}\n                              selected={eventList[event].interaction & interactiveTypes[type]}\n                              onClick={() => act('interaction', { event: eventIndex, value: interactiveTypes[type] })}>\n                              {type}\n                            </Button>\n                          ))}\n                        </LabeledList.Item>\n                      </Tooltip>\n                      <Tooltip content=\"Hint appended to examine text\">\n                        <LabeledList.Item label=\"Description\">\n\n\n                          <Input fluid\n                            value={eventList[event].description}\n                            onInput={(e, description) => act('description', { event: eventIndex, value: description })} />\n                        </LabeledList.Item>\n                      </Tooltip>\n\n                      <Tooltip content=\"Actionbar Duration\">\n                        <LabeledList.Item label=\"Duration\">\n\n                          <NumberInput\n                            animated\n                            width=\"7em\"\n                            value={eventList[event].duration}\n                            minValue={1}\n                            maxValue={90000}\n                            onChange={(e, targetDuration) => act('duration', { event: eventIndex, value: targetDuration })} />\n                          Seconds\n                        </LabeledList.Item>\n                      </Tooltip>\n                      <Tooltip content=\"Visible Text Appended after [src]\">\n                        <LabeledList.Item label=\"Visible Message\">\n\n                          <Input fluid\n                            value={eventList[event].message}\n                            onInput={(e, message) => act('message', { event: eventIndex, value: message })} />\n                        </LabeledList.Item>\n                      </Tooltip>\n                    </LabeledList>\n                    <Tooltip content=\"Notify in-game admins that action was performed\">\n\n                      <Button\n                        icon=\"flag\"\n                        selected={eventList[event].notify}\n                        onClick={() => act('notify', { event: eventIndex, value: !eventList[event].notify })}\n                      >\n                        Notify Admins\n                      </Button>\n                    </Tooltip>\n\n                  </Flex.Item>\n                </Section>\n              </Flex.Item>\n            ))}\n          </Flex>\n          <Box m={1}>\n            <Button\n              onClick={() => act('add_new')}\n            >\n              Add Event\n            </Button>\n          </Box>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend, useLocalState } from '../backend';\nimport { Box, Button, Divider, Flex, Section, Stack } from '../components';\nimport { Window } from '../layouts';\n\nimport { capitalize, pluralize } from './common/stringUtils';\n\nconst GlassRecyclerProductEntry = (props) => {\n  const {\n    product: {\n      name,\n      cost,\n      img,\n    },\n    disabled,\n    onClick,\n  } = props;\n\n  return (\n    <>\n      <Flex direction=\"row\" align=\"center\">\n        <Flex.Item>\n          <img\n            src={`data:image/png;base64,${img}`}\n            style={{\n              'vertical-align': 'middle',\n              'horizontal-align': 'middle',\n            }}\n          />\n        </Flex.Item>\n        <Flex.Item grow={1}>\n          <Box bold>\n            {capitalize(name)}\n          </Box>\n          <Box>\n            {`Cost: ${cost} ${pluralize('Unit', cost)}`}\n          </Box>\n        </Flex.Item>\n        <Flex.Item>\n          <Button onClick={onClick} disabled={disabled}>\n            Create\n          </Button>\n        </Flex.Item>\n      </Flex>\n      <Divider />\n    </>\n  );\n};\n\nexport const GlassRecycler = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    glassAmt,\n    products,\n  } = data;\n\n  const [filterAvailable, setFilterAvailable] = useLocalState(context, 'filter-available', false);\n\n  return (\n    <Window\n      title=\"Glass Recycler\"\n      width={300}\n      height={400}\n    >\n      <Window.Content>\n        <Stack vertical fill>\n          <Stack.Item>\n            <Section>\n              <Flex direction=\"row\" align=\"center\">\n                <Flex.Item grow={1}>\n                  <Box>\n                    {`Glass: ${glassAmt} ${pluralize('Unit', glassAmt)}`}\n                  </Box>\n                </Flex.Item>\n                <Flex.Item>\n                  <Button.Checkbox checked={filterAvailable} onClick={() => setFilterAvailable(!filterAvailable)}>\n                    Filter Available\n                  </Button.Checkbox>\n                </Flex.Item>\n              </Flex>\n            </Section>\n          </Stack.Item>\n          <Stack.Item grow={1}>\n            <Section\n              fill\n              scrollable\n              title=\"Products\"\n            >\n              {products\n                .filter(({ cost }) => !filterAvailable || (glassAmt >= cost))\n                .map(product => {\n                  const {\n                    cost,\n                    type,\n                  } = product;\n                  return (\n                    <GlassRecyclerProductEntry\n                      key={type}\n                      product={product}\n                      disabled={glassAmt < cost}\n                      onClick={() => act('create', { type })}\n                    />\n                  );\n                })}\n            </Section>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend } from '../../backend';\nimport { Button, LabeledList, Section, Stack } from '../../components';\nimport { Window } from '../../layouts';\nimport { HumanInventoryData, HumanInventorySlot } from './types';\n\nconst SLOT_NAMES = {\n  'slot_head': 'Head',\n  'slot_wear_mask': 'Mask',\n  'slot_glasses': 'Eyes',\n  'slot_ears': 'Ears',\n  'slot_l_hand': 'Left Hand',\n  'slot_r_hand': 'Right Hand',\n  'slot_gloves': 'Gloves',\n  'slot_shoes': 'Shoes',\n  'slot_belt': 'Belt',\n  'slot_w_uniform': 'Uniform',\n  'slot_wear_suit': 'Outer Suit',\n  'slot_back': 'Back',\n  'slot_wear_id': 'ID',\n  'slot_l_store': 'Left Pocket',\n  'slot_r_store': 'Right Pocket',\n};\n\nexport const HumanInventory = (_props, context) => {\n  const { data, act } = useBackend<HumanInventoryData>(context);\n\n  return (\n    <Window width={300} height={490} title={data.name}>\n      <Window.Content>\n        <Stack fill vertical>\n          <Stack.Item grow>\n            <Section scrollable fill>\n              <LabeledList>\n                {Object.entries(SLOT_NAMES).map(([slotId, name]) => {\n                  const slot = data.slots.find((s) => s.id === slotId);\n\n                  return <Slot key={slotId} name={name} slot={slot} />;\n                })}\n              </LabeledList>\n            </Section>\n          </Stack.Item>\n          {Boolean(data.handcuffed || data.canSetInternal || data.internal) && (\n            <Stack.Item>\n              <Section>\n                {Boolean(data.handcuffed) && <Button onClick={() => act('remove-handcuffs')}>Remove handcuffs</Button>}\n                {Boolean(data.canSetInternal) && <Button onClick={() => act('access-internals')}>Set internals</Button>}\n                {Boolean(data.internal) && <Button onClick={() => act('access-internals')}>Remove internals</Button>}\n              </Section>\n            </Stack.Item>\n          )}\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\ntype SlotProps = { name: string; slot: HumanInventorySlot };\n\nconst Slot = (props: SlotProps, context) => {\n  const { act } = useBackend<HumanInventoryData>(context);\n  const { slot, name } = props;\n  const { id, item } = slot;\n\n  return (\n    <LabeledList.Item label={name}>\n      <Button color={item ? 'default' : 'transparent'} fluid onClick={() => act('access-slot', { id })}>\n        {item ? item : 'Nothing'}\n      </Button>\n    </LabeledList.Item>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { useBackend } from \"../backend\";\nimport { Button, Section, Slider } from \"../components\";\nimport { Window } from '../layouts';\nimport { ReagentGraph, ReagentList } from './common/ReagentInfo';\nimport { glitch } from './common/stringUtils';\n\nexport const Hypospray = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const { emagged, injectionAmount, reagentData } = data;\n\n  return (\n    <Window\n      width={320}\n      height={300}\n      theme={emagged ? \"syndicate\" : \"nanotrasen\"}>\n      <Window.Content>\n        <Section title={emagged ? glitch(\"Contents\", 3) : \"Contents\"}\n          buttons={\n            <Button\n              icon=\"times\"\n              color=\"red\"\n              disabled={!reagentData.totalVolume}\n              onClick={() => act('dump')}\n            >\n              Dump\n            </Button>\n          }>\n          <ReagentGraph container={reagentData} />\n          <ReagentList container={reagentData} />\n        </Section>\n        <Section title=\"Injection Amount\">\n          <Slider\n            value={injectionAmount}\n            format={value => value + \"u\"}\n            minValue={1}\n            maxValue={reagentData.maxVolume}\n            step={1}\n            stepPixelSize={10}\n            onChange={(e, value) => act('changeAmount', { amount: value })}\n          />\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend } from '../backend';\nimport { Box, Button, NoticeBox } from '../components';\nimport { Window } from '../layouts';\n\nexport const Laundry = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    on,\n  } = data;\n  return (\n    <Window\n      title=\"Washman 550\"\n      width={400}\n      height={100}\n    >\n      <Window.Content>\n        <Box textAlign=\"center\" mb={1}>\n          {on ? <StatusActive /> : <StatusInactive />}\n        </Box>\n        <Box textAlign=\"center\">\n          <ButtonCycle />\n          <ButtonDoor />\n        </Box>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst StatusActive = (props, context) => {\n  return (\n    <NoticeBox warning>\n      Please wait, machine is currently running.\n    </NoticeBox>\n  );\n};\n\nconst StatusInactive = (props, context) => {\n  return (\n    <NoticeBox info>\n      Insert items and press &quot;Turn On&quot; to start.\n    </NoticeBox>\n  );\n};\n\nconst ButtonCycle = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    on,\n  } = data;\n  return (\n    <Button\n      disabled={on}\n      color={on ? \"\" : \"good\"}\n      icon=\"fas fa-power-off\"\n      content=\"Turn On\"\n      onClick={() => act('cycle')}\n    />\n  );\n};\n\nconst ButtonDoor = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    on,\n    door,\n  } = data;\n  return (\n    <Button\n      disabled={on}\n      color={door ? \"orange\" : \"\"}\n      icon={door ? \"fas fa-door-open\" : \"fas fa-door-closed\"}\n      content={door ? \"Open\" : \"Closed\"}\n      onClick={() => act('door')} />\n  );\n};\n","/**\n * @file\n * @copyright 2020 watermelon914 (https://github.com/watermelon914)\n * @license MIT\n */\n\nimport { clamp01 } from 'common/math';\nimport { KEY_UP, KEY_DOWN, KEY_PAGEDOWN, KEY_END, KEY_HOME, KEY_PAGEUP, KEY_ESCAPE, KEY_ENTER, KEY_TAB } from 'common/keycodes';\nimport { useBackend, useLocalState } from '../backend';\nimport { Box, Button, Section, Input, Stack } from '../components';\nimport { Window } from '../layouts';\n\nlet nextScrollTime = 0;\n\nconst nextTick\n= typeof Promise !== 'undefined'\n  ? Promise.resolve().then.bind(Promise.resolve())\n  : function (a) {\n    window.setTimeout(a, 0);\n  };\n\nexport const ListInput = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    title,\n    message,\n    buttons,\n    timeout,\n  } = data;\n\n  // Search\n  const [showSearchBar, setShowSearchBar] = useLocalState(\n    context, 'search_bar', false);\n  const [displayedArray, setDisplayedArray] = useLocalState(\n    context, 'displayed_array', buttons);\n\n  // KeyPress\n  const [searchArray, setSearchArray] = useLocalState(\n    context, 'search_array', []);\n  const [searchIndex, setSearchIndex] = useLocalState(\n    context, 'search_index', 0);\n  const [lastCharCode, setLastCharCode] = useLocalState(\n    context, 'last_char_code', null);\n\n  // Selected Button\n  const [selectedButton, setSelectedButton] = useLocalState(\n    context, 'selected_button', buttons[0]);\n\n  const handleKeyDown = e => {\n    let searchBarInput = showSearchBar ? document.getElementById(\"search_bar\").getElementsByTagName('input')[0] : null;\n    let searchBarFocused = document.activeElement === searchBarInput;\n    if (!searchBarFocused) {\n      e.preventDefault();\n    }\n\n    if (!searchBarFocused && e.keyCode === KEY_END) {\n      if (!displayedArray.length) {\n        return;\n      }\n      const button = displayedArray[buttons.length - 1];\n      setSelectedButton(button);\n      setLastCharCode(null);\n      document.getElementById(button).focus();\n    }\n    else if (!searchBarFocused && e.keyCode === KEY_HOME) {\n      if (!displayedArray.length) {\n        return;\n      }\n      const button = displayedArray[0];\n      setSelectedButton(button);\n      setLastCharCode(null);\n      document.getElementById(button).focus();\n    }\n    else if (e.keyCode === KEY_ESCAPE) {\n      act(\"cancel\");\n    }\n    else if (e.keyCode === KEY_ENTER) {\n      act(\"choose\", { choice: selectedButton });\n    }\n    else if (e.keyCode === KEY_TAB) {\n      let selectedButtonElement = document.getElementById(selectedButton);\n      if (searchBarFocused && selectedButtonElement) {\n        selectedButtonElement.focus();\n      }\n      else if (searchBarInput && !searchBarFocused) {\n        searchBarInput.focus();\n      }\n      e.preventDefault();\n    }\n    else if (e.keyCode === KEY_UP || e.keyCode === KEY_DOWN || e.keyCode === KEY_PAGEDOWN || e.keyCode === KEY_PAGEUP) {\n      if (nextScrollTime > performance.now() || !displayedArray.length) {\n        return;\n      }\n      nextScrollTime = performance.now() + 50;\n\n      let direction;\n      switch (e.keyCode) {\n        case KEY_UP: direction = -1; break;\n        case KEY_DOWN: direction = 1; break;\n        case KEY_PAGEUP: direction = -10; break;\n        case KEY_PAGEDOWN: direction = 10; break;\n      }\n\n      let index = 0;\n      for (index; index < displayedArray.length; index++) {\n        if (displayedArray[index] === selectedButton) break;\n      }\n      index += direction;\n      if (index < 0 && Math.abs(direction) === 1) index = displayedArray.length - 1;\n      else if (index >= displayedArray.length && Math.abs(direction) === 1) index = 0;\n      else if (index < 0) index = 0;\n      else if (index >= displayedArray.length) index = displayedArray.length - 1;\n      const button = displayedArray[index];\n      setSelectedButton(button);\n      setLastCharCode(null);\n      document.getElementById(button).focus();\n    }\n\n    const charCode = String.fromCharCode(e.keyCode).toLowerCase();\n    if (!charCode) return;\n\n    if (charCode === \"f\" && e.ctrlKey) {\n      if (!showSearchBar) {\n        nextTick(() => document.getElementById(\"search_bar\").getElementsByTagName('input')[0].focus());\n      }\n      else {\n        document.getElementById(selectedButton)?.focus();\n      }\n      setShowSearchBar(!showSearchBar);\n      e.preventDefault();\n      return;\n    }\n\n    if (searchBarFocused) {\n      return;\n    }\n\n    if (nextScrollTime > performance.now() || !displayedArray.length) {\n      return;\n    }\n    nextScrollTime = performance.now() + 50;\n\n    let foundValue;\n    if (charCode === lastCharCode && searchArray.length > 0) {\n      const nextIndex = searchIndex + 1;\n\n      if (nextIndex < searchArray.length) {\n        foundValue = searchArray[nextIndex];\n        setSearchIndex(nextIndex);\n      }\n      else {\n        foundValue = searchArray[0];\n        setSearchIndex(0);\n      }\n    }\n    else {\n      const resultArray = displayedArray.filter(value =>\n        value.substring(0, 1).toLowerCase() === charCode\n      );\n\n      if (resultArray.length > 0) {\n        setSearchArray(resultArray);\n        setSearchIndex(0);\n        foundValue = resultArray[0];\n      }\n    }\n\n    if (foundValue) {\n      setLastCharCode(charCode);\n      setSelectedButton(foundValue);\n      document.getElementById(foundValue).focus();\n    }\n  };\n\n  return (\n    <Window\n      title={title}\n      width={325}\n      height={325}>\n      {timeout !== undefined && <Loader value={timeout} />}\n      <Window.Content\n        onkeydown={handleKeyDown}>\n        <Stack fill vertical>\n          <Stack.Item grow>\n            <Section\n              fill\n              scrollable\n              className=\"ListInput__Section\"\n              title={message}\n              tabIndex={0}\n              buttons={(\n                <Button\n                  compact\n                  icon=\"search\"\n                  color=\"transparent\"\n                  selected={showSearchBar}\n                  tooltip=\"Search Bar\"\n                  tooltipPosition=\"left\"\n                  onClick={() => {\n                    if (!showSearchBar) {\n                      nextTick(() => document.getElementById(\"search_bar\").getElementsByTagName('input')[0].focus());\n                    }\n                    else {\n                      document.getElementById(selectedButton)?.focus();\n                    }\n                    setShowSearchBar(!showSearchBar);\n                    setDisplayedArray(buttons);\n                  }}\n                />\n              )}>\n              {displayedArray.map(button => (\n                <Button\n                  key={button}\n                  fluid\n                  color=\"transparent\"\n                  id={button}\n                  selected={selectedButton === button}\n                  onComponentDidMount={node => {\n                    let searchBarInput = showSearchBar ? document.getElementById(\"search_bar\").getElementsByTagName('input')[0] : null;\n                    let searchBarFocused = document.activeElement === searchBarInput;\n                    if (selectedButton === button && !searchBarFocused) {\n                      node.focus();\n                    }\n                  }}\n                  onClick={() => {\n                    if (selectedButton === button) {\n                      act('choose', { choice: button });\n                    }\n                    else {\n                      setSelectedButton(button);\n                    }\n                    setLastCharCode(null);\n                  }}>\n                  {button}\n                </Button>\n              ))}\n            </Section>\n          </Stack.Item>\n          {showSearchBar && (\n            <Stack.Item>\n              <Input\n                fluid\n                id=\"search_bar\"\n                onInput={(e, value) => {\n                  let newDisplayed = buttons.filter(val => (\n                    val.toLowerCase().search(value.toLowerCase()) !== -1\n                  ));\n                  setDisplayedArray(newDisplayed);\n                  if (!newDisplayed.includes(selectedButton) && newDisplayed.length > 0) {\n                    setSelectedButton(newDisplayed[0]);\n                  }\n                }}\n              />\n            </Stack.Item>\n          )}\n          <Stack.Item>\n            <Stack textAlign=\"center\">\n              <Stack.Item grow basis={0}>\n                <Button\n                  fluid\n                  color=\"good\"\n                  lineHeight={2}\n                  content=\"Confirm\"\n                  disabled={selectedButton === null}\n                  onClick={() => act(\"choose\", { choice: selectedButton })}\n                />\n              </Stack.Item>\n              <Stack.Item grow basis={0}>\n                <Button\n                  fluid\n                  color=\"bad\"\n                  lineHeight={2}\n                  content=\"Cancel\"\n                  onClick={() => act(\"cancel\")}\n                />\n              </Stack.Item>\n            </Stack>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\nexport const Loader = props => {\n  const { value } = props;\n  return (\n    <div className=\"ListInput__Loader\">\n      <Box\n        className=\"ListInput__LoaderProgress\"\n        style={{\n          width: clamp01(value) * 100 + '%',\n        }} />\n    </div>\n  );\n};\n","/**\n * Copyright (c) 2021 @Azrun\n * SPDX-License-Identifier: MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Button, LabeledList, Section } from '../components';\nimport { Window } from '../layouts';\n\nexport const LongRangeTeleporter = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    destinations,\n    receive_allowed,\n    send_allowed,\n    syndicate,\n  } = data;\n\n  return (\n    <Window\n      theme={syndicate ? 'syndicate' : 'ntos'}\n      width={390}\n      height={380}>\n      <Window.Content>\n        <Section title=\"Destinations\">\n          <LabeledList>\n            {destinations.length ? destinations.map((d) => (\n              <LabeledList.Item label={d[\"destination\"]} key={d[\"destination\"]}>\n                {send_allowed && (\n                  <Button\n                    icon=\"sign-out-alt\"\n                    onClick={() => act(\"send\", { target: d[\"ref\"], name: d[\"destination\"] })}\n                  >\n                    Send\n                  </Button>\n                )}\n                {receive_allowed && (\n                  <Button\n                    icon=\"sign-in-alt\"\n                    onClick={() => act(\"receive\", { target: d[\"ref\"], name: d[\"destination\"] })}\n                  >\n                    Receive\n                  </Button>\n                )}\n              </LabeledList.Item>\n            )) : (\n              <LabeledList.Item>\n                No destinations are currently available.\n              </LabeledList.Item>\n            )}\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { Window } from '../layouts';\nimport { useBackend } from \"../backend\";\n\nimport { clamp, round } from 'common/math';\n\nimport {\n  Stack,\n  Box,\n  Button,\n  Section,\n  Slider,\n  Tabs,\n  ProgressBar,\n} from '../components';\n\nconst TO_SELF = 0;\nconst TO_TARGET = 1;\n\nconst DropperModeSection = (props) => {\n  const {\n    transferMode,\n    onTransferModeChange,\n  } = props;\n  return (\n    <Section fitted py={0.6} pl={0.6} pr={1.2}>\n      <Tabs vertical>\n        <Tabs.Tab\n          selected={transferMode === TO_SELF}\n          color=\"green\"\n          onClick={() => onTransferModeChange(TO_SELF)}\n        >\n          Draw\n        </Tabs.Tab>\n        <Tabs.Tab\n          selected={transferMode === TO_TARGET}\n          color=\"red\"\n          onClick={() => onTransferModeChange(TO_TARGET)}\n        >\n          Drop\n        </Tabs.Tab>\n      </Tabs>\n    </Section>\n  );\n};\n\nconst DropperAmountSection = (props) => {\n  const {\n    curTransferAmt,\n    minTransferAmt,\n    maxTransferAmt,\n    onTransferAmtChange,\n    curReagentVol,\n    reagentColor,\n  } = props;\n\n  return (\n    <Section>\n      <Stack align=\"center\" pb={1}>\n        <Stack.Item>\n          <Box\n            textAlign=\"right\"\n            width=\"3em\"\n          >\n            {`${curReagentVol}u`}\n          </Box>\n        </Stack.Item>\n        <Stack.Item grow>\n          <ProgressBar\n            value={curReagentVol}\n            minValue={0}\n            maxValue={maxTransferAmt}\n            color={reagentColor}\n          />\n        </Stack.Item>\n        <Stack.Item>\n          <Box\n            textAlign=\"left\"\n            width=\"3em\"\n          >\n            {`${maxTransferAmt}u`}\n          </Box>\n        </Stack.Item>\n      </Stack>\n      <Stack align=\"center\">\n        <Stack.Item>\n          <Button\n            textAlign=\"center\"\n            width=\"3em\"\n            content=\"Min\"\n            onClick={() => onTransferAmtChange(minTransferAmt)}\n          />\n        </Stack.Item>\n        <Stack.Item grow>\n          <Slider\n            minValue={minTransferAmt}\n            maxValue={maxTransferAmt}\n            stepPixelSize={20}\n            step={1}\n            value={curTransferAmt}\n            onChange={(_e, value) => onTransferAmtChange(value)}\n          />\n        </Stack.Item>\n        <Stack.Item>\n          <Button\n            textAlign=\"center\"\n            width=\"3em\"\n            content=\"Max\"\n            onClick={() => onTransferAmtChange(maxTransferAmt)}\n          />\n        </Stack.Item>\n      </Stack>\n    </Section>\n  );\n};\n\nexport const MechanicalDropper = (_props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    curTransferAmt,\n    minTransferAmt,\n    maxTransferAmt,\n    transferMode,\n    curReagentVol,\n    reagentColor,\n  } = data;\n\n  const onTransferModeChange = (mode) => {\n    act(\"mode\", { mode });\n  };\n\n  const onTransferAmtChange = (amt) => {\n    amt = round(clamp(amt, minTransferAmt, maxTransferAmt), 1);\n    act(\"amt\", { amt });\n  };\n\n  return (\n    <Window title=\"Mechanical Dropper\" width={400} height={105}>\n      <Window.Content>\n        <Stack>\n          <Stack.Item align=\"center\">\n            <DropperModeSection\n              transferMode={transferMode}\n              onTransferModeChange={onTransferModeChange}\n            />\n          </Stack.Item>\n          <Stack.Item grow>\n            <DropperAmountSection\n              curTransferAmt={curTransferAmt}\n              minTransferAmt={minTransferAmt}\n              maxTransferAmt={maxTransferAmt}\n              onTransferAmtChange={onTransferAmtChange}\n              curReagentVol={curReagentVol}\n              reagentColor={reagentColor}\n            />\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { useBackend, useLocalState } from \"../backend\";\nimport { Box, Button, Dimmer, Divider, Flex, Icon, Modal, Section, Stack, TimeDisplay } from \"../components\";\nimport { formatTime } from \"../format\";\nimport { Window } from '../layouts';\n\nconst getMagnetCondition = (condition) => {\n  if (condition >= 95) return <Box inline color=\"good\">Optimal</Box>;\n  else if (condition >= 70) return <Box inline color=\"olive\">Mild Structural Damage</Box>;\n  else if (condition >= 40) return <Box inline color=\"yellow\">Heavy Structural Damage</Box>;\n  else if (condition >= 10) return <Box inline color=\"average\">Extreme Structural Damage</Box>;\n  else return <Box inline color=\"bad\">Destruction Imminent</Box>;\n};\n\nexport const MineralMagnet = (_props, context) => {\n  const { act, data } = useBackend(context);\n\n  const { isLinked, magnetActive, magnetAutomaticMode, magnetCooldownOverride, magnetHealth, magnetLastUsed } = data;\n  const { time } = data;\n  const linkedMagnets = data.linkedMagnets || [];\n  const miningEncounters = data.miningEncounters || [];\n\n  const onCooldown = magnetLastUsed > time;\n\n  const [viewEncounters, setViewEncounters] = useLocalState(context, 'viewEncounters', false);\n\n  return (\n    <Window\n      width={300}\n      height={240}>\n      <Window.Content>\n        <Section title=\"Magnet Status\">\n          <Box>\n            Condition: {isLinked ? getMagnetCondition(magnetHealth) : <Box inline color=\"bad\">No Magnet Linked</Box>}\n          </Box>\n          <Box>\n            Status: {magnetActive ? \"Pulling New Mineral Source\" : (\n              onCooldown ? (\n                <>\n                  Cooling Down: <TimeDisplay value={Math.max(magnetLastUsed - time, 0)}\n                    timing\n                    format={value => formatTime(value)} />\n                </>\n              ) : \"Idle\"\n            )}\n          </Box>\n        </Section>\n        <Section title=\"Magnet Controls\"\n          buttons={\n            <Button\n              textAlign=\"center\"\n              icon=\"rss\"\n              onClick={() => act('geoscan')}>\n              Scan\n            </Button>\n          }>\n          {(!!magnetActive || (onCooldown && !magnetCooldownOverride)) && (\n            <Dimmer fontSize={1.75} pb={2}>\n              {magnetActive ? \"Magnet Active\" : \"On Cooldown\"}\n            </Dimmer>\n          )}\n          <Button\n            textAlign=\"center\"\n            color={onCooldown && magnetCooldownOverride && \"average\"}\n            icon=\"magnet\"\n            onClick={() => act('activatemagnet')}\n            fluid>\n            Activate Magnet\n          </Button>\n          <Button\n            textAlign=\"center\"\n            color={onCooldown && magnetCooldownOverride && \"average\"}\n            icon=\"search\"\n            disabled={!miningEncounters.length}\n            onClick={() => setViewEncounters(true)}\n            fluid>\n            Activate telescope location\n          </Button>\n          <Button.Checkbox checked={magnetCooldownOverride}\n            onClick={() => act('overridecooldown')}\n            style={{ 'z-index': '1' }}>\n            Override Cooldown\n          </Button.Checkbox>\n          <Button.Checkbox checked={magnetAutomaticMode}\n            onClick={() => act('automode')}\n            style={{ 'z-index': '1' }}>\n            Automatic Mode\n          </Button.Checkbox>\n        </Section>\n        {viewEncounters && (\n          <Modal full\n            ml={1} // For some reason modals only seem properly centered with this\n            width=\"230px\"\n            height=\"200px\">\n            <Stack vertical fill>\n              <Stack.Item grow>\n                <Section scrollable fill>\n                  {miningEncounters.map(encounter => (\n                    <Button key={encounter.id}\n                      onClick={() => {\n                        act('activateselectable', { encounter_id: encounter.id });\n                        setViewEncounters(false);\n                      }}\n                      fluid>\n                      {encounter.name}\n                    </Button>\n                  ))}\n                </Section>\n              </Stack.Item>\n              <Stack.Item>\n                <Flex>\n                  <Flex.Item grow\n                    pt={0.5}\n                    color=\"label\">\n                    <Icon name=\"search\" /> Choose a location\n                  </Flex.Item>\n                  <Flex.Item>\n                    <Button\n                      color=\"bad\"\n                      icon=\"times\"\n                      onClick={() => setViewEncounters(false)}>\n                      Cancel\n                    </Button>\n                  </Flex.Item>\n                </Flex>\n              </Stack.Item>\n            </Stack>\n          </Modal>\n        )}\n        {!!isLinked || (\n          <Modal full\n            ml={1}\n            width=\"270px\"\n            height=\"200px\">\n            <Section title=\"Choose Linked Magnet\" scrollable fill>\n              <Button\n                textAlign=\"center\"\n                icon=\"rss\"\n                fluid\n                onClick={() => act('magnetscan')}\n              >\n                Scan for Magnets\n              </Button>\n              <Divider />\n              {linkedMagnets.map(magnet => (\n                <Button\n                  icon={magnet.angle === undefined ? \"circle\" : \"arrow-right\"}\n                  iconRotation={magnet.angle ?? 0}\n                  textAlign=\"center\"\n                  fluid\n                  key={magnet.ref}\n                  onClick={() => act('linkmagnet', magnet)}\n                >\n                  {`${magnet.name} at (${magnet.x}, ${magnet.y})`}\n                </Button>\n              ))}\n            </Section>\n          </Modal>\n        )}\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author pali (https://github.com/pali6)\n * @license MIT\n */\n\nimport { useBackend, useSharedState } from '../backend';\nimport { Box, Button, Divider, Icon, Input, LabeledList, Modal, Section, Stack, Tooltip } from '../components';\nimport { Window } from '../layouts';\nimport { truncate } from '../format.js';\n\nexport const MixingDesk = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    voices,\n    selected_voice,\n    say_popup,\n  } = data;\n  const [message, setMessage] = useSharedState(context, 'message', null);\n\n  const sayPopup = () => (\n    <Modal>\n      Say as {\n        (selected_voice > 0 && selected_voice <= voices.length)\n          ? voices[selected_voice - 1].name\n          : 'yourself'\n      }:\n      <br />\n      <Box\n        pt=\"5px\"\n        pr=\"10px\"\n        textAlign=\"center\"\n      >\n        <Input\n          autoFocus\n          selfClear\n          width={20}\n          value={message}\n          onEnter={(_, msg) => {\n            window.focus();\n            act('say', { message: msg });\n            setMessage('');\n          }}\n          onChange={(_, msg) => setMessage(msg)}\n        />\n      </Box>\n      <br />\n      <Box textAlign=\"center\">\n        <Button\n          onClick={() => {\n            act('say', { message });\n            setMessage('');\n          }}\n        >\n          Say\n        </Button>\n        <Button\n          onClick={() => {\n            act('cancel_say');\n            setMessage('');\n          }}\n        >\n          Cancel\n        </Button>\n      </Box>\n    </Modal>);\n\n  const onKeyDown = e => {\n    let key = String.fromCharCode(e.keyCode);\n    let caught_key = true;\n    if (key === 'T') {\n      act('say_popup');\n    }\n    else if (e.keyCode === 27 && say_popup) { // escape\n      act('cancel_say');\n      setMessage('');\n    }\n    else if (!say_popup) {\n      let num = Number(key);\n      if (String(num) === key) {\n        // apparently in js this is the correct way to check if it's a number\n        act('switch_voice', { id: num });\n      }\n      else {\n        caught_key = false;\n      }\n    }\n    else {\n      caught_key = false;\n    }\n    if (caught_key) {\n      e.stopPropagation();\n    }\n  };\n\n  return (\n    <Window\n      height={375}\n      width={370}>\n      <Window.Content onkeydown={onKeyDown}>\n        {!!say_popup && sayPopup()}\n        <Section title=\"Voice Synthesizer\">\n          <Divider />\n          <LabeledList>\n            {voices.map((entry, index) => (\n              <LabeledList.Item\n                key={entry['name']}\n                label={`${index + 1} ${truncate(entry['name'], 18)}${entry['accent'] ? ` [${entry['accent']}]` : ''}`}\n                labelColor={index + 1 === selected_voice ? \"red\" : \"label\"}\n              >\n                <Button\n                  icon=\"trash-alt\"\n                  onClick={() => act('remove_voice', { id: index + 1 })}\n                />\n                <Button\n                  icon=\"bullhorn\"\n                  onClick={() => act(\"say_popup\", { id: index + 1 })}\n                />\n              </LabeledList.Item>\n            ))}\n            <LabeledList.Item>\n              <Stack align=\"center\">\n                <Stack.Item>\n                  <Button\n                    icon=\"plus\"\n                    onClick={() => act('add_voice')}\n                    disabled={voices.length >= 9}\n                  />\n                </Stack.Item>\n                <Stack.Item>\n                  <Tooltip\n                    position=\"right\"\n                    content=\"Press T to talk and 1-9 keys to switch voices. Press 0 to reset to your normal voice.\"\n                  >\n                    <Icon name=\"question-circle\" />\n                  </Tooltip>\n                </Stack.Item>\n              </Stack>\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2020 WarlockD (https://github.com/warlockd)\n * @author Original WarlockD (https://github.com/warlockd)\n * @author Changes stylemistake\n * @author Changes ThePotato97\n * @license MIT\n */\nimport { resolveAsset } from '../assets';\nimport { Component } from 'inferno';\nimport marked from 'marked';\nimport { useBackend } from '../backend';\nimport { Box, Flex, Tabs, TextArea, Table } from '../components';\nimport { Window } from '../layouts';\nimport { clamp } from 'common/math';\nimport { sanitizeText } from '../sanitize';\nconst MAX_PAPER_LENGTH = 5000; // Question, should we send this with ui_data?\nconst WINDOW_TITLEBAR_HEIGHT = 30;\n// Hacky, yes, works?...yes\nconst textWidth = (text, font, fontsize) => {\n  // default font height is 12 in tgui\n  font = fontsize + \"x \" + font;\n  const c = document.createElement('canvas');\n  const ctx = c.getContext(\"2d\");\n  ctx.font = font;\n  return ctx.measureText(text).width;\n};\n\nconst setFontinText = (text, font, color, bold=false) => {\n  return \"<span style=\\\"\"\n    + \"color:\" + color + \";\"\n    + \"font-family:\" + font + \";\"\n    + ((bold)\n      ? \"font-weight: bold;\"\n      : \"\")\n    + \"\\\">\" + text + \"</span>\";\n};\n\nconst createIDHeader = index => {\n  return \"paperfield_\" + index;\n};\n// To make a field you do a [_______] or however long the field is\n// we will then output a TEXT input for it that hopefully covers\n// the exact amount of spaces\nconst fieldRegex = /\\[(_+)\\]/g;\n// TODO: regex needs documentation\nconst fieldTagRegex = /\\[<input\\s+(?!disabled)(.*?)\\s+id=\"(?<id>paperfield_\\d+)\"(.*?)\\/>\\]/gm;\nconst signRegex = /%s(?:ign)?(?=\\\\s|$)?/igm;\n\nconst createInputField = (length, width, font,\n  fontsize, color, id) => {\n  return \"[<input \"\n      + \"type=\\\"text\\\" \"\n      + \"style=\\\"\"\n      + \"font:'\" + fontsize + \"x \" + font + \"';\"\n      + \"color:'\" + color + \"';\"\n      + \"min-width:\" + width + \";\"\n      + \"max-width:\" + width + \";\"\n      + \"\\\" \"\n      + \"id=\\\"\" + id + \"\\\" \"\n      + \"maxlength=\" + length +\" \"\n      + \"size=\" + length + \" \"\n      + \"/>]\";\n};\n\nconst createFields = (txt, font, fontsize, color, counter) => {\n  const retText = txt.replace(fieldRegex, (match, p1, offset, string) => {\n    const width = textWidth(match, font, fontsize) + \"px\";\n    return createInputField(p1.length,\n      width, font, fontsize, color, createIDHeader(counter++));\n  });\n  return {\n    counter,\n    text: retText,\n  };\n};\n\nconst signDocument = (txt, color, user) => {\n  return txt.replace(signRegex, () => {\n    return setFontinText(user, \"Times New Roman\", color, true);\n  });\n};\n\nconst runMarkedDefault = value => {\n  // Override function, any links and images should\n  // kill any other marked tokens we don't want here\n  const walkTokens = token => {\n    switch (token.type) {\n      case 'url':\n      case 'autolink':\n      case 'reflink':\n      case 'link':\n      case 'image':\n        token.type = 'text';\n        // Once asset system is up change to some default image\n        // or rewrite for icon images\n        token.href = \"\";\n        break;\n    }\n  };\n  return marked(value, {\n    breaks: true,\n    smartypants: true,\n    smartLists: true,\n    walkTokens,\n    // Once assets are fixed might need to change this for them\n    baseUrl: 'thisshouldbreakhttp',\n  });\n};\n\n/*\n** This gets the field, and finds the dom object and sees if\n** the user has typed something in.  If so, it replaces,\n** the dom object, in txt with the value, spaces so it\n** fits the [] format and saves the value into a object\n** There may be ways to optimize this in javascript but\n** doing this in byond is nightmarish.\n**\n** It returns any values that were saved and a corrected\n** html code or null if nothing was updated\n*/\nconst checkAllFields = (txt, font, color, userName, bold=false) => {\n  let matches;\n  let values = {};\n  let replace = [];\n  // I know its tempting to wrap ALL this in a .replace\n  // HOWEVER the user might not of entered anything\n  // if thats the case we are rebuilding the entire string\n  // for nothing, if nothing is entered, txt is just returned\n  while ((matches = fieldTagRegex.exec(txt)) !== null) {\n    const fullMatch = matches[0];\n    const id = matches.groups.id;\n    if (id) {\n      const dom = document.getElementById(id);\n      // make sure we got data, and kill any html that might\n      // be in it\n      const domText = dom && dom.value ? dom.value : \"\";\n      if (domText.length === 0) {\n        continue;\n      }\n      const sanitizedText = sanitizeText(dom.value.trim(), []);\n      if (sanitizedText.length === 0) {\n        continue;\n      }\n      // this is easier than doing a bunch of text manipulations\n      const target = dom.cloneNode(true);\n      // in case they sign in a field\n      if (sanitizedText.match(signRegex)) {\n        target.style.fontFamily = \"Times New Roman\";\n        bold = true;\n        target.defaultValue = userName;\n      }\n      else {\n        target.style.fontFamily = font;\n        target.defaultValue = sanitizedText;\n      }\n      if (bold) {\n        target.style.fontWeight = \"bold\";\n      }\n      target.style.color = color;\n      target.disabled = true;\n      const wrap = document.createElement('div');\n      wrap.appendChild(target);\n      values[id] = sanitizedText; // save the data\n      replace.push({ value: \"[\" + wrap.innerHTML + \"]\", rawText: fullMatch });\n    }\n  }\n  if (replace.length > 0) {\n    for (const o of replace) {\n\n      txt = txt.replace(o.rawText, o.value);\n    }\n  }\n  return { text: txt, fields: values };\n};\n\nconst pauseEvent = e => {\n  if (e.stopPropagation) { e.stopPropagation(); }\n  if (e.preventDefault) { e.preventDefault(); }\n  e.cancelBubble=true;\n  e.returnValue=false;\n  return false;\n};\n\nconst Stamp = (props, context) => {\n  const {\n    image,\n    opacity,\n    activeStamp,\n  } = props;\n  const stampTransform = {\n    'left': image.x + 'px',\n    'top': image.y + 'px',\n    'transform': 'rotate(' + image.rotate + 'deg)',\n    'opacity': opacity || 1.0,\n  };\n  return (\n    image.sprite.match(\"stamp-.*\") ? (\n      <img\n        id={activeStamp && \"stamp\"}\n        style={stampTransform}\n        className=\"paper__stamp\"\n        src={resolveAsset(image.sprite)}\n      />\n    )\n      : (\n        <Box\n          id={activeStamp && \"stamp\"}\n          style={stampTransform}\n          className=\"paper__stamp-text\">\n          {image.sprite}\n        </Box>\n      )\n  );\n};\n\nconst setInputReadonly = (text, readonly) => {\n  return readonly\n    ? text.replace(/<input\\s[^d]/g, '<input disabled ')\n    : text.replace(/<input\\sdisabled\\s/g, '<input ');\n};\n\n// got to make this a full component if we\n// want to control updates\nexport const PaperSheetView = (props, context) => {\n  const {\n    value = \"\",\n    stamps = [],\n    backgroundColor,\n    readOnly,\n  } = props;\n  const stampList = stamps || [];\n  const textHtml = {\n    __html: '<span class=\"paper-text\">'\n      + setInputReadonly(value, readOnly)\n      + '</span>',\n  };\n  return (\n    <Box\n      className=\"paper__page\"\n      position=\"relative\"\n      backgroundColor={backgroundColor}\n      width=\"100%\"\n      height=\"100%\">\n      <Box\n        color=\"black\"\n        backgroundColor={backgroundColor}\n        fillPositionedParent\n        width=\"100%\"\n        height=\"100%\"\n        dangerouslySetInnerHTML={textHtml}\n        p=\"10px\" />\n      {stampList.map((o, i) => (\n        <Stamp key={o[0] + i}\n          image={{ sprite: o[0], x: o[1], y: o[2], rotate: o[3] }} />\n      ))}\n    </Box>\n  );\n};\n\n// again, need the states for dragging and such\nclass PaperSheetStamper extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      x: 0,\n      y: 0,\n      rotate: 0,\n    };\n    this.style = null;\n    this.handleMouseMove = e => {\n      const pos = this.findStampPosition(e);\n      if (!pos) { return; }\n      // center offset of stamp & rotate\n      pauseEvent(e);\n      this.setState({ x: pos[0], y: pos[1], rotate: pos[2] });\n    };\n    this.handleMouseClick = e => {\n      if (e.pageY <= WINDOW_TITLEBAR_HEIGHT) { return; }\n      const { act } = useBackend(this.context);\n      const stampObj = {\n        x: this.state.x, y: this.state.y, r: this.state.rotate,\n      };\n      act(\"stamp\", stampObj);\n    };\n  }\n\n  findStampPosition(e) {\n    let rotating;\n    const windowRef = document.querySelector('.Layout__content');\n    if (e.shiftKey) {\n      rotating = true;\n    }\n\n    const stamp = document.getElementById(\"stamp\");\n    if (stamp)\n    {\n      const stampHeight = stamp.clientHeight;\n      const stampWidth = stamp.clientWidth;\n\n      const currentHeight = rotating\n        ? this.state.y\n        : e.pageY + windowRef.scrollTop - stampHeight;\n      const currentWidth = rotating ? this.state.x : e.pageX - (stampWidth / 2);\n\n      const widthMin = 0;\n      const heightMin = 0;\n\n      const widthMax = windowRef.clientWidth - stampWidth;\n      const heightMax = (\n        windowRef.clientHeight + windowRef.scrollTop - stampHeight\n      );\n\n      const radians = Math.atan2(\n        e.pageX - currentWidth,\n        e.pageY - currentHeight\n      );\n\n      const rotate = rotating\n        ? radians * (180 / Math.PI) * -1\n        : this.state.rotate;\n\n      return [\n        clamp(currentWidth, widthMin, widthMax),\n        clamp(currentHeight, heightMin, heightMax),\n        rotate,\n      ];\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousemove\", this.handleMouseMove);\n    document.addEventListener(\"click\", this.handleMouseClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n    document.removeEventListener(\"click\", this.handleMouseClick);\n  }\n\n  render() {\n    const {\n      value,\n      stampClass,\n      stamps,\n    } = this.props;\n    const stampList = stamps || [];\n    const currentPos = {\n      sprite: stampClass,\n      x: this.state.x,\n      y: this.state.y,\n      rotate: this.state.rotate,\n    };\n    return (\n      <>\n        <PaperSheetView\n          readOnly\n          value={value}\n          stamps={stampList} />\n        <Stamp\n          activeStamp\n          opacity={0.5}\n          image={currentPos} />\n      </>\n    );\n  }\n}\n\n// ugh.  So have to turn this into a full\n// component too if I want to keep updates\n// low and keep the weird flashing down\nclass PaperSheetEdit extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      previewSelected: \"Preview\",\n      oldText: props.value || \"\",\n      textAreaText: \"\",\n      combinedText: props.value || \"\",\n      showingHelpTip: false,\n    };\n  }\n\n  // This is the main rendering part, this creates the html from marked text\n  // as well as the form fields\n  createPreview(value, doFields = false) {\n    const { data } = useBackend(this.context);\n    const {\n      text,\n      penColor,\n      penFont,\n      isCrayon,\n      fieldCounter,\n      editUsr,\n    } = data;\n    const out = { text: text };\n    // check if we are adding to paper, if not\n    // we still have to check if someone entered something\n    // into the fields\n    value = value.trim();\n    if (value.length > 0) {\n      // Second, we sanitize the text of html\n      const sanitizedText = sanitizeText(value);\n      const signedText = signDocument(sanitizedText, penColor, editUsr);\n      // Third we replace the [__] with fields as markedjs fucks them up\n      const fieldedText = createFields(\n        signedText, penFont, 12, penColor, fieldCounter);\n      // Fourth, parse the text using markup\n      const formattedText = runMarkedDefault(fieldedText.text);\n      // Fifth, we wrap the created text in the pin color, and font.\n      // crayon is bold (<b> tags), maybe make fountain pin italic?\n      const fontedText = setFontinText(\n        formattedText, penFont, penColor, isCrayon);\n      out.text += fontedText;\n      out.fieldCounter = fieldedText.counter;\n    }\n    if (doFields) {\n      // finally we check all the form fields to see\n      // if any data was entered by the user and\n      // if it was return the data and modify the text\n      const finalProcessing = checkAllFields(\n        out.text, penFont, penColor, editUsr, isCrayon);\n      out.text = finalProcessing.text;\n      out.formFields = finalProcessing.fields;\n    }\n    return out;\n  }\n\n  onInputHandler(e, value) {\n    if (value !== this.state.textAreaText) {\n      const combinedLength = this.state.oldText.length\n        + this.state.textAreaText.length;\n      if (combinedLength > MAX_PAPER_LENGTH) {\n        if ((combinedLength - MAX_PAPER_LENGTH) >= value.length) {\n          // Basically we cannot add any more text to the paper\n          value = '';\n        } else {\n          value = value.substr(0, value.length\n            - (combinedLength - MAX_PAPER_LENGTH));\n        }\n        // we check again to save an update\n        if (value === this.state.textAreaText) {\n          // Do nothing\n          return;\n        }\n      }\n      this.setState(() => ({\n        textAreaText: value,\n        combinedText: this.createPreview(value),\n      }));\n    }\n  }\n  // the final update send to byond, final upkeep\n  finalUpdate(newText) {\n    const { act } = useBackend(this.context);\n    const finalProcessing = this.createPreview(newText, true);\n    act('save', finalProcessing);\n    this.setState(() => { return {\n      textAreaText: \"\",\n      previewSelected: \"save\",\n      combinedText: finalProcessing.text,\n    }; });\n    // byond should switch us to readonly mode from here\n  }\n\n  render() {\n    const {\n      textColor,\n      fontFamily,\n      stamps,\n      backgroundColor,\n    } = this.props;\n    return (\n      <Flex\n        direction=\"column\"\n        fillPositionedParent>\n        <Flex.Item>\n          <Tabs\n            size=\"100%\">\n            <Tabs.Tab\n              key=\"marked_edit\"\n              textColor=\"black\"\n              backgroundColor={this.state.previewSelected === \"Edit\"\n                ? \"grey\"\n                : \"white\"}\n              selected={this.state.previewSelected === \"Edit\"}\n              onClick={() => this.setState({ previewSelected: \"Edit\" })}>\n              Edit\n            </Tabs.Tab>\n            <Tabs.Tab\n              key=\"marked_preview\"\n              textColor=\"black\"\n              backgroundColor={this.state.previewSelected === \"Preview\"\n                ? \"grey\"\n                : \"white\"}\n              selected={this.state.previewSelected === \"Preview\"}\n              onClick={() => this.setState(() => {\n                const newState = {\n                  previewSelected: \"Preview\",\n                  textAreaText: this.state.textAreaText,\n                  combinedText: this.createPreview(\n                    this.state.textAreaText).text,\n                };\n                return newState;\n              })}>\n              Preview\n            </Tabs.Tab>\n            <Tabs.Tab\n              key=\"marked_done\"\n              textColor=\"black\"\n              backgroundColor={this.state.previewSelected === \"confirm\"\n                ? \"red\"\n                : this.state.previewSelected === \"save\"\n                  ? \"grey\"\n                  : \"white\"}\n              selected={this.state.previewSelected === \"confirm\"\n                || this.state.previewSelected === \"save\"}\n              onClick={() => {\n                if (this.state.previewSelected === \"confirm\") {\n                  this.finalUpdate(this.state.textAreaText);\n                }\n                else if (this.state.previewSelected === \"Edit\") {\n                  this.setState(() => {\n                    const newState = {\n                      previewSelected: \"confirm\",\n                      textAreaText: this.state.textAreaText,\n                      combinedText: this.createPreview(\n                        this.state.textAreaText).text,\n                    };\n                    return newState;\n                  });\n                }\n                else {\n                  this.setState({ previewSelected: \"confirm\" });\n                }\n              }}>\n              {this.state.previewSelected === \"confirm\" ? \"Confirm\" : \"Save\"}\n            </Tabs.Tab>\n            <Tabs.Tab\n              key=\"marked_help\"\n              textColor={'black'}\n              backgroundColor=\"white\"\n              icon=\"question-circle-o\"\n              onmouseover={() => {\n                this.setState({ showingHelpTip: true });\n              }}\n              onmouseout={() => {\n                this.setState({ showingHelpTip: false });\n              }}>\n              Help\n            </Tabs.Tab>\n          </Tabs>\n        </Flex.Item>\n        <Flex.Item\n          grow={1}\n          basis={1}>\n          {this.state.previewSelected === \"Edit\" && (\n            <TextArea\n              value={this.state.textAreaText}\n              textColor={textColor}\n              fontFamily={fontFamily}\n              height={(window.innerHeight - 60) + \"px\"}\n              backgroundColor={backgroundColor}\n              onInput={this.onInputHandler.bind(this)} />\n          ) || (\n            <PaperSheetView\n              value={this.state.combinedText}\n              stamps={stamps}\n              fontFamily={fontFamily}\n              textColor={textColor} />\n          )}\n        </Flex.Item>\n        {this.state.showingHelpTip && (\n          <HelpToolip />\n        )}\n      </Flex>\n    );\n  }\n}\n\nexport const PaperSheet = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    editMode,\n    text,\n    paperColor = \"white\",\n    penColor = \"black\",\n    penFont = \"Verdana\",\n    stamps,\n    stampClass,\n    sizeX,\n    sizeY,\n    name,\n  } = data;\n  const stampList = !stamps\n    ? []\n    : stamps;\n  const decideMode = mode => {\n    switch (mode) {\n      case 0:\n        return (\n          <PaperSheetView\n            value={text}\n            stamps={stampList}\n            readOnly />\n        );\n      case 1:\n        return (\n          <PaperSheetEdit\n            value={text}\n            textColor={penColor}\n            fontFamily={penFont}\n            stamps={stampList}\n            backgroundColor={paperColor} />\n        );\n      case 2:\n        return (\n          <PaperSheetStamper\n            value={text}\n            stamps={stampList}\n            stampClass={stampClass} />\n        );\n      default:\n        return \"ERROR ERROR WE CANNOT BE HERE!!\";\n    }\n  };\n  return (\n    <Window\n      title={name}\n      theme=\"paper\"\n      width={sizeX || 400}\n      height={sizeY || 500}>\n      <Window.Content\n        backgroundColor={paperColor}\n        scrollable>\n        <Box\n          id=\"page\"\n          fitted\n          fillPositionedParent>\n          {decideMode(editMode)}\n        </Box>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst HelpToolip = () => {\n  return (\n    <Box\n      position=\"absolute\"\n      left=\"10px\"\n      top=\"25px\"\n      width=\"300px\"\n      height=\"350px\"\n      backgroundColor=\"#E8E4C9\" // offset from paper color\n      textAlign=\"center\">\n      <h3>\n        Markdown Syntax\n      </h3>\n      <Table>\n        <Table.Row>\n          <Table.Cell>\n            <Box>\n              Heading\n            </Box>\n            =====\n          </Table.Cell>\n          <Table.Cell>\n            <h2>\n              Heading\n            </h2>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            <Box>\n              Sub Heading\n            </Box>\n            ------\n          </Table.Cell>\n          <Table.Cell>\n            <h4>\n              Sub Heading\n            </h4>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            _Italic Text_\n          </Table.Cell>\n          <Table.Cell>\n            <i>\n              Italic Text\n            </i>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            **Bold Text**\n          </Table.Cell>\n          <Table.Cell>\n            <b>\n              Bold Text\n            </b>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            `Code Text`\n          </Table.Cell>\n          <Table.Cell>\n            <code>\n              Code Text\n            </code>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            ~~Strikethrough Text~~\n          </Table.Cell>\n          <Table.Cell>\n            <s>\n              Strikethrough Text\n            </s>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            <Box>\n              Horizontal Rule\n            </Box>\n            ---\n          </Table.Cell>\n          <Table.Cell>\n            Horizontal Rule\n            <hr />\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            <Table>\n              <Table.Row>\n                * List Element 1\n              </Table.Row>\n              <Table.Row>\n                * List Element 2\n              </Table.Row>\n              <Table.Row>\n                * Etc...\n              </Table.Row>\n            </Table>\n          </Table.Cell>\n          <Table.Cell>\n            <ul>\n              <li>\n                List Element 1\n              </li>\n              <li>\n                List Element 2\n              </li>\n              <li>\n                Etc...\n              </li>\n            </ul>\n          </Table.Cell>\n        </Table.Row>\n\n        <Table.Row>\n          <Table.Cell>\n            <Table>\n              <Table.Row>\n                1. List Element 1\n              </Table.Row>\n              <Table.Row>\n                2. List Element 2\n              </Table.Row>\n              <Table.Row>\n                3. Etc...\n              </Table.Row>\n            </Table>\n          </Table.Cell>\n          <Table.Cell>\n            <ol>\n              <li>\n                List Element 1\n              </li>\n              <li>\n                List Element 2\n              </li>\n              <li>\n                Etc...\n              </li>\n            </ol>\n          </Table.Cell>\n        </Table.Row>\n      </Table>\n    </Box>\n  );\n};\n","/**\n * @file\n * @copyright 2021 Gomble (https://github.com/AndrewL97)\n * @author Original Gomble (https://github.com/AndrewL97)\n * @author Changes Azrun\n * @author Changes Sovexe (https://github.com/Sovexe)\n * @license MIT\n */\n\nimport { toFixed } from 'common/math';\nimport { numberOfDecimalDigits } from \"../../common/math\";\nimport { useBackend, useLocalState } from '../backend';\nimport { Box, Button, Collapsible, ColorBox, Flex, Input, LabeledList, NoticeBox, NumberInput, Section, Tooltip } from '../components';\nimport { Window } from '../layouts';\nimport { logger } from '../logging';\n\nconst ParticleIntegerEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <NumberInput\n        value={value}\n        stepPixelSize={5}\n        width=\"39px\"\n        onDrag={(e, value) => act('modify_particle_value', {\n          new_data: {\n            name: name,\n            value: value,\n            type: 'int',\n          },\n        })} />\n    </Tooltip>\n  );\n};\n\nconst ParticleMatrixEntry = (props, context) => {\n  let { value, name } = props;\n  const { act } = useBackend(context);\n\n\n  // Actual matrix, or matrix of 0\n  value = value || [1, 0, 0, 1, 0, 0]; // this doesn't make sense, it should be [1, 0, 0, 0, 1, 0] but it's not\n  return (\n    <Flex>\n      <Flex.Item>\n        {value.map((val, i) => (\n          <NumberInput\n            value={val}\n            key={i}\n            onDrag={(e, v) =>\n            {\n              value[i] = v;\n              act('modify_particle_value', {\n                new_data: {\n                  name: name,\n                  value: value,\n                  type: 'matrix',\n                },\n              }); }}\n          />))}\n      </Flex.Item>\n    </Flex>\n\n  );\n};\n\nconst ParticleFloatEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  let entry = null;\n  let isGen = typeof value === 'string';\n  if (isGen) {\n    entry = ParticleGeneratorEntry(props, context);\n  }\n  else {\n    entry = ParticleFloatNonGenEntry(props, context);\n  }\n  return (\n    <Flex>\n      <Flex.Item>{ entry }</Flex.Item>\n      <Flex.Item align=\"right\">\n        <Button.Checkbox\n          checked={isGen}\n          content=\"generator\"\n          onClick={() => act('modify_particle_value', {\n            new_data: {\n              name: name,\n              value: isGen ? 0 : {\n                genType: 'num',\n                a: value,\n                b: value,\n                rand: \"UNIFORM_RAND\",\n              },\n              type: isGen ? 'float' : 'generator',\n            },\n          })} />\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst ParticleFloatNonGenEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  const [step, _] = useLocalState(context, 'particleFloatStep', 0.01);\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <NumberInput\n        value={value}\n        stepPixelSize={4}\n        step={step}\n        format={value => toFixed(value, numberOfDecimalDigits(step))}\n        width=\"80px\"\n        onDrag={(e, value) =>\n          act('modify_particle_value', {\n            new_data: {\n              name: name,\n              value: value,\n              type: 'float',\n            },\n          })} />\n\n    </Tooltip>\n  );\n};\n\nconst ParticleVectorEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  let entry = null;\n  let isGen = typeof value === 'string';\n  if (isGen) {\n    entry = ParticleGeneratorEntry(props, context);\n  }\n  else {\n    entry = ParticleVectorNonGenEntry(props, context);\n  }\n  return (\n    <Flex>\n      <Flex.Item>{ entry }</Flex.Item>\n      <Flex.Item align=\"right\">\n        <Button.Checkbox\n          checked={isGen}\n          content=\"generator\"\n          onClick={() => act('modify_particle_value', {\n            new_data: {\n              name: name,\n              value: isGen ? [0, 0, 0] : {\n                genType: 'box',\n                a: value,\n                b: value,\n                rand: \"UNIFORM_RAND\",\n              },\n              type: isGen ? 'vector' : 'generator',\n            },\n          })} />\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst ParticleVectorNonGenEntryVarLen = (len) => {\n  return (props, context) => {\n    let { value, name } = props;\n    const { act } = useBackend(context);\n\n    value = value || Array(len).fill(0);\n    if (!isNaN(value)) {\n      value = Array(len).fill(value);\n    }\n    value = value.slice(0, len);\n    return (\n      <Flex>\n        <Flex.Item>\n          {value.map((val, i) => (\n            <NumberInput\n              value={val}\n              key={i}\n              width=\"40px\"\n              onDrag={(e, v) =>\n              {\n                value[i] = v;\n                act('modify_particle_value', {\n                  new_data: {\n                    name: name,\n                    value: value,\n                    type: 'vector',\n                  },\n                }); }}\n            />))}\n        </Flex.Item>\n      </Flex>\n    );\n  };\n};\n\nconst ParticleVectorNonGenEntry = ParticleVectorNonGenEntryVarLen(3);\n\nconst ParticleVector2Entry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  let entry = null;\n  let isGen = typeof value === 'string';\n  if (isGen) {\n    entry = ParticleGeneratorEntry(props, context);\n  }\n  else {\n    entry = ParticleVectorNonGenEntryVarLen(2)(props, context);\n  }\n  return (\n    <Flex>\n      <Flex.Item>{ entry }</Flex.Item>\n      <Flex.Item align=\"right\">\n        <Button.Checkbox\n          checked={isGen}\n          content=\"generator\"\n          onClick={() => act('modify_particle_value', {\n            new_data: {\n              name: name,\n              value: isGen ? [0, 0] : {\n                genType: 'box',\n                a: value,\n                b: value,\n                rand: \"UNIFORM_RAND\",\n              },\n              type: isGen ? 'vector' : 'generator',\n            },\n          })} />\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst ParticleGeneratorEntry = (props, context) => {\n  const { value, name } = props;\n  const { act } = useBackend(context);\n  const generatorTypes = [\"num\", \"vector\", \"box\", \"color\", \"circle\", \"sphere\", \"square\", \"cube\"];\n  const randTypes = [\"UNIFORM_RAND\", \"NORMAL_RAND\", \"LINEAR_RAND\", \"SQUARE_RAND\"];\n\n  let tempGenType = '';\n  let tempA = '';\n  let tempB = '';\n  let tempRand = '';\n\n  logger.log(value);\n\n  // Value will come through a binobj of the generator, i.e\n  // \"client generator(box, UNIFORM_RAND, list(-10,-10,-10), list(10,10,10))\"\n  // So do this hacky garbage to convert it back into values\n  if (value) {\n    // Get contents of brackets\n    let params = value.match(/\\((.*)\\)/);\n    params = params ? params : [\"\", \"\", \"\", \"\"];\n    // Split into params\n    params = params[1].split(', ');\n    if (params.length === 4) {\n      tempGenType = params[0].replace(/['\"]+/g, '');\n\n      // Try to get contents of list(), just pass value if null\n      let aTemp = params[1].match(/\\((.*)\\)/);\n      tempA = aTemp ? aTemp[1] : params[1].replace(/['\"]+/g, ''); // fermented soy beans\n\n      let bTemp = params[2].match(/\\((.*)\\)/);\n      tempB = bTemp ? bTemp[1] : params[2].replace(/['\"]+/g, '');\n\n      tempRand = params[3];\n    }\n  }\n\n  const [genType, setGenType] = useLocalState(context, name + 'genType', tempGenType);\n  const [a, setA] = useLocalState(context, name + 'a', tempA);\n  const [b, setB] = useLocalState(context, name + 'b', tempB);\n  const [rand, setRand] = useLocalState(context, name + 'rand', tempRand);\n\n  const doAct = () => {\n    logger.log(genType);\n    act('modify_particle_value', {\n      new_data: {\n        name: name,\n        value: {\n          genType: genType,\n          a: a,\n          b: b,\n          rand: rand,\n        },\n        type: 'generator',\n      },\n    }); };\n\n  return (\n    <Collapsible\n      title=\"Generator Settings - Hit Set to save\">\n      <Section level={2}>\n        <LabeledList>\n          <LabeledList.Item label=\"type\">\n            <Tooltip position=\"bottom\" content={`${generatorTypes.join(\", \")}`}>\n              <Input\n                value={genType}\n                onInput={(e, val) => setGenType(val)} />\n            </Tooltip>\n          </LabeledList.Item>\n          <LabeledList.Item label=\"A\"><Input\n            value={a}\n            onInput={(e, val) => setA(val)} />\n          </LabeledList.Item>\n          <LabeledList.Item label=\"B\">\n            <Input\n              value={b}\n              onInput={(e, val) => setB(val)} />\n          </LabeledList.Item>\n          <LabeledList.Item label=\"Rand Type\">\n            <Tooltip position=\"bottom\" content={`${randTypes.join(\", \")}`}>\n              <Input\n                value={rand}\n                onInput={(e, val) => setRand(val)} />\n            </Tooltip>\n          </LabeledList.Item>\n\n        </LabeledList>\n        <Button\n          content=\"Set\"\n          onClick={() => doAct()} />\n      </Section >\n    </Collapsible>\n\n  );\n};\n\nconst ParticleTextEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <Input\n        value={value}\n        width=\"250px\"\n        onInput={(e, value) => act('modify_particle_value', {\n          new_data: {\n            name: name,\n            value: value,\n            type: 'text',\n          },\n        })} />\n    </Tooltip>\n  );\n};\n\nconst ParticleNumListEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n\n  let valArr = value ? Object.keys(value).map((key) => value[key]) : [];\n\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <Input\n        value={valArr.join(',')}\n        width=\"250px\"\n        onInput={(e, val) => act('modify_particle_value', {\n          new_data: {\n            name: name,\n            value: val,\n            type: 'numList',\n          },\n        })} />\n    </Tooltip>\n  );\n};\n\nconst ParticleListEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n\n  let valArr = value ? Object.keys(value).map((key) => value[key]) : [];\n\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <Input\n        value={valArr.join(',')}\n        width=\"250px\"\n        onInput={(e, val) => act('modify_particle_value', {\n          new_data: {\n            name: name,\n            value: val,\n            type: 'list',\n          },\n        })} />\n    </Tooltip>\n  );\n};\n\nconst ParticleColorNonGenEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  return (\n    <Tooltip position=\"bottom\" content={tooltip}>\n      <Button\n        icon=\"pencil-alt\"\n        onClick={() => act('modify_color_value')} />\n      <ColorBox\n        color={value}\n        mr={0.5} />\n      <Input\n        value={value}\n        width=\"90px\"\n        onInput={(e, value) => act('modify_particle_value', {\n          new_data: {\n            name: name,\n            value: value,\n            type: 'color',\n          },\n        })} />\n    </Tooltip>\n  );\n};\n\nconst ParticleColorEntry = (props, context) => {\n  const { value, tooltip, name } = props;\n  const { act } = useBackend(context);\n  let entry = null;\n  let isGen = typeof value === 'string' && value.charAt(0) !== '#';\n  if (isGen) {\n    entry = ParticleGeneratorEntry(props, context);\n  }\n  else {\n    entry = ParticleColorNonGenEntry(props, context);\n  }\n  return (\n    <Flex>\n      <Flex.Item>{ entry }</Flex.Item>\n      <Flex.Item align=\"right\">\n        <Button.Checkbox\n          checked={isGen}\n          content=\"generator\"\n          onClick={() => act('modify_particle_value', {\n            new_data: {\n              name: name,\n              value: isGen ? \"#ffffff\" : {\n                genType: 'color',\n                a: value,\n                b: value,\n                rand: \"UNIFORM_RAND\",\n              },\n              type: isGen ? 'color' : 'generator',\n            },\n          })} />\n      </Flex.Item>\n    </Flex>\n  );\n};\n\nconst ParticleIconEntry = (props, context) => {\n  const { value } = props;\n  const { act } = useBackend(context);\n  return (\n    <>\n      <Button\n        icon=\"pencil-alt\"\n        onClick={() => act('modify_icon_value')} />\n      <Box inline ml={1}>\n        {value}\n      </Box>\n    </>\n  );\n};\n\n\nconst particleEntryMap = {\n\n  width: { type: 'float_nongen', tooltip: 'Width of particle image in pixels' },\n  height: { type: 'float_nongen', tooltip: 'Height of particle image in pixels' },\n  count: { type: 'int', tooltip: \"Maximum particle count\" },\n  spawning: { type: 'float_nongen', tooltip: \"Number of particles to spawn per tick (can be fractional)\" },\n  bound1: { type: 'vector_nongen', tooltip: \"Minimum particle position in x,y,z space\" },\n  bound2: { type: 'vector_nongen', tooltip: \"Maximum particle position in x,y,z space\" },\n  gravity: { type: 'vector_nongen', tooltip: \"Constant acceleration applied to all particles in this set (pixels per squared tick)\" },\n  gradient: { type: 'list', tooltip: \"Color gradient used, if any\" },\n  transform: { type: 'matrix', tooltip: \"Transform done to all particles, if any (can be higher than 2D)\" },\n  lifespan: { type: 'float', tooltip: \"Maximum life of the particle, in ticks\" },\n  fade: { type: 'float', tooltip: \"Fade-out time at end of lifespan, in ticks\" },\n  fadein: { type: 'float', tooltip: \"Fade-in time, in ticks\" },\n  icon: { type: 'icon', tooltip: \"Icon to use, if any; no icon means this particle will be a dot\" },\n  icon_state: { type: 'list', tooltip: \"Icon state to use, if any\" },\n  color: { type: 'color', tooltip: \"Particle color; can be a number if a gradient is used\" },\n  color_change: { type: 'float', tooltip: \"Color change per tick; only applies if gradient is used\" },\n  position: { type: 'vector', tooltip: \"x,y,z position, from center in pixels\" },\n  velocity: { type: 'vector', tooltip: \"x,y,z velocity, in pixels\" },\n  scale: { type: 'vector2', tooltip: \"(2D)\tScale applied to icon, if used; defaults to list(1,1)\" },\n  grow: { type: 'vector2', tooltip: \"Change in scale per tick; defaults to list(0,0)\" },\n  rotation: { type: 'float', tooltip: \"Angle of rotation (clockwise); applies only if using an icon\" },\n  spin: { type: 'float', tooltip: \"Change in rotation per tick\" },\n  friction: { type: 'float', tooltip: \"Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift\" },\n  drift: { type: 'vector', tooltip: \"Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects\" },\n};\n\nconst ParticleDataEntry = (props, context) => {\n  const { name, value } = props;\n\n  const particleEntryTypes = {\n    int: <ParticleIntegerEntry {...props} />,\n    float: <ParticleFloatEntry {...props} />,\n    float_nongen: <ParticleFloatNonGenEntry {...props} />,\n    string: <ParticleTextEntry {...props} />,\n    numlist: <ParticleNumListEntry {...props} />,\n    list: <ParticleListEntry {...props} />,\n    color: <ParticleColorEntry {...props} />,\n    icon: <ParticleIconEntry {...props} />,\n    generator: <ParticleGeneratorEntry {...props} />,\n    matrix: <ParticleMatrixEntry {...props} />,\n    vector: <ParticleVectorEntry {...props} />,\n    vector_nongen: <ParticleVectorNonGenEntry {...props} />,\n    vector2: <ParticleVector2Entry {...props} />,\n  };\n\n  return (\n    <LabeledList.Item label={name}>\n      {particleEntryTypes[particleEntryMap[name].type] || particleEntryMap[name].type || \"Not Found (This is an error)\"}\n    </LabeledList.Item>\n  );\n};\n\nconst ParticleEntry = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { particle } = props;\n  return (\n    <LabeledList>\n      {Object.keys(particleEntryMap).map(entryName => {\n        const value = particle[entryName];\n        const tooltip = particleEntryMap[entryName].tooltip || \"Oh Bees! Tooltip is missing.\";\n        return (\n          <ParticleDataEntry\n            key={entryName}\n            name={entryName}\n            tooltip={tooltip}\n            value={value} />\n        );\n      })}\n    </LabeledList>\n  );\n};\n\n\nconst GeneratorHelp = () => {\n  return (\n    <Collapsible title=\"Generator Help\"><Section level={2} />\n      <Section level={2}>\n        <table>\n          <tbody>\n            <tr>\n              <td>Generator type</td>\n              <td>Result type</td>\n              <td>Description</td>\n            </tr>\n            <tr>\n              <td>num</td>\n              <td>num</td>\n              <td>A random number between A and B.</td>\n            </tr>\n            <tr>\n              <td>vector</td>\n              <td>vector</td>\n              <td>A random vector on a line between A and B.</td>\n            </tr>\n            <tr>\n              <td>box</td>\n              <td>vector</td>\n              <td>A random vector within a box whose corners are at A and B.</td>\n            </tr>\n            <tr>\n              <td>color</td>\n              <td>color (string) or color matrix</td>\n              <td>Result type depends on whether A or B are matrices or not.\n                The result is interpolated between A and B; components are not randomized separately.\n              </td>\n            </tr>\n            <tr>\n              <td>circle</td>\n              <td>vector</td>\n              <td>A random XY-only vector in a ring between radius A and B, centered at 0,0.</td>\n            </tr>\n            <tr>\n              <td>sphere</td>\n              <td>vector</td>\n              <td>A random vector in a spherical shell between radius A and B, centered at 0,0,0.</td>\n            </tr>\n            <tr>\n              <td>square</td>\n              <td>vector</td>\n              <td>A random XY-only vector between squares of sizes A and B.\n                (The length of the square is between A*2 and B*2, centered at 0,0.)\n              </td>\n            </tr>\n            <tr>\n              <td>cube</td>\n              <td>vector</td>\n              <td>A random vector between cubes of sizes A and B.\n                (The length of the cube is between A*2 and B*2, centered at 0,0,0.)\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Section>\n    </Collapsible>); };\n\n\n\nexport const Particool = (props, context) => {\n  const { act, data } = useBackend(context);\n  const particles = data.target_particle || {};\n  const hasParticles = particles && Object.keys(particles).length > 0;\n  const [step, setStep] = useLocalState(context, 'particleFloatStep', 0.01);\n\n  const [hiddenSecret, setHiddenSecret] = useLocalState(context, 'hidden', false);\n  return (\n    <Window\n      title=\"Particool\"\n      width={700}\n      height={500}>\n      <Window.Content scrollable>\n        {!!hiddenSecret && (\n          <NoticeBox danger> {String(Date.now())} <br />\n            Particles? {hasParticles.toString()} -\n            {(data.target_particle === null).toString()} <br />\n            Json - {JSON.stringify(data.target_particle)}\n          </NoticeBox>\n        )}\n        <Section\n          title={\n            <Box\n              inline\n              onDblClick={() => setHiddenSecret(true)}>\n              Particle\n            </Box>\n          }\n          buttons={!hasParticles ? (\n            <Button\n              icon=\"plus\"\n              content=\"Add Particle\"\n              onClick={() => act('add_particle')} />\n          ) : (<Button.Confirm\n            icon=\"minus\"\n            content=\"Remove Particle\"\n            onClick={() => act(\"remove_particle\")} />)} >\n          <GeneratorHelp />\n          <Box\n            inline\n            ml={2}\n            mr={1}>\n            Float change step:\n          </Box>\n          <NumberInput\n            value={step}\n            step={0.001}\n            format={value => toFixed(value, numberOfDecimalDigits(step))}\n            width=\"70px\"\n            onChange={(e, value) => setStep(value)} />\n          {!hasParticles ? (\n            <Box>\n              No particle\n            </Box>\n          ) : (\n            <ParticleEntry particle={particles} />\n          )}\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { InfernoNode } from 'inferno';\nimport { Stack, Icon } from '../../components';\nimport { SortDirection } from './constant';\n\ninterface HeaderProps {\n  children: InfernoNode,\n  onSortClick?: () => any,\n  sortDirection?: SortDirection,\n}\n\nexport const Header = (props: HeaderProps) => {\n  const {\n    children,\n    onSortClick,\n    sortDirection,\n    ...rest\n  } = props;\n  const iconName = sortDirection\n    ? (sortDirection === SortDirection.Asc ? 'sort-alpha-down' : 'sort-alpha-up')\n    : 'sort';\n  return (\n    <Stack\n      style={{\n        cursor: 'pointer',\n      }}\n      onClick={onSortClick}\n      {...rest}\n    >\n      <Stack.Item>{children}</Stack.Item>\n      {onSortClick && (\n        <Stack.Item>\n          <Icon\n            name={iconName}\n            unselectable\n          />\n        </Stack.Item>\n      )}\n    </Stack>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @author Sovexe (https://github.com/Sovexe)\n * @license ISC\n */\n\nexport enum Action {\n  JumpToPlayerLocation = 'jump-to-player-loc',\n  OpenPlayerOptions = 'open-player-options',\n  PrivateMessagePlayer = 'private-message-player',\n}\n\nexport enum SortDirection {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n","/**\n * @file\n * @copyright 2021\n * @author Sovexe (https://github.com/Sovexe)\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { useBackend, useLocalState } from '../../backend';\nimport { Button, Input, Stack, Table } from '../../components';\nimport { Window } from '../../layouts';\nimport { Header } from './Header';\nimport { Action, SortDirection } from './constant';\nimport { CellTemplateConfig, CellValueSelectorConfig, Column, PlayerData, PlayerPanelData, SortConfig, SorterConfig } from './type';\n\nconst defaultTemplate = <Row extends object, Value>(config: CellTemplateConfig<Row, Value>) => `${config.value}`;\nconst ckeyTemplate = (config: CellTemplateConfig<PlayerData, string>) => {\n  const {\n    act,\n    row,\n    value,\n  } = config;\n  return (\n    <Stack>\n      <Stack.Item grow={1}>\n        <Button\n          onClick={() => act(Action.OpenPlayerOptions, {\n            ckey: value,\n            mobRef: row.mobRef,\n          })}\n        >\n          {value}\n        </Button>\n      </Stack.Item>\n      <Stack.Item>\n        <Button\n          icon=\"envelope\"\n          color=\"bad\"\n          onClick={() => act(Action.PrivateMessagePlayer, {\n            ckey: value,\n            mobRef: row.mobRef,\n          })}\n        />\n      </Stack.Item>\n    </Stack>\n  );\n};\n\nconst playerLocationTemplate = (config: CellTemplateConfig<PlayerData, string>) => {\n  const {\n    act,\n    row,\n    value,\n  } = config;\n  return (\n    <Button\n      onClick={() => act(Action.JumpToPlayerLocation, {\n        ckey: row.ckey,\n        mobRef: row.mobRef,\n      })}\n    >\n      {value}\n    </Button>\n  );\n};\n\nconst alphabeticalSorter = (a: string, b: string) => a.localeCompare(b);\n\n// https://stackoverflow.com/a/68147012\nconst makeIpNumber = (ip: string) => Number(\n  ip.split('.')\n    .map((subString) => (`00${subString}`).slice(-3))\n    .join('')\n);\nconst ipSorter = (a: string, b: string) => makeIpNumber(a) - makeIpNumber(b);\n\nconst numberSorter = (a: number, b: number) => a - b;\n\nconst dateStringSorter = (a: string, b: string) => {\n  let aArray = a.split(\"-\").map(parseFloat);\n  let bArray = b.split(\"-\").map(parseFloat);\n  return aArray > bArray ? 1 : aArray < bArray ? -1 : 0;\n};\n\nconst createDefaultValueSelector = <Row extends object, Value>(field: string) => (\n  (config: CellValueSelectorConfig<Row, Value>): Value => config.row[field]\n);\n\nconst createDefaultColumnConfig = <Row extends object, Value>(field: string) => ({\n  id: field,\n  sorter: alphabeticalSorter,\n  template: defaultTemplate,\n  valueSelector: createDefaultValueSelector<Row, Value>(field),\n});\n\nconst columns: Column<PlayerData, unknown>[] = [\n  { ...createDefaultColumnConfig('ckey'), name: 'CKey', template: ckeyTemplate },\n  { ...createDefaultColumnConfig('name'), name: 'Name' },\n  { ...createDefaultColumnConfig('realName'), name: 'Real Name' },\n  { ...createDefaultColumnConfig('assignedRole'), name: 'Assigned Role' },\n  { ...createDefaultColumnConfig('specialRole'), name: 'Special Role' },\n  { ...createDefaultColumnConfig('playerType'), name: 'Player Type' },\n  { ...createDefaultColumnConfig('computerId'), name: 'CID' },\n  { ...createDefaultColumnConfig('ip'), name: 'IP', sorter: ipSorter },\n  { ...createDefaultColumnConfig('joined'), name: 'Join Date', sorter: dateStringSorter },\n  { ...createDefaultColumnConfig('playerLocation'), name: 'Player Location', template: playerLocationTemplate },\n  { ...createDefaultColumnConfig('ping'), name: 'Ping', sorter: numberSorter },\n];\n\nexport const PlayerPanel = (props, context) => {\n  const { act, data } = useBackend<PlayerPanelData>(context);\n  const { players } = data;\n  const [search, setSearch] = useLocalState(context, 'search', '');\n  const [sort, setSort] = useLocalState<SortConfig>(context, 'sort', null);\n  let resolvedPlayers = Object.keys(players).map(ckey => players[ckey]);\n\n  // generate all values up front (to avoid having to generate multiple times)\n  const playerValues: { [ckey: string]: {\n    [id: string]: unknown,\n  } } = resolvedPlayers.reduce((prevPlayerValues, currPlayer) => {\n    prevPlayerValues[currPlayer.ckey] = columns.reduce((prevValues, currColumn) => {\n      const {\n        id,\n        valueSelector,\n      } = currColumn;\n      prevValues[id] = valueSelector({\n        column: currColumn,\n        row: currPlayer,\n      });\n      return prevValues;\n    }, {});\n    return prevPlayerValues;\n  }, {});\n  if (search) {\n    const lowerSearch = search.toLowerCase();\n    resolvedPlayers = resolvedPlayers.filter(player => {\n      const values = Object.values(playerValues[player.ckey]);\n      return values.some(value => typeof value === 'string' && value.toLowerCase().includes(lowerSearch));\n    });\n  }\n  if (sort) {\n    const sortColumn = columns.find(column => column.id === sort.id);\n    if (sortColumn) {\n      resolvedPlayers.sort((a, b) => {\n        let comparison = sortColumn.sorter(\n          playerValues[a.ckey][sortColumn.id],\n          playerValues[b.ckey][sortColumn.id],\n        );\n        if (sort.dir === SortDirection.Desc) {\n          comparison *= -1;\n        }\n        return comparison;\n      });\n    }\n  }\n  return (\n    <Window width={1100} height={640} title=\"Player Panel\">\n      <Window.Content scrollable>\n        <Input\n          autoFocus\n          mb={1}\n          placeholder=\"Search...\"\n          onInput={(_e, value: string) => setSearch(value)}\n          value={search}\n        />\n        <Table>\n          <Table.Row header>\n            {columns.map(column => {\n              const columnSort = sort?.id === column.id ? sort : null;\n              return (\n                <Table.Cell key={column.field}>\n                  <Header\n                    onSortClick={column.sorter ? () => setSort({\n                      dir: columnSort?.dir\n                        ? (columnSort.dir === SortDirection.Asc ? SortDirection.Desc : SortDirection.Asc)\n                        : SortDirection.Asc,\n                      id: column.id,\n                    }) : null}\n                    sortDirection={columnSort?.dir}\n                  >\n                    {column.name}\n                  </Header>\n                </Table.Cell>\n              );\n            })}\n          </Table.Row>\n          {resolvedPlayers.map(player => {\n            const { ckey } = player;\n            return (\n              <Table.Row key={ckey}>\n                {columns.map(column => {\n                  const {\n                    id,\n                    template,\n                  } = column;\n                  return (\n                    <Table.Cell key={id}>\n                      {template({\n                        act,\n                        column,\n                        row: player,\n                        value: playerValues[ckey][id],\n                      })}\n                    </Table.Cell>\n                  );\n                })}\n              </Table.Row>\n            );\n          })}\n        </Table>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend } from '../backend';\nimport { Flex, Section, Button, NumberInput, LabeledList, Divider } from '../components';\nimport { Window } from '../layouts';\nimport { PortableBasicInfo, PortableHoldingTank } from './common/PortableAtmos';\n\nexport const PortablePump = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    connected,\n    on,\n    direction_out,\n    holding,\n    pressure,\n    targetPressure,\n    maxPressure,\n    minRelease,\n    maxRelease,\n  } = data;\n\n  return (\n    <Window\n      width={305}\n      height={365}>\n      <Window.Content>\n        <PortableBasicInfo\n          connected={connected}\n          pressure={pressure}\n          maxPressure={maxPressure}>\n          <Divider />\n          <LabeledList>\n            <LabeledList.Item label=\"Pump Power\">\n              <Button\n                content={on ? 'On' : 'Off'}\n                color={on ? 'average' : 'default'}\n                onClick={() => act(\"toggle-power\")} />\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Target Pressure\">\n              <Button\n                onClick={() => act(\"set-pressure\", { targetPressure: minRelease })}\n                content=\"Min\" />\n              <NumberInput\n                animated\n                width=\"7em\"\n                value={targetPressure}\n                minValue={minRelease}\n                maxValue={maxRelease}\n                onChange={(e, newTargetPressure) => act(\"set-pressure\", { targetPressure: newTargetPressure })} />\n              <Button\n                onClick={() => act(\"set-pressure\", { targetPressure: maxRelease })}\n                content=\"Max\" />\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Pump Direction\">\n              <Button\n                content={direction_out ? 'Out' : 'In'}\n                color={direction_out ? 'yellow' : 'blue'}\n                onClick={() => act(\"toggle-pump\")} />\n            </LabeledList.Item>\n          </LabeledList>\n        </PortableBasicInfo>\n        <PortableHoldingTank\n          holding={holding}\n          onEjectTank={() => act(\"eject-tank\")} />\n      </Window.Content>\n    </Window>\n  );\n\n};\n","import { useBackend } from '../backend';\nimport { Flex, Section, Button, NumberInput, LabeledList, Divider } from '../components';\nimport { Window } from '../layouts';\nimport { PortableBasicInfo, PortableHoldingTank } from './common/PortableAtmos';\n\nexport const PortableScrubber = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    connected,\n    on,\n    holding,\n    pressure,\n    inletFlow,\n    maxPressure,\n    minFlow,\n    maxFlow,\n  } = data;\n\n  return (\n    <Window\n      width={305}\n      height={340}>\n      <Window.Content>\n        <PortableBasicInfo\n          connected={connected}\n          pressure={pressure}\n          maxPressure={maxPressure}>\n          <Divider />\n          <LabeledList>\n            <LabeledList.Item label=\"Scrubber Power\">\n              <Button\n                content={on ? 'On' : 'Off'}\n                color={on ? 'average' : 'default'}\n                onClick={() => act(\"toggle-power\")} />\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Inlet Flow\">\n              <Button\n                onClick={() => act(\"set-inlet-flow\", { inletFlow: minFlow })}\n                content=\"Min\" />\n              <NumberInput\n                animated\n                width=\"7em\"\n                value={inletFlow}\n                minValue={minFlow}\n                maxValue={maxFlow}\n                onChange={(e, newInletFlow) => act(\"set-inlet-flow\", { inletFlow: newInletFlow })} />\n              <Button\n                onClick={() => act(\"set-inlet-flow\", { inletFlow: maxFlow })}\n                content=\"Max\" />\n            </LabeledList.Item>\n          </LabeledList>\n        </PortableBasicInfo>\n        <PortableHoldingTank\n          holding={holding}\n          onEjectTank={() => act(\"eject-tank\")} />\n      </Window.Content>\n    </Window>\n  );\n\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { Box, Chart, LabeledList, Stack, Table, Tooltip } from '../../components';\nimport { formatPower } from '../../format';\nimport { PowerMonitorApcData, PowerMonitorApcItemData } from './type';\n\nconst apcState = {\n  [0]: 'Off',\n  [1]: (\n    <Box inline>\n      Off{' '}\n      <Box inline color=\"grey\">\n        (Auto)\n      </Box>\n    </Box>\n  ),\n  [2]: 'On',\n  [3]: (\n    <Box inline>\n      On{' '}\n      <Box inline color=\"grey\">\n        (Auto)\n      </Box>\n    </Box>\n  ),\n};\n\nconst apcCellState = {\n  [0]: 'Discharging',\n  [1]: 'Charging',\n  [2]: 'Charged',\n};\n\nexport const PowerMonitorApcGlobal = (_props, context) => {\n  const { data } = useBackend<PowerMonitorApcData>(context);\n\n  const availableHistory = data.history.map((v) => v[0]);\n  const availableHistoryData = availableHistory.map((v, i) => [i, v]);\n\n  const loadHistory = data.history.map((v) => v[1]);\n  const loadHistoryData = loadHistory.map((v, i) => [i, v]);\n\n  const max = Math.max(...availableHistory, ...loadHistory);\n\n  return (\n    <Stack fill>\n      <Stack.Item width=\"50%\">\n        <LabeledList>\n          <LabeledList.Item label=\"Total Power\">{formatPower(data.available)}</LabeledList.Item>\n        </LabeledList>\n        <Chart.Line\n          mt=\"5px\"\n          height=\"5em\"\n          data={availableHistoryData}\n          rangeX={[0, availableHistoryData.length - 1]}\n          rangeY={[0, max]}\n          strokeColor=\"rgba(1, 184, 170, 1)\"\n          fillColor=\"rgba(1, 184, 170, 0.25)\"\n        />\n      </Stack.Item>\n      <Stack.Item width=\"50%\">\n        <LabeledList>\n          <LabeledList.Item label=\"Total Load\">{formatPower(data.load)}</LabeledList.Item>\n        </LabeledList>\n        <Chart.Line\n          mt=\"5px\"\n          height=\"5em\"\n          data={loadHistoryData}\n          rangeX={[0, loadHistoryData.length - 1]}\n          rangeY={[0, max]}\n          strokeColor=\"rgba(1, 184, 170, 1)\"\n          fillColor=\"rgba(1, 184, 170, 0.25)\"\n        />\n      </Stack.Item>\n    </Stack>\n  );\n};\n\nexport const PowerMonitorApcTableHeader = () => {\n  return (\n    <>\n      <Table.Cell header>Area</Table.Cell>\n      <Tooltip content=\"Equipment\">\n        <Table.Cell header collapsing>\n          Eqp.\n        </Table.Cell>\n      </Tooltip>\n      <Tooltip content=\"Lighting\">\n        <Table.Cell header collapsing>\n          Lgt.\n        </Table.Cell>\n      </Tooltip>\n      <Tooltip content=\"Environment\">\n        <Table.Cell header collapsing>\n          Env.\n        </Table.Cell>\n      </Tooltip>\n      <Table.Cell header textAlign=\"right\">\n        Load\n      </Table.Cell>\n      <Table.Cell header textAlign=\"right\">\n        Cell Charge\n      </Table.Cell>\n      <Table.Cell header>Cell State</Table.Cell>\n    </>\n  );\n};\n\ntype PowerMonitorApcTableRowsProps = {\n  search: string;\n};\n\nexport const PowerMonitorApcTableRows = (props: PowerMonitorApcTableRowsProps, context) => {\n  const { search } = props;\n  const { data } = useBackend<PowerMonitorApcData>(context);\n\n  return (\n    <>\n      {data.apcs.map((apc) => (\n        <PowerMonitorApcTableRow key={apc[0]} apc={apc} search={search} />\n      ))}\n    </>\n  );\n};\n\ntype PowerMonitorApcTableRowProps = {\n  apc: PowerMonitorApcItemData;\n  search: string;\n};\n\nconst PowerMonitorApcTableRow = (props: PowerMonitorApcTableRowProps, context) => {\n  const { apc, search } = props;\n  // Indexed array to lower data transfer between byond and the window.\n  const [ref, equipment, lighting, environment, load, cellCharge, cellCharging] = apc;\n  const { data } = useBackend<PowerMonitorApcData>(context);\n  const name = data.apcNames[ref] ?? 'N/A';\n\n  if (search && !name.toLowerCase().includes(search.toLowerCase())) {\n    return null;\n  }\n\n  return (\n    <Table.Row>\n      <Table.Cell>{name}</Table.Cell>\n      <ApcState state={equipment} />\n      <ApcState state={lighting} />\n      <ApcState state={environment} />\n      <Table.Cell textAlign=\"right\" nowrap>\n        {formatPower(load)}\n      </Table.Cell>\n      {typeof cellCharge === 'number' ? (\n        <>\n          <Table.Cell textAlign=\"right\" nowrap>\n            {cellCharge}%\n          </Table.Cell>\n          <Table.Cell color={cellCharging > 0 ? (cellCharging === 1 ? 'average' : 'good') : 'bad'} nowrap>\n            {apcCellState[cellCharging]}\n          </Table.Cell>\n        </>\n      ) : (\n        <>\n          <Table.Cell />\n          <Table.Cell color=\"bad\">N/A</Table.Cell>\n        </>\n      )}\n    </Table.Row>\n  );\n};\n\ntype ApcStateProps = {\n  state: number;\n};\n\nconst ApcState = ({ state }: ApcStateProps) => {\n  return (\n    <Table.Cell nowrap color={state >= 2 ? 'good' : 'bad'}>\n      {apcState[state]}\n    </Table.Cell>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { Chart, LabeledList, Stack, Table } from '../../components';\nimport { formatPower } from '../../format';\nimport { PowerMonitorSmesData, PowerMonitorSmesItemData } from './type';\n\nexport const PowerMonitorSmesGlobal = (_props, context) => {\n  const { data } = useBackend<PowerMonitorSmesData>(context);\n\n  const availableHistory = data.history.map((v) => v[0]);\n  const availableHistoryData = availableHistory.map((v, i) => [i, v]);\n\n  const loadHistory = data.history.map((v) => v[1]);\n  const loadHistoryData = loadHistory.map((v, i) => [i, v]);\n\n  const max = Math.max(...availableHistory, ...loadHistory);\n\n  return (\n    <Stack fill>\n      <Stack.Item width=\"50%\">\n        <LabeledList>\n          <LabeledList.Item label=\"Engine Output\">{formatPower(data.available)}</LabeledList.Item>\n        </LabeledList>\n        <Chart.Line\n          mt=\"5px\"\n          height=\"5em\"\n          data={availableHistoryData}\n          rangeX={[0, availableHistoryData.length - 1]}\n          rangeY={[0, max]}\n          strokeColor=\"rgba(1, 184, 170, 1)\"\n          fillColor=\"rgba(1, 184, 170, 0.25)\"\n        />\n      </Stack.Item>\n      <Stack.Item width=\"50%\">\n        <LabeledList>\n          <LabeledList.Item label=\"SMES/PTL Draw\">{formatPower(data.load)}</LabeledList.Item>\n        </LabeledList>\n        <Chart.Line\n          mt=\"5px\"\n          height=\"5em\"\n          data={loadHistoryData}\n          rangeX={[0, loadHistoryData.length - 1]}\n          rangeY={[0, max]}\n          strokeColor=\"rgba(1, 184, 170, 1)\"\n          fillColor=\"rgba(1, 184, 170, 0.25)\"\n        />\n      </Stack.Item>\n    </Stack>\n  );\n};\n\nexport const PowerMonitorSmesTableHeader = (props, context) => {\n  return (\n    <>\n      <Table.Cell header>Area</Table.Cell>\n      <Table.Cell header>Stored Power</Table.Cell>\n      <Table.Cell header>Charging</Table.Cell>\n      <Table.Cell header>Input</Table.Cell>\n      <Table.Cell header>Output</Table.Cell>\n      <Table.Cell header>Active</Table.Cell>\n      <Table.Cell header>Load</Table.Cell>\n    </>\n  );\n};\n\ntype PowerMonitorSmesTableRowsProps = {\n  search: string;\n};\n\nexport const PowerMonitorSmesTableRows = (props: PowerMonitorSmesTableRowsProps, context) => {\n  const { search } = props;\n  const { data } = useBackend<PowerMonitorSmesData>(context);\n\n  return (\n    <>\n      {data.units.map((unit) => (\n        <PowerMonitorSmesTableRow key={unit[0]} unit={unit} search={search} />\n      ))}\n    </>\n  );\n};\n\ntype PowerMonitorSmesTableRowProps = {\n  unit: PowerMonitorSmesItemData;\n  search: string;\n};\n\nconst PowerMonitorSmesTableRow = (props: PowerMonitorSmesTableRowProps, context) => {\n  const { unit, search } = props;\n  // Indexed array to lower data transfer between byond and the window.\n  const [ref, stored, charging, input, output, online, load] = unit;\n  const { data } = useBackend<PowerMonitorSmesData>(context);\n  const name = data.unitNames[ref] ?? 'N/A';\n\n  if (search && !name.toLowerCase().includes(search.toLowerCase())) {\n    return null;\n  }\n\n  return (\n    <Table.Row>\n      <Table.Cell>{name}</Table.Cell>\n      <Table.Cell>{stored}%</Table.Cell>\n      <Table.Cell color={charging ? 'good' : 'bad'}>{charging ? 'Yes' : 'No'}</Table.Cell>\n      <Table.Cell>{formatPower(input)}</Table.Cell>\n      <Table.Cell>{formatPower(output)}</Table.Cell>\n      <Table.Cell color={online ? 'good' : 'bad'}>{online ? 'Yes' : 'No'}</Table.Cell>\n      <Table.Cell>{load ? formatPower(load) : 'N/A'}</Table.Cell>\n    </Table.Row>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend, useSharedState } from '../../backend';\nimport { Input, LabeledList, Section, Stack, Table } from '../../components';\nimport { Window } from '../../layouts';\nimport { PowerMonitorApcGlobal, PowerMonitorApcTableHeader, PowerMonitorApcTableRows } from './Apc';\nimport { PowerMonitorSmesGlobal, PowerMonitorSmesTableHeader, PowerMonitorSmesTableRows } from './Smes';\nimport { isDataForApc, isDataForSmes, PowerMonitorData } from './type';\n\nexport const PowerMonitor = (_props, context) => {\n  const { data } = useBackend<PowerMonitorData>(context);\n  const [search, setSearch] = useSharedState(context, 'search', '');\n\n  return (\n    <Window width={700} height={700} theme=\"retro-dark\">\n      <Window.Content>\n        <Stack vertical fill>\n          <Stack.Item>\n            <Section>\n              {isDataForApc(data) && <PowerMonitorApcGlobal />}\n              {isDataForSmes(data) && <PowerMonitorSmesGlobal />}\n            </Section>\n          </Stack.Item>\n\n          <Stack.Item>\n            <Section>\n              <LabeledList>\n                <LabeledList.Item label=\"Search\">\n                  <Input value={search} onInput={(e, value) => setSearch(value)} />\n                </LabeledList.Item>\n              </LabeledList>\n            </Section>\n          </Stack.Item>\n\n          <Stack.Item grow={1}>\n            <Section fill scrollable>\n              <Table>\n                <Table.Row header>{isDataForApc(data) && <PowerMonitorApcTableHeader />}</Table.Row>\n                {isDataForApc(data) && <PowerMonitorApcTableRows search={search} />}\n\n                <Table.Row header>{isDataForSmes(data) && <PowerMonitorSmesTableHeader />}</Table.Row>\n                {isDataForSmes(data) && <PowerMonitorSmesTableRows search={search} />}\n              </Table>\n            </Section>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { BooleanLike } from 'common/react';\n\nexport enum PowerMonitorType {\n  Apc = 'apc',\n  Smes = 'smes',\n}\n\nexport interface PowerMonitorData {\n  type: PowerMonitorType;\n}\n\nexport interface PowerMonitorApcData extends PowerMonitorData {\n  type: PowerMonitorType.Apc;\n  available: number;\n  load: number;\n  apcs: PowerMonitorApcItemData[];\n  apcNames: Record<string, string>;\n  history: [available: number, load: number][];\n}\n\n/**\n * Indexed array to lower data transfer between byond and the window.\n */\nexport type PowerMonitorApcItemData = [\n  ref: string,\n  equipment: number,\n  lighting: number,\n  environment: number,\n  load: number,\n  cellCharge?: number,\n  cellCharging?: number\n];\n\nexport interface PowerMonitorSmesData extends PowerMonitorData {\n  type: PowerMonitorType.Smes;\n  available: number;\n  load: number;\n  units: PowerMonitorSmesItemData[];\n  unitNames: Record<string, string>;\n  history: [available: number, load: number][];\n}\n\n/**\n * Indexed array to lower data transfer between byond and the window.\n */\nexport type PowerMonitorSmesItemData = [\n  ref: string,\n  stored: number,\n  charging: BooleanLike,\n  input: number,\n  output: number,\n  online: BooleanLike,\n  load?: number\n];\n\nexport interface PowerMonitorSmesStaticItemData {\n  name: string;\n}\n\nexport const isDataForApc = (data: PowerMonitorData): data is PowerMonitorApcData => data.type === PowerMonitorType.Apc;\nexport const isDataForSmes = (data: PowerMonitorData): data is PowerMonitorSmesData =>\n  data.type === PowerMonitorType.Smes;\n","/**\n * @file\n * @copyright 2020\n * @author Sovexe (https://github.com/Sovexe)\n * @license ISC\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Button, ColorBox, Divider, Knob, LabeledList, NoticeBox, ProgressBar, Section } from '../components';\nimport { formatMoney, formatPower, formatSiUnit } from '../format';\nimport { Window } from '../layouts';\n\nexport const PowerTransmissionLaser = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    lifetimeEarnings,\n    name = 'Power Transmission Laser',\n  } = data;\n  return (\n    <Window\n      title={name}\n      width=\"310\"\n      height=\"485\">\n      <Window.Content>\n        <Status />\n        <InputControls />\n        <OutputControls />\n        <NoticeBox success>\n          Earned Credits : {formatMoney(lifetimeEarnings)}\n        </NoticeBox>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst Status = (props, context) => {\n  const { data } = useBackend(context);\n  const {\n    capacity,\n    charge,\n    gridLoad,\n    totalGridPower,\n  } = data;\n\n  return (\n    <Section title=\"Status\">\n      <LabeledList>\n        <LabeledList.Item\n          label=\"Reserve Power\" >\n          {formatSiUnit(charge, 0, 'J')}\n        </LabeledList.Item>\n      </LabeledList>\n      <ProgressBar\n        mt=\"0.5em\"\n        mb=\"0.5em\"\n        ranges={{\n          good: [0.8, Infinity],\n          average: [0.5, 0.8],\n          bad: [-Infinity, 0.5],\n        }}\n        value={charge / capacity} />\n      <LabeledList>\n        <LabeledList.Item label=\"Grid Saturation\" />\n      </LabeledList>\n      <ProgressBar\n        mt=\"0.5em\"\n        ranges={{\n          good: [0.8, Infinity],\n          average: [0.5, 0.8],\n          bad: [-Infinity, 0.5],\n        }}\n        value={gridLoad / totalGridPower} />\n    </Section>\n  );\n};\n\nconst InputControls = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    isChargingEnabled,\n    excessPower,\n    isCharging,\n    inputLevel,\n    inputNumber,\n    inputMultiplier,\n  } = data;\n\n  return (\n    <Section title=\"Input Controls\">\n      <LabeledList>\n        <LabeledList.Item\n          label=\"Input Circuit\"\n          buttons={\n            <Button\n              icon=\"power-off\"\n              content={isChargingEnabled ? 'Enabled' : 'Disabled'}\n              color={isChargingEnabled ? 'green' : 'red'}\n              onClick={() => act('toggleInput')} />\n          } >\n          <Box\n            color={(isCharging && 'good')\n              || (isChargingEnabled && 'average')\n              || 'bad'}>\n            {(isCharging && 'Online')\n              || (isChargingEnabled && 'Idle')\n              || 'Offline'}\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Input Level\" >\n          {formatPower(inputLevel)}\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Optimal\" >\n          {formatPower(excessPower)}\n        </LabeledList.Item>\n      </LabeledList>\n      <Box mt=\"0.5em\">\n        <Knob\n          mr=\"0.5em\"\n          animated\n          size={1.25}\n          inline\n          step={5}\n          stepPixelSize={2}\n          minValue={0}\n          maxValue={999}\n          value={inputNumber}\n          onDrag={(e, setInput) => act('setInput', { setInput })} />\n        <Button\n          content={'W'}\n          selected={inputMultiplier===1}\n          onClick={() => act('inputW')} />\n        <Button\n          content={'kW'}\n          selected={inputMultiplier===10**3}\n          onClick={() => act('inputkW')} />\n        <Button\n          content={'MW'}\n          selected={inputMultiplier===10**6}\n          onClick={() => act('inputMW')} />\n        <Button\n          content={'GW'}\n          selected={inputMultiplier===10**9}\n          onClick={() => act('inputGW')} />\n        <Button\n          content={'TW'}\n          selected={inputMultiplier===10**12}\n          onClick={() => act('inputTW')} />\n      </Box>\n    </Section>\n  );\n};\n\nconst OutputControls = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    isEmagged,\n    isFiring,\n    isLaserEnabled,\n    outputLevel,\n    outputNumber,\n    outputMultiplier,\n  } = data;\n\n  return (\n    <Section title=\"Output Controls\">\n      <LabeledList>\n        <LabeledList.Item label=\"Laser Circuit\"\n          buttons={\n            <Button\n              icon=\"power-off\"\n              content={isLaserEnabled ? 'Enabled' : 'Disabled'}\n              color={isLaserEnabled ? 'green' : 'red'}\n              onClick={() => act('toggleOutput')} />\n          } >\n          <Box\n            color={(isFiring && 'good')\n              || (isLaserEnabled && 'average')\n              || 'bad'}>\n            {(isFiring && 'Online')\n              || (isLaserEnabled && 'Idle')\n              || 'Offline'}\n          </Box>\n        </LabeledList.Item>\n        <LabeledList.Item label=\"Output Level\">\n          {outputNumber < 0 ? '-' + formatPower(Math.abs(outputLevel))\n            : formatPower(outputLevel)}\n        </LabeledList.Item>\n      </LabeledList>\n      <Box mt=\"0.5em\">\n        <Knob\n          mr=\"0.5em\"\n          size={1.25}\n          animated\n          bipolar={isEmagged}\n          inline\n          step={5}\n          stepPixelSize={2}\n          minValue={isEmagged ? -999 : 0}\n          maxValue={999}\n          ranges={{ bad: [-Infinity, -1] }}\n          value={outputNumber}\n          onDrag={(e, setOutput) => act('setOutput', { setOutput })} />\n        <Button\n          content={'MW'}\n          selected={outputMultiplier===10**6}\n          onClick={() => act('outputMW')} />\n        <Button\n          content={'GW'}\n          selected={outputMultiplier===10**9}\n          onClick={() => act('outputGW')} />\n        <Button\n          content={'TW'}\n          selected={outputMultiplier===10**12}\n          onClick={() => act('outputTW')} />\n      </Box>\n    </Section>\n  );\n};\n","\n/**\n * Copyright (c) 2022 @Azrun\n * SPDX-License-Identifier: MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Button, NumberInput, Tooltip, Section } from '../components';\nimport { Window } from '../layouts';\nimport { ReagentList } from './common/ReagentInfo';\n\nexport const Precipitation = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    probability,\n    cooldown,\n    poolDepth,\n    containerData,\n  } = data;\n\n  return (\n    <Window\n      title=\"Precipitation\"\n      width={300}\n      height={425}>\n      <Window.Content scrollable>\n        <Section\n          title={\n            <Box\n              inline>\n              Precipitation\n            </Box>\n          }>\n          <Tooltip content=\"Cooldown for how fast ATOMs can be rained on.\">\n            <Box m={1}>\n              Cooldown\n              <NumberInput\n                value={cooldown}\n                width={4}\n                minValue={0}\n                onChange={(e, value) => act('set-cooldown', {\n                  value,\n                })}\n              />\n            </Box>\n          </Tooltip>\n          <Tooltip content=\"Chance of being rained on entering turf.\">\n            <Box m={1}>\n              Probability\n              <NumberInput\n                value={probability}\n                width={4}\n                minValue={0}\n                maxValue={100}\n                onChange={(e, value) => act('set-probability', {\n                  value,\n                })}\n              />\n            </Box>\n          </Tooltip>\n\n          <Tooltip content=\"Maximum fluid size/depth on the tile. (0 means no pooling will form)\">\n            <Box m={1}>\n              Maximum Pool Depth\n              <NumberInput\n                value={poolDepth}\n                width={4}\n                minValue={0}\n                maxValue={100}\n                onChange={(e, value) => act('set-poolDepth', {\n                  value,\n                })}\n              />\n            </Box>\n          </Tooltip>\n\n          <Section title=\"Reagents\">\n            <ReagentList container={containerData}\n              renderButtons={(reagent) => {\n                return (\n                  <>\n                    <Button\n                      px={0.75}\n                      mr={1.5}\n                      icon=\"filter\"\n                      color=\"red\"\n                      title=\"Isolate\"\n                      onClick={() => act('isolate', { container_id: containerData.id, reagent_id: reagent.id })}\n                    />\n                    <Button\n                      px={0.75}\n                      icon=\"times\"\n                      color=\"red\"\n                      title=\"Flush\"\n                      onClick={() => act('flush_reagent', { container_id: containerData.id, reagent_id: reagent.id })}\n                    />\n                  </>\n                );\n              }}\n            />\n            <Box m={1}>\n              <Button\n                ml={1}\n                onClick={() => act(\"add_reagents\")}\n              >\n                Add Reagents\n              </Button>\n              <Button\n                ml={1}\n                onClick={() => act(\"flush\")}\n              >\n                Clear Reagents\n              </Button>\n\n            </Box>\n          </Section>\n\n          <Section title=\"Particle\">\n            <Box m={1}>\n              <Button\n                fluid\n                onClick={() => act(\"particle_editor\")}\n              >\n                Edit Particle\n              </Button>\n            </Box>\n          </Section>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * Copyright (c) 2021 @Azrun\n * SPDX-License-Identifier: MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Button, Divider, Flex, LabeledList, NumberInput, ProgressBar, Section } from '../components';\nimport { Window } from '../layouts';\nimport { PortableBasicInfo } from './common/PortableAtmos';\n\nconst FanState = {\n  Off: 0,\n  In: 1,\n  Out: 2,\n};\n\nconst GaugeRanges = {\n  good: [1, Infinity],\n  average: [0.75, 1],\n  bad: [-Infinity, 0.75],\n};\n\nexport const Pressurizer = (props, context) => {\n  const { act, data } = useBackend(context);\n\n  const {\n    airSafe,\n    blastArmed,\n    blastDelay,\n    connected,\n    emagged,\n    fanState,\n    materialsCount,\n    materialsProgress,\n    maxArmDelay,\n    maxPressure,\n    maxRelease,\n    minArmDelay,\n    minBlastPercent,\n    minRelease,\n    pressure,\n    processRate,\n    releasePressure,\n  } = data;\n\n  const handleSetPressure = releasePressure => {\n    act(\"set-pressure\", {\n      releasePressure,\n    });\n  };\n\n  const handleSetBlastDelay = blastDelay => {\n    act(\"set-blast-delay\", {\n      blastDelay,\n    });\n  };\n\n  const handleSetProcessRate = processRate => {\n    act(\"set-process_rate\", {\n      processRate,\n    });\n  };\n\n  const handleSetFan = fanState => {\n    act(\"fan\", {\n      fanState,\n    });\n  };\n\n  const hasSufficientPressure = pressure < maxPressure * minBlastPercent;\n\n  const getArmedState = () => {\n    if (hasSufficientPressure) {\n      return \"Insufficient Pressure\";\n    }\n    if (!airSafe) {\n      return \"AIR UNSAFE - Locked\";\n    }\n    if (blastArmed) {\n      return \"Armed\";\n    }\n    return \"Ready\";\n  };\n\n  const handleEjectContents = () => {\n    act(\"eject-materials\");\n  };\n\n  const handleArmPressurizer = () => {\n    act(\"arm\");\n  };\n\n  return (\n    <Window\n      theme={emagged ? 'syndicate' : 'ntos'}\n      width={390}\n      height={380}>\n      <Window.Content>\n        <PortableBasicInfo\n          connected={connected}\n          pressure={pressure}\n          maxPressure={maxPressure}>\n          <Divider />\n          <LabeledList>\n            <LabeledList.Item label=\"Emergency Blast Release\">\n              <Button\n                fluid\n                textAlign=\"center\"\n                icon=\"circle\"\n                content={getArmedState()}\n                disabled={hasSufficientPressure || !airSafe}\n                color={blastArmed ? 'bad' : 'average'}\n                onClick={() => handleArmPressurizer()} />\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Delay\">\n              <Button onClick={() => handleSetBlastDelay(minArmDelay)}>\n                Min\n              </Button>\n              <NumberInput\n                animated\n                width=\"7em\"\n                value={blastDelay}\n                minValue={minArmDelay}\n                maxValue={maxArmDelay}\n                onChange={(e, targetDelay) => handleSetBlastDelay(targetDelay)} />\n              <Button onClick={() => handleSetBlastDelay(maxArmDelay)}>\n                Max\n              </Button>\n            </LabeledList.Item>\n          </LabeledList>\n          <Divider />\n          <LabeledList>\n            <LabeledList.Item label=\"Fan Status\">\n              <Button\n                color={fanState === FanState.Off ? 'bad' : 'default'}\n                onClick={() => handleSetFan(FanState.Off)}\n              >\n                Off\n              </Button>\n              <Button\n                selected={fanState === FanState.In}\n                onClick={() => handleSetFan(FanState.In)}\n              >\n                In\n              </Button>\n              <Button\n                selected={fanState === FanState.Out}\n                onClick={() => handleSetFan(FanState.Out)}\n              >\n                Out\n              </Button>\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Release Pressure\">\n              <Button onClick={() => handleSetPressure(minRelease)}>\n                Min\n              </Button>\n              <NumberInput\n                animated\n                width=\"7em\"\n                value={releasePressure}\n                minValue={minRelease}\n                maxValue={maxRelease}\n                onChange={(e, targetPressure) => handleSetPressure(targetPressure)} />\n              <Button onClick={() => handleSetPressure(maxRelease)}>\n                Max\n              </Button>\n            </LabeledList.Item>\n          </LabeledList>\n        </PortableBasicInfo>\n        <Section\n          title=\"Material Processing\"\n          buttons={(\n            <Button\n              icon=\"eject\"\n              disabled={materialsCount === 0}\n              onClick={() => handleEjectContents()}>\n              Eject\n            </Button>\n          )}>\n          <LabeledList>\n            <LabeledList.Item label=\"Speed\">\n              <Button\n                selected={processRate === 1}\n                onClick={() => handleSetProcessRate(1)}\n              >\n                1\n              </Button>\n              <Button\n                selected={processRate === 2}\n                onClick={() => handleSetProcessRate(2)}\n              >\n                2\n              </Button>\n              <Button\n                selected={processRate === 3}\n                onClick={() => handleSetProcessRate(3)}\n              >\n                3\n              </Button>\n              {!!emagged && (\n                <>\n                  <Button\n                    selected={processRate === 4}\n                    onClick={() => handleSetProcessRate(4)}\n                  >\n                    4\n                  </Button>\n                  <Button\n                    selected={processRate === 5}\n                    onClick={() => handleSetProcessRate(5)}\n                  >\n                    5\n                  </Button>\n                </>\n              )}\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Progress\">\n              <ProgressBar\n                ranges={GaugeRanges}\n                value={materialsProgress / 100} />\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { useBackend } from '../../backend';\nimport { AnimatedNumber, Box, Button, Knob, LabeledList, Section, Stack, Table } from '../../components';\nimport { formatFrequency } from '../../format';\nimport { Window } from '../../layouts';\nimport { RadioData, RadioWires } from './type';\n\nconst MIN_FREQ = 1441;\nconst MAX_FREQ = 1489;\n\nexport const Radio = (_props, context) => {\n  const { data, act } = useBackend<RadioData>(context);\n\n  const setFrequency = (value: number, finish: boolean) => {\n    act('set-frequency', { value, finish });\n  };\n\n  return (\n    <Window width=\"280\" height=\"400\" title={data.name}>\n      <Window.Content>\n        <Stack vertical fill>\n          <Stack.Item>\n            <Section>\n              <LabeledList>\n                <LabeledList.Item label=\"Microphone\">\n                  <Button.Checkbox checked={data.broadcasting} onClick={() => act('toggle-broadcasting')}>\n                    {data.broadcasting ? 'Engaged' : 'Disengaged'}\n                  </Button.Checkbox>\n                </LabeledList.Item>\n                <LabeledList.Item label=\"Speaker\">\n                  <Button.Checkbox checked={data.listening} onClick={() => act('toggle-listening')}>\n                    {data.listening ? 'Engaged' : 'Disengaged'}\n                  </Button.Checkbox>\n                </LabeledList.Item>\n                <LabeledList.Item label=\"Frequency\">\n                  <Stack align=\"center\">\n                    <Stack.Item>\n                      {!data.lockedFrequency && (\n                        <Knob\n                          animated\n                          value={data.frequency}\n                          minValue={MIN_FREQ}\n                          maxValue={MAX_FREQ}\n                          stepPixelSize={2}\n                          format={formatFrequency}\n                          onDrag={(_e: any, value: number) => setFrequency(value, false)}\n                          onChange={(_e: any, value: number) => setFrequency(value, true)}\n                        />\n                      )}\n                    </Stack.Item>\n                    <Stack.Item>\n                      <AnimatedNumber value={data.frequency} format={formatFrequency} />\n                    </Stack.Item>\n                  </Stack>\n                </LabeledList.Item>\n              </LabeledList>\n            </Section>\n          </Stack.Item>\n          {data.secureFrequencies.length > 0 && (\n            <Stack.Item grow={1}>\n              <Section title=\"Supplementary Channels\" fill scrollable>\n                <Table>\n                  <Table.Row header>\n                    <Table.Cell header>Channel</Table.Cell>\n                    <Table.Cell header>Frequency</Table.Cell>\n                    <Table.Cell header>Prefix</Table.Cell>\n                  </Table.Row>\n                  {data.secureFrequencies.map((freq) => (\n                    <Table.Row key={freq.frequency}>\n                      <Table.Cell>{freq.channel}</Table.Cell>\n                      <Table.Cell>{freq.frequency}</Table.Cell>\n                      <Table.Cell>\n                        <Box as=\"code\">{freq.sayToken}</Box>\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table>\n              </Section>\n            </Stack.Item>\n          )}\n          {!!data.modifiable && (\n            <Stack.Item>\n              <Section title=\"Access Panel\">\n                <LabeledList>\n                  <LabeledList.Item label=\"Green Wire\" labelColor=\"green\">\n                    <Button color=\"green\" onClick={() => act('toggle-wire', { wire: RadioWires.Transmit })}>\n                      {data.wires & RadioWires.Transmit ? 'Cut' : 'Mend'}\n                    </Button>\n                  </LabeledList.Item>\n                  <LabeledList.Item label=\"Red Wire\" labelColor=\"red\">\n                    <Button color=\"red\" onClick={() => act('toggle-wire', { wire: RadioWires.Receive })}>\n                      {data.wires & RadioWires.Receive ? 'Cut' : 'Mend'}\n                    </Button>\n                  </LabeledList.Item>\n                  <LabeledList.Item label=\"Blue Wire\" labelColor=\"blue\">\n                    <Button color=\"blue\" onClick={() => act('toggle-wire', { wire: RadioWires.Signal })}>\n                      {data.wires & RadioWires.Signal ? 'Cut' : 'Mend'}\n                    </Button>\n                  </LabeledList.Item>\n                </LabeledList>\n              </Section>\n            </Stack.Item>\n          )}\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { BooleanLike } from 'common/react';\n\nexport interface RadioData {\n  name: string;\n  broadcasting: BooleanLike;\n  listening: BooleanLike;\n  frequency: number;\n  frequencyFormatted: string;\n  lockedFrequency: BooleanLike;\n  secureFrequencies: {\n    channel: string;\n    frequency: number;\n    sayToken: string;\n  }[];\n  wires: number;\n  modifiable: BooleanLike;\n}\n\nexport enum RadioWires {\n  Signal = 1,\n  Receive = 2,\n  Transmit = 4,\n}\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { useBackend, useSharedState, useLocalState } from \"../backend\";\nimport { Button, Dimmer, Divider, Flex, NumberInput, Section, SectionEx, Stack } from '../components';\nimport { Window } from '../layouts';\nimport { Fragment } from 'inferno';\nimport { NoContainer, ReagentGraph, ReagentList } from './common/ReagentInfo';\n\n// Feel free to adjust this for performance\nconst extractablesPerPage = 25;\n\nconst clamp = (value, min, max) => Math.min(Math.max(min, value), max);\n\nexport const ReagentExtractor = (props, context) => {\n  const { data } = useBackend(context);\n\n  const { containersData } = data;\n\n  const { inserted, storage_tank_1, storage_tank_2 } = containersData;\n\n  return (\n    <Window\n      title=\"Reagent Extractor\"\n      width={500}\n      height={739}\n      theme=\"ntos\">\n      <Window.Content>\n        <Stack vertical fill>\n          {/* Insertable Container */}\n          <Stack.Item basis={19.5}>\n            <ReagentDisplay container={inserted} insertable />\n          </Stack.Item>\n          <Stack.Item grow>\n            <Stack fill>\n              {/* Extractables (produce) */}\n              <Stack.Item grow>\n                <ExtractableList />\n              </Stack.Item>\n              {/* Storage Tanks */}\n              <Stack.Item basis={18}>\n                <Stack vertical fill>\n                  <Stack.Item basis={19.5} grow>\n                    <ReagentDisplay container={storage_tank_1} />\n                  </Stack.Item>\n                  <Stack.Item basis={19.5}>\n                    <ReagentDisplay container={storage_tank_2} />\n                  </Stack.Item>\n                </Stack>\n              </Stack.Item>\n            </Stack>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst ReagentDisplay = (props, context) => {\n  const { act } = useBackend(context);\n  const { insertable } = props;\n  const container = props.container || NoContainer;\n  const [transferAmount, setTransferAmount] = useSharedState(context, `transferAmount_${container.id}`, 10);\n\n  return (\n    <SectionEx\n      capitalize\n      title={container.name}\n      buttons={\n        <>\n          <Button\n            title=\"Flush All\"\n            icon=\"times\"\n            color=\"red\"\n            disabled={!container.totalVolume}\n            onClick={() => act('flush', { container_id: container.id })}\n          />\n          {!insertable || (\n            <Button\n              title=\"Eject\"\n              icon=\"eject\"\n              disabled={!props.container}\n              onClick={() => act('ejectcontainer')}\n            />\n          )}\n        </>\n      }>\n      {!!props.container || (\n        <Dimmer>\n          <Button\n            icon=\"eject\"\n            fontSize={1.5}\n            onClick={() => act('insertcontainer')}\n            bold>\n            Insert Beaker\n          </Button>\n        </Dimmer>\n      )}\n      <ReagentGraph container={container} />\n      <ReagentList container={container}\n        renderButtons={(reagent) => {\n          return (\n            <>\n              <Button\n                px={0.75}\n                mr={1.5}\n                icon=\"filter\"\n                color=\"red\"\n                title=\"Isolate\"\n                onClick={() => act('isolate', { container_id: container.id, reagent_id: reagent.id })}\n              />\n              <Button\n                px={0.75}\n                icon=\"times\"\n                color=\"red\"\n                title=\"Flush\"\n                onClick={() => act('flush_reagent', { container_id: container.id, reagent_id: reagent.id })}\n              />\n            </>\n          );\n        }}\n      />\n      <Flex wrap justify=\"center\">\n        <Flex.Item grow />\n        <Flex.Item grow>\n          <Button\n            mb={0.5}\n            width={17}\n            textAlign=\"center\"\n            selected={container.selected}\n            title=\"Select Extraction and Transfer Target\"\n            icon={container.selected ? \"check-square-o\" : \"square-o\"}\n            onClick={() => act('extractto', { container_id: container.id })}\n          >\n            Select\n          </Button>\n        </Flex.Item>\n        <Flex.Item>\n          <Flex width={17}>\n            <Flex.Item grow>\n              <Button\n                disabled={container.selected}\n                onClick={() => act('chemtransfer', { container_id: container.id, amount: transferAmount })}\n              >\n                Transfer\n              </Button>\n              <NumberInput\n                value={transferAmount}\n                format={value => value + \"u\"}\n                minValue={1}\n                maxValue={500}\n                onDrag={(e, value) => setTransferAmount(value)}\n              />\n            </Flex.Item>\n            <Flex.Item>\n              <Button\n                disabled={container.selected}\n                onClick={() => act('chemtransfer', { container_id: container.id, amount: 500 })}\n              >\n                Transfer All\n              </Button>\n            </Flex.Item>\n          </Flex>\n        </Flex.Item>\n      </Flex>\n    </SectionEx>\n  );\n};\n\nconst ExtractableList = (props, context) => {\n  const { act, data } = useBackend(context);\n  const { autoextract } = data;\n  const extractables = data.ingredientsData || [];\n  const [page, setPage] = useLocalState(context, 'page', 1);\n  const totalPages = Math.max(1, Math.ceil(extractables.length / extractablesPerPage));\n  if (page < 1 || page > totalPages) setPage(clamp(page, 1, totalPages));\n  const extractablesOnPage = extractables.slice(extractablesPerPage*(page - 1),\n    extractablesPerPage*(page - 1) + extractablesPerPage);\n\n  return (\n    <Section fill\n      title=\"Extractable Items\"\n      buttons={(\n        <Button.Checkbox\n          checked={autoextract}\n          tooltip=\"Items will be extracted into the selected container automatically upon insertion.\"\n          onClick={() => act('autoextract')}>\n          Auto-Extract\n        </Button.Checkbox>\n      )}>\n      <Flex height=\"100%\" direction=\"column\">\n        <Flex.Item grow>\n          <Section scrollable fill>\n            {extractablesOnPage.map((extractable, index) => (\n              <Fragment key={extractable.id}>\n                <Flex>\n                  <Flex.Item grow>\n                    {extractable.name}\n                  </Flex.Item>\n                  <Flex.Item nowrap>\n                    <Button\n                      onClick={() => act('extractingredient', { ingredient_id: extractable.id })}\n                    >\n                      Extract\n                    </Button>\n                    <Button\n                      icon=\"eject\"\n                      title=\"Eject\"\n                      onClick={() => act('ejectingredient', { ingredient_id: extractable.id })}\n                    />\n                  </Flex.Item>\n                </Flex>\n                <Divider />\n              </Fragment>\n            ))}\n          </Section>\n        </Flex.Item>\n        {totalPages < 2 || (\n          <Flex.Item textAlign=\"center\" basis={1.5}>\n            <Button\n              icon=\"caret-left\"\n              title=\"Previous Page\"\n              disabled={page < 2}\n              onClick={() => setPage(page - 1)}\n            />\n            <NumberInput\n              value={page}\n              format={value => \"Page \" + value + \"/\" + totalPages}\n              minValue={1}\n              maxValue={totalPages}\n              stepPixelSize={15}\n              onChange={(e, value) => setPage(value)}\n            />\n            <Button\n              icon=\"caret-right\"\n              title=\"Next Page\"\n              disabled={page > totalPages - 1}\n              onClick={() => setPage(page + 1)}\n            />\n          </Flex.Item>\n        )}\n      </Flex>\n    </Section>\n  );\n};\n","import { Fragment } from 'inferno';\nimport { useBackend, useLocalState } from '../backend';\nimport { Button, Box, Divider, NumberInput, Section, Stack, Tooltip, Table } from '../components';\nimport { ButtonCheckbox } from '../components/Button';\nimport { Window } from '../layouts';\n\nexport const Rockbox = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    default_price,\n    autosell,\n  } = data;\n  const [takeAmount, setTakeAmount] = useLocalState(context, 'takeAmount', 1);\n  return (\n    <Window\n      title=\"Rockbox\"\n      width={375}\n      height={400}\n    >\n      <Window.Content>\n        <Stack vertical fill>\n          <Stack.Item>\n            <Section fill>\n              <Box>\n                {\"Amount to eject: \"}\n                <NumberInput\n                  value={takeAmount}\n                  width={4}\n                  minValue={1}\n                  onDrag={(e, value) => setTakeAmount(value)}\n                  onChange={(e, value) => setTakeAmount(value)}\n                />\n              </Box>\n              <Divider />\n              <Tooltip content=\"Default price for new ore entries.\"\n                position=\"bottom\">\n                <Box as=\"span\"> {/* necessary for tooltip to work */}\n                  {\"Default Price: \"}\n                  <NumberInput\n                    value={default_price}\n                    width={4}\n                    minValue={0}\n                    format={value => \"$\" + value}\n                    onChange={(e, value) => act('set-default-price', { newPrice: value })}\n                  />\n                </Box>\n              </Tooltip>\n              <Button.Checkbox\n                checked={autosell}\n                tooltip=\"Mark new ore entries for sale automatically.\"\n                onClick={() => act('toggle-auto-sell')}>\n                Auto-Sell\n              </Button.Checkbox>\n            </Section>\n          </Stack.Item>\n          <Stack.Item grow={1}>\n            <Section fill scrollable>\n              {data.ores.length\n                ? (\n                  <Box>\n                    {data.ores.map((currentOre) => (\n                      <Fragment key={currentOre.name}>\n                        <Tooltip\n                          position=\"bottom\"\n                          content={currentOre.stats}\n                        >\n                          <Table>\n                            <Table.Row>\n                              <Table.Cell>\n                                <Box>{`${currentOre.name}: ${currentOre.amount}`}</Box>\n                              </Table.Cell>\n                              <Table.Cell textAlign=\"right\">\n                                <Box>\n                                  {'Price: '}\n                                  <NumberInput\n                                    value={currentOre.price}\n                                    width={4}\n                                    minValue={0}\n                                    format={value => \"$\" + value}\n                                    onChange={(e, value) => act('set-ore-price', {\n                                      newPrice: value,\n                                      ore: currentOre.name,\n                                    })}\n                                  />\n                                  <ButtonCheckbox\n                                    content=\"For Sale\"\n                                    color={currentOre.forSale ? 'green' : 'red'}\n                                    checked={currentOre.forSale}\n                                    onClick={() => act('toggle-ore-sell-status', { ore: currentOre.name })}\n                                  />\n                                  <Button\n                                    color={currentOre.amount < takeAmount ? 'orange' : 'default'}\n                                    disabled={currentOre.amount === 0}\n                                    onClick={() => act('dispense-ore', {\n                                      ore: currentOre.name,\n                                      take: takeAmount,\n                                    })}\n                                  >\n                                    Eject\n                                  </Button>\n                                </Box>\n                              </Table.Cell>\n                            </Table.Row>\n                          </Table>\n                        </Tooltip>\n                        <Divider />\n                      </Fragment>\n                    ))}\n                  </Box>\n                )\n                : <Box>No ores stored</Box>}\n            </Section>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { useBackend, useLocalState } from '../backend';\nimport { Blink, Box, Button, Collapsible, Flex, Icon, Modal, NumberInput, ProgressBar, Section } from '../components';\nimport { Window } from '../layouts';\nimport { pluralize } from './common/stringUtils';\n\nconst DefaultSort = {\n  Fruit: 1,\n  Vegetable: 2,\n  Herb: 3,\n  Flower: 4,\n  Miscellaneous: 5,\n  Other: 6,\n};\n\nconst categorySorter = (a, b) => (\n  (DefaultSort[a.name] || DefaultSort.Other) - (DefaultSort[b.name] || DefaultSort.Other)\n);\n\nexport const SeedFabricator = (_props, context) => {\n  const { data } = useBackend(context);\n  const { canVend, isWorking, maxSeed, name, seedCount } = data;\n  const categories = data.seedCategories || [];\n\n  categories.sort(categorySorter);\n\n  const [dispenseAmount, setDispenseAmount] = useLocalState(context, 'dispenseAmount', 1);\n\n  return (\n    <Window\n      title={name}\n      width={500}\n      height={600}>\n      <Window.Content>\n        {!isWorking && (\n          <Modal textAlign=\"center\"\n            width={35}\n            height={10}\n            fontSize={3}\n            fontFamily=\"Courier\"\n            color=\"red\">\n            <Blink time={500}>\n              <Icon name=\"exclamation-triangle\" pr={1.5} />\n              MALFUNCTION\n              <Icon name=\"exclamation-triangle\" pl={1.5} />\n            </Blink>\n            CHECK WIRES\n          </Modal>\n        )}\n        <Section>\n          <Flex>\n            <Flex.Item bold pr={1}>\n              Dispense:\n            </Flex.Item>\n            <Flex.Item basis={6} grow>\n              <NumberInput\n                value={dispenseAmount}\n                format={value => value + pluralize(' seed', value)}\n                minValue={1}\n                maxValue={10}\n                onDrag={(_e, value) => setDispenseAmount(value)}\n              />\n            </Flex.Item>\n            <Flex.Item grow={2}>\n              <ProgressBar\n                value={Math.max(0, maxSeed - seedCount)}\n                maxValue={maxSeed}\n                ranges={{\n                  yellow: [5, Infinity],\n                  bad: [-Infinity, 5],\n                }}\n              >\n                <Icon name=\"bolt\" />\n              </ProgressBar>\n            </Flex.Item>\n          </Flex>\n        </Section>\n        <Section>\n          {!canVend && (\n            <Modal textAlign=\"center\"\n              width={25}\n              height={5}\n              fontSize={2}\n              fontFamily=\"Courier\"\n              color=\"yellow\">\n              <Blink interval={500} time={500}>\n                <Icon name=\"bolt\" pr={1.5} />\n              </Blink>\n              UNIT RECHARGING\n            </Modal>\n          )}\n          {categories.map(category => (\n            <SeedCategory\n              key={category.name}\n              category={category}\n              dispenseAmount={dispenseAmount} />\n          ))}\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst seedsSorter = (a, b) => a.name.localeCompare(b.name);\n\nconst SeedCategory = (props, context) => {\n  const { act } = useBackend(context);\n  const { category, dispenseAmount } = props;\n  const { name, seeds } = category;\n\n  if (!seeds) return null;\n\n  const sortedSeeds = seeds.sort(seedsSorter);\n\n  return (\n    <Collapsible\n      title={name}>\n      {sortedSeeds.map(seed => (\n        <Box key={seed.name} as=\"span\">\n          <Button\n            width=\"155px\"\n            height=\"32px\"\n            px={0}\n            m={0.25}\n            onClick={() => act('disp', { path: seed.path, amount: dispenseAmount })}\n          >\n            <Flex direction=\"row\" align=\"center\">\n              <Flex.Item>\n                {seed.img ? (\n                  <img\n                    style={{\n                      'vertical-align': 'middle',\n                      'horizontal-align': 'middle',\n                    }}\n                    height=\"32px\"\n                    width=\"32px\"\n                    src={`data:image/png;base64,${seed.img}`} />\n                ) : (\n                  <Icon\n                    style={{\n                      'vertical-align': 'middle',\n                      'horizontal-align': 'middle',\n                    }}\n                    height=\"32px\"\n                    width=\"32px\"\n                    name=\"question-circle-o\"\n                    pl=\"8px\"\n                    pt=\"4px\"\n                    fontSize=\"24px\" />\n                )}\n              </Flex.Item>\n              <Flex.Item\n                overflow=\"hidden\"\n                style={{ 'text-overflow': 'ellipsis' }}\n                title={seed.name}\n              >\n                {seed.name}\n              </Flex.Item>\n            </Flex>\n          </Button>\n        </Box>\n      ))}\n    </Collapsible>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author BenLubar (https://github.com/BenLubar)\n * @license ISC\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Button, Flex, Icon, LabeledList, Knob, ProgressBar, Section, TimeDisplay } from '../components';\nimport { Window } from '../layouts';\nimport { formatTime } from '../format';\nimport { HealthStat } from './common/HealthStat';\n\nconst damageNum = num => num <= 0 ? '0' : num.toFixed(1);\n\nconst OccupantStatus = {\n  Conscious: 0,\n  Unconscious: 1,\n  Dead: 2,\n};\n\nconst occupantStatuses = {\n  [OccupantStatus.Conscious]: {\n    name: 'Conscious',\n    color: 'good',\n    icon: 'check',\n  },\n  [OccupantStatus.Unconscious]: {\n    name: 'Unconscious',\n    color: 'average',\n    icon: 'bed',\n  },\n  [OccupantStatus.Dead]: {\n    name: 'Dead',\n    color: 'bad',\n    icon: 'skull',\n  },\n};\n\nexport const Sleeper = (props, context) => {\n  const { data, act } = useBackend(context);\n  const {\n    sleeperGone,\n    hasOccupant,\n    occupantStat,\n    health,\n    oxyDamage,\n    toxDamage,\n    burnDamage,\n    bruteDamage,\n    recharging,\n    rejuvinators,\n    isTiming,\n    time,\n    timeStarted,\n    timeNow,\n    maxTime,\n  } = data;\n\n  const curTime = Math.max(timeStarted\n    ? (time || 0) + timeStarted - timeNow\n    : (time || 0), 0);\n  const canInject = hasOccupant && !isTiming && !recharging && occupantStat < 2;\n  const occupantStatus = occupantStatuses[occupantStat];\n\n  return (\n    <Window\n      theme=\"ntos\"\n      width={440}\n      height={440}>\n      <Window.Content>\n        <Section title=\"Occupant Statistics\"\n          buttons={\n            <Button\n              icon=\"eject\"\n              align=\"center\"\n              color=\"good\"\n              disabled={!hasOccupant || !!isTiming}\n              onClick={() => act('eject')}>\n              Eject\n            </Button>\n          }>\n          {!hasOccupant && (sleeperGone ? \"Check connection to sleeper pod.\" : \"The sleeper is unoccupied.\")}\n          {!!hasOccupant && (\n            <LabeledList>\n              <LabeledList.Item label=\"Status\">\n                <Icon\n                  color={occupantStatus.color}\n                  name={occupantStatus.icon} />\n                {\" \"}{occupantStatus.name}\n              </LabeledList.Item>\n              <LabeledList.Item label=\"Overall Health\">\n                <ProgressBar\n                  value={health}\n                  ranges={{\n                    good: [0.9, Infinity],\n                    average: [0.5, 0.9],\n                    bad: [-Infinity, 0.5],\n                  }} />\n              </LabeledList.Item>\n              <LabeledList.Item label=\"Damage Breakdown\">\n                <HealthStat inline align=\"center\" type=\"oxy\" width={5}>\n                  {damageNum(oxyDamage)}\n                </HealthStat>\n                /\n                <HealthStat inline align=\"center\" type=\"toxin\" width={5}>\n                  {damageNum(toxDamage)}\n                </HealthStat>\n                /\n                <HealthStat inline align=\"center\" type=\"burn\" width={5}>\n                  {damageNum(burnDamage)}\n                </HealthStat>\n                /\n                <HealthStat inline align=\"center\" type=\"brute\" width={5}>\n                  {damageNum(bruteDamage)}\n                </HealthStat>\n              </LabeledList.Item>\n            </LabeledList>\n          )}\n        </Section>\n        {!!hasOccupant && (\n          <Section title=\"Detected Rejuvinators\"\n            buttons={\n              <Button\n                icon=\"syringe\"\n                align=\"center\"\n                color=\"good\"\n                disabled={!canInject}\n                onClick={() => act('inject')}>\n                Inject\n              </Button>\n            }>\n            <Section height={10} scrollable>\n              {!rejuvinators.length ? \"No rejuvinators detected in occupant's bloodstream.\" : (\n                <LabeledList>\n                  {rejuvinators.map(r => (\n                    <LabeledList.Item key={r.name} label={r.name}>\n                      <Icon name={!r.od || r.volume < r.od ? 'circle' : 'skull'} color={r.color} />\n                      {' ' + r.volume.toFixed(3)}\n                      {!!r.od && r.volume >= r.od && (\n                        <Box inline color=\"bad\" pl={1}>\n                          (Overdose!)\n                        </Box>\n                      )}\n                    </LabeledList.Item>\n                  ))}\n                </LabeledList>\n              )}\n            </Section>\n            <Box italic textAlign=\"center\" color=\"label\" mt={2}>\n              Use separate reagent scanner for complete analysis.\n            </Box>\n          </Section>\n        )}\n        <Section\n          title=\"Occupant Alarm Clock\"\n          buttons={\n            <Button\n              width={8}\n              icon=\"clock\"\n              align=\"center\"\n              color={isTiming ? 'bad' : 'good'}\n              disabled={!hasOccupant || occupantStat > 1 || time <= 0}\n              onClick={() => act('timer')}>\n              {isTiming ? 'Stop Timer' : 'Start Timer'}\n            </Button>\n          }\n        >\n          <Flex>\n            <Flex.Item>\n              <Knob\n                mr=\"0.5em\"\n                animated\n                size={1.25}\n                step={5}\n                stepPixelSize={2}\n                minValue={0}\n                maxValue={maxTime / 10}\n                value={curTime / 10}\n                onDrag={(e, targetValue) => act('time_add', { tp: targetValue - curTime / 10 })} />\n            </Flex.Item>\n            <Flex.Item>\n              <Box\n                p={1}\n                textAlign=\"center\"\n                backgroundColor=\"black\"\n                color=\"good\"\n                maxWidth=\"90px\"\n                width=\"90px\"\n                fontSize=\"20px\">\n                <TimeDisplay value={curTime}\n                  timing={!!isTiming}\n                  format={value => formatTime(value)} />\n              </Box>\n            </Flex.Item>\n            <Flex.Item shrink={1}>\n              <Box italic textAlign=\"center\" color=\"label\" pl={1}>\n                System will inject rejuvenators automatically\n                when occupant is in hibernation.\n              </Box>\n            </Flex.Item>\n          </Flex>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * Copyright (c) 2020 @ZeWaka\n * SPDX-License-Identifier: ISC\n */\n\nimport { useBackend } from '../backend';\nimport { BlockQuote, Button, Divider, Icon, NoticeBox, NumberInput, Stack } from '../components';\nimport { Window } from '../layouts';\n\nexport const SlotMachine = (_props, context) => {\n  const { data } = useBackend(context);\n  const { busy, scannedCard } = data;\n  return (\n    <Window\n      title=\"Slot Machine\"\n      width={375}\n      height={220}\n    >\n      <Window.Content>\n        {\n          !scannedCard\n            ? <InsertCard />\n            : (busy ? <BusyWindow /> : <SlotWindow />)\n        }\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst InsertCard = (_props, context) => {\n  const { act } = useBackend(context);\n  return (\n    <>\n      <NoticeBox danger>\n        You must insert your ID to continue!\n      </NoticeBox>\n      <Button\n        icon=\"id-card\"\n        onClick={() => act('insert_card')}\n      >\n        Insert ID\n      </Button>\n    </>\n  );\n};\n\nconst SlotWindow = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    account_funds,\n    money,\n    plays,\n    scannedCard,\n    wager,\n  } = data;\n\n  return (\n    <>\n      <NoticeBox success>\n        <marquee> Wager some credits! </marquee>\n      </NoticeBox>\n      <Stack vertical>\n        <Stack.Item>\n          <strong>Your card: </strong>\n          <Button\n            icon=\"eject\"\n            content={scannedCard}\n            tooltip=\"Pull Funds and Eject Card\"\n            tooltipPosition=\"bottom-end\"\n            onClick={() => act('eject')}\n          />\n        </Stack.Item>\n        <Stack.Item>\n          <Stack align=\"center\">\n            <Stack.Item>\n              <strong>Account Balance:</strong>\n            </Stack.Item>\n            <Stack.Item>\n              <Icon name=\"dollar-sign\" />\n              {' '}\n              {account_funds}\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                tooltip=\"Add Funds\"\n                tooltipPosition=\"bottom\"\n                onClick={() => act('cashin')}\n              >\n                Cash In\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                tooltip=\"Pull Funds\"\n                tooltipPosition=\"bottom\"\n                onClick={() => act('cashout')}\n              >\n                Cash Out\n              </Button>\n            </Stack.Item>\n          </Stack>\n        </Stack.Item>\n        <Stack.Item>\n          <Stack align=\"center\">\n            <Stack.Item>Amount Wagered:</Stack.Item>\n            <Stack.Item>\n              <NumberInput\n                minValue={20}\n                maxValue={1000}\n                value={wager}\n                format={value => \"$\" + value}\n                onDrag={(_e, value) => act('set_wager', { bet: value })}\n              />\n            </Stack.Item>\n          </Stack>\n        </Stack.Item>\n        <Stack.Item>\n          <Stack align=\"center\">\n            <Stack.Item>\n              <strong>Credits Remaining:</strong>\n            </Stack.Item>\n            <Stack.Item>\n              <Icon name=\"dollar-sign\" />\n              {' '}\n              {money}\n            </Stack.Item>\n          </Stack>\n        </Stack.Item>\n        <Stack.Item>\n          <BlockQuote>\n            {plays} attempts have been made today!\n          </BlockQuote>\n        </Stack.Item>\n        <Stack.Divider />\n        <Stack.Item>\n          <Button\n            icon=\"dice\"\n            tooltip=\"Pull the lever\"\n            tooltipPosition=\"right\"\n            onClick={() => act('play', { bet: wager })}\n          >\n            Play!\n          </Button>\n        </Stack.Item>\n      </Stack>\n    </>\n  );\n};\n\nconst BusyWindow = () => {\n  return (\n    <NoticeBox warning>\n      The Machine is busy, please wait!\n    </NoticeBox>\n  );\n};\n\n","/**\n * @file\n * @copyright 2020 Aleksej Komarov\n * @author Original spookydonut (https://github.com/spookydonut)\n * @author Changes Aleksej Komarov (https://github.com/stylemistake)\n * @author Changes Sovexe (https://github.com/Sovexe)\n * @license MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Button, Flex, LabeledList, ProgressBar, Section, Slider } from '../components';\nimport { formatPower, formatSiUnit } from '../format';\nimport { Window } from '../layouts';\n\n// Common power multiplier\nconst POWER_MUL = 1e3;\n\nexport const Smes = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    charge,\n    capacity,\n    inputAttempt,\n    inputting,\n    inputLevel,\n    inputLevelMax,\n    inputAvailable,\n    outputAttempt,\n    outputting,\n    outputLevel,\n    outputLevelMax,\n  } = data;\n  const inputState = (\n    ((charge / capacity) >= 1 && 'good')\n    || ((inputting && inputLevel) && 'average')\n    || 'bad'\n  );\n  const outputState = (\n    ((outputAttempt && outputting) && 'good')\n    || (charge > 0 && 'average')\n    || 'bad'\n  );\n  return (\n    <Window\n      width={340}\n      height={360}>\n      <Window.Content>\n        <Section title=\"Stored Energy\">\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Stored Energy\" >\n              {formatSiUnit(charge, 0, 'J')}\n            </LabeledList.Item>\n          </LabeledList>\n          <ProgressBar\n            mt=\"0.5em\"\n            value={charge / capacity}\n            ranges={{\n              good: [0.5, Infinity],\n              average: [0.15, 0.5],\n              bad: [-Infinity, 0.15],\n            }} />\n        </Section>\n        <Section title=\"Input\">\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Charge Mode\"\n              buttons={\n                <Button\n                  icon=\"power-off\"\n                  color={inputAttempt ? \"green\" : \"red\"}\n                  onClick={() => act('toggle-input')}>\n                  {inputAttempt ? 'On' : 'Off'}\n                </Button>\n              }>\n              <Box color={inputState}>\n                {((charge / capacity) >= 1 && 'Fully Charged')\n                  || ((inputAttempt && inputLevel && !inputting) && 'Initializing')\n                  || ((inputAttempt && inputLevel && inputting) && 'Charging')\n                  || ((inputAttempt && inputting) && 'Idle')\n                  || 'Not Charging'}\n              </Box>\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Target Input\">\n              <Flex inline width=\"100%\">\n                <Flex.Item>\n                  <Button\n                    icon=\"fast-backward\"\n                    disabled={inputLevel === 0}\n                    onClick={() => act('set-input', {\n                      target: 'min',\n                    })} />\n                  <Button\n                    icon=\"backward\"\n                    disabled={inputLevel === 0}\n                    onClick={() => act('set-input', {\n                      adjust: -10000,\n                    })} />\n                </Flex.Item>\n                <Flex.Item grow={1} mx={1}>\n                  <Slider\n                    value={inputLevel / POWER_MUL}\n                    fillValue={inputAvailable / POWER_MUL}\n                    minValue={0}\n                    maxValue={inputLevelMax / POWER_MUL}\n                    step={5}\n                    stepPixelSize={4}\n                    format={value => formatPower(value * POWER_MUL, 1)}\n                    onDrag={(e, value) => act('set-input', {\n                      target: value * POWER_MUL,\n                    })} />\n                </Flex.Item>\n                <Flex.Item>\n                  <Button\n                    icon=\"forward\"\n                    disabled={inputLevel === inputLevelMax}\n                    onClick={() => act('set-input', {\n                      adjust: 10000,\n                    })} />\n                  <Button\n                    icon=\"fast-forward\"\n                    disabled={inputLevel === inputLevelMax}\n                    onClick={() => act('set-input', {\n                      target: 'max',\n                    })} />\n                </Flex.Item>\n              </Flex>\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Available\">\n              {formatPower(inputAvailable)}\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n        <Section title=\"Output\">\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Output Mode\"\n              buttons={\n                <Button\n                  icon=\"power-off\"\n                  color={outputAttempt ? \"green\" : \"red\"}\n                  onClick={() => act('toggle-output')}>\n                  {outputAttempt ? 'On' : 'Off'}\n                </Button>\n              }>\n              <Box color={outputState}>\n                {((outputting && outputAttempt) && 'Enabled')\n                  || (outputAttempt && 'Idle')\n                  || (charge && 'Disabled')\n                  || 'No Charge'}\n              </Box>\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Target Output\">\n              <Flex inline width=\"100%\">\n                <Flex.Item>\n                  <Button\n                    icon=\"fast-backward\"\n                    disabled={outputLevel === 0}\n                    onClick={() => act('set-output', {\n                      target: 'min',\n                    })} />\n                  <Button\n                    icon=\"backward\"\n                    disabled={outputLevel === 0}\n                    onClick={() => act('set-output', {\n                      adjust: -10000,\n                    })} />\n                </Flex.Item>\n                <Flex.Item grow={1} mx={1}>\n                  <Slider\n                    value={outputLevel / POWER_MUL}\n                    minValue={0}\n                    maxValue={outputLevelMax / POWER_MUL}\n                    step={5}\n                    stepPixelSize={4}\n                    format={value => formatPower(value * POWER_MUL, 1)}\n                    onDrag={(e, value) => act('set-output', {\n                      target: value * POWER_MUL,\n                    })} />\n                </Flex.Item>\n                <Flex.Item>\n                  <Button\n                    icon=\"forward\"\n                    disabled={outputLevel === outputLevelMax}\n                    onClick={() => act('set-output', {\n                      adjust: 10000,\n                    })} />\n                  <Button\n                    icon=\"fast-forward\"\n                    disabled={outputLevel === outputLevelMax}\n                    onClick={() => act('set-output', {\n                      target: 'max',\n                    })} />\n                </Flex.Item>\n              </Flex>\n            </LabeledList.Item>\n            <LabeledList.Item label=\"Outputting\">\n              {formatPower(outputting)}\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { useBackend, useLocalState } from '../backend';\nimport { BlockQuote, Box, Button, Divider, Flex, Stack, Section } from '../components';\nimport { Window } from '../layouts';\n\nconst SBPurchaseEntry = (props) => {\n  const {\n    product: {\n      pname,\n      cost,\n      img,\n    },\n    disabled,\n    onClick,\n  } = props;\n\n  return (\n    <>\n      <Flex direction=\"row\" align=\"center\">\n        <Flex.Item>\n          <img\n            src={`data:image/png;base64,${img}`}\n            style={{\n              'vertical-align': 'middle',\n              'horizontal-align': 'middle',\n            }}\n          />\n        </Flex.Item>\n        <Flex.Item grow={1}>\n          <Box bold>\n            {pname}\n          </Box>\n          <Box>\n            {`Cost: $${cost}`}\n          </Box>\n        </Flex.Item>\n        <Flex.Item>\n          <Button onClick={onClick} disabled={disabled}>\n            Buy\n          </Button>\n        </Flex.Item>\n      </Flex>\n      <Divider />\n    </>\n  );\n};\n\nexport const SpendSpacebux = (_props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    purchasables,\n    held,\n    balance,\n    truebalance,\n  } = data;\n\n  const [filterAvailable, setFilterAvailable] = useLocalState(context, 'filter-available', false);\n\n  return (\n    <Window\n      resizable\n      title=\"Spend Spacebux\"\n      width={300}\n      height={600}>\n      <Window.Content scrollable>\n        <Section>\n          <BlockQuote>Purchase an item for the upcoming round. Earn more cash by completing rounds.\n            A purchased item will persist until you die or fail to escape the station.\n            If you have a Held Item, buying a new one will replace it.\n          </BlockQuote>\n          <Stack vertical fill>\n            { held ? (\n              <Stack.Item>\n                <Box>\n                  Held Item: {held}\n                </Box>\n              </Stack.Item>\n            )\n              : \"\"}\n            <Stack.Item>\n              <Section>\n                <Flex direction=\"row\" align=\"center\">\n                  <Flex.Item grow={1}>\n                    <Box>\n                      Balance: ${balance}\n                    </Box>\n                  </Flex.Item>\n                  <Flex.Item>\n                    <Button.Checkbox checked={filterAvailable} onClick={() => setFilterAvailable(!filterAvailable)}>\n                      Filter Affordable\n                    </Button.Checkbox>\n                  </Flex.Item>\n                </Flex>\n              </Section>\n            </Stack.Item>\n            <Stack.Item>\n              {purchasables\n                .filter(({ cost }) => !(filterAvailable && truebalance < cost))\n                .map(purchase => {\n                  const {\n                    pname,\n                    cost,\n                  } = purchase;\n                  return (\n                    <SBPurchaseEntry\n                      key={pname}\n                      product={purchase}\n                      disabled={truebalance < cost}\n                      onClick={() => act('purchase', { pname })}\n                    />\n                  );\n                })}\n            </Stack.Item>\n          </Stack>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2020\n * @author Sovexe (https://github.com/Sovexe)\n * @license ISC\n */\n\nimport { useBackend } from '../backend';\nimport { Box, Chart, LabeledList, Section, Divider } from '../components';\nimport { formatPower, formatSiUnit } from '../format';\nimport { Window } from '../layouts';\n\nexport const TEG = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    output,\n    history,\n    hotCircStatus,\n    hotInletTemp,\n    hotOutletTemp,\n    hotInletPres,\n    hotOutletPres,\n    coldCircStatus,\n    coldInletTemp,\n    coldOutletTemp,\n    coldInletPres,\n    coldOutletPres,\n  } = data;\n  const historyData = history.map((value, i) => [i, value]);\n  const historyMax = Math.max(...history);\n  const formatTemperature = temperature =>\n    `${temperature >= 1000 ? temperature.toExponential(3) : temperature} K`;\n  return (\n    <Window\n      height=\"520\"\n      width=\"300\" >\n      <Window.Content>\n        <Section title=\"Status\">\n          <LabeledList>\n            <LabeledList.Item label=\"Output History\" />\n          </LabeledList>\n          <Chart.Line\n            height=\"5em\"\n            data={historyData}\n            rangeX={[0, historyData.length - 1]}\n            rangeY={[0, historyMax]}\n            strokeColor=\"rgba(1, 184, 170, 1)\"\n            fillColor=\"rgba(1, 184, 170, 0.25)\" />\n          <Divider />\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Energy Output\"\n              textAlign=\"right\" >\n              {formatPower(output)}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Hot Gas Circulator\"\n              textAlign=\"right\" >\n              <Box color={(hotCircStatus && hotInletTemp && 'good')\n                  || (hotCircStatus && 'average')\n                  || 'bad'} >\n                {(hotCircStatus && hotInletTemp && 'OK')\n                  || (hotCircStatus && 'Idle')\n                  || 'ERROR'}\n              </Box>\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Cold Gas Circulator\"\n              textAlign=\"right\" >\n              <Box color={(coldCircStatus && coldInletTemp && 'good')\n                  || (coldCircStatus && 'average')\n                  || 'bad'} >\n                {(coldCircStatus && coldInletTemp && 'OK')\n                  || (coldCircStatus && 'Idle')\n                  || 'ERROR'}\n              </Box>\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n        <Section title=\"Hot Loop\">\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Inlet Temp\"\n              textAlign=\"right\" >\n              {formatTemperature(hotInletTemp)}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Outlet Temp\"\n              textAlign=\"right\" >\n              {formatTemperature(hotOutletTemp)}\n            </LabeledList.Item>\n            <LabeledList.Divider />\n            <LabeledList.Item\n              label=\"Inlet Pressure\"\n              textAlign=\"right\" >\n              {formatSiUnit(Math.max(hotInletPres, 0), 1, 'Pa')}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Outlet Pressure\"\n              textAlign=\"right\" >\n              {formatSiUnit(hotOutletPres, 1, 'Pa')}\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n        <Section title=\"Cold Loop\">\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Inlet Temp\"\n              textAlign=\"right\" >\n              {formatTemperature(coldInletTemp)}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Outlet Temp\"\n              textAlign=\"right\" >\n              {formatTemperature(coldOutletTemp)}\n            </LabeledList.Item>\n            <LabeledList.Divider />\n            <LabeledList.Item\n              label=\"Inlet Pressure\"\n              textAlign=\"right\" >\n              {formatSiUnit(Math.max(coldInletPres, 0), 1, 'Pa')}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Outlet Pressure\"\n              textAlign=\"right\" >\n              {formatSiUnit(coldOutletPres, 1, 'Pa')}\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * Copyright (c) 2020 @actioninja\n * Minor changes by Aleksej Komarov\n * SPDX-License-Identifier: MIT\n */\n\nimport { useBackend } from '../backend';\nimport { Button, LabeledList, Section } from '../components';\nimport { Window } from '../layouts';\n\nexport const TankDispenser = (props, context) => {\n  const { act, data } = useBackend(context);\n  return (\n    <Window width={280} height={105}>\n      <Window.Content>\n        <Section>\n          <LabeledList>\n            <LabeledList.Item\n              label=\"Plasma\"\n              buttons={(\n                <Button\n                  icon={data.plasma ? 'circle' : 'circle-o'}\n                  content=\"Dispense\"\n                  disabled={!data.plasma}\n                  onClick={() => act('dispense-plasma')} />\n              )}>\n              {data.plasma}\n            </LabeledList.Item>\n            <LabeledList.Item\n              label=\"Oxygen\"\n              buttons={(\n                <Button\n                  icon={data.oxygen ? 'circle' : 'circle-o'}\n                  content=\"Dispense\"\n                  disabled={!data.oxygen}\n                  onClick={() => act('dispense-oxygen')} />\n              )}>\n              {data.oxygen}\n            </LabeledList.Item>\n          </LabeledList>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * Copyright (c) 2022 @Azrun\n * SPDX-License-Identifier: MIT\n */\n\nimport { toFixed } from 'common/math';\nimport { useBackend } from '../backend';\nimport { Box, Button, Flex, Section } from '../components';\nimport { Window } from '../layouts';\n\nexport const TerrainChoice = props => {\n  const {\n    typeData,\n    terrain,\n    onTerrainValue,\n  } = props;\n\n  return (\n    <Flex.Item mb={1}>\n      <Flex direction=\"column\">\n        <Section title=\"Types\">\n          {Object.keys(typeData).map((terrainType, buttonIndex) => (\n            <Flex.Item mb={1} key={buttonIndex}>\n              <Button fluid\n                selected={terrain === terrainType}\n                onClick={() => onTerrainValue(terrainType)}>\n                {typeData[terrainType].name}\n              </Button>\n            </Flex.Item>\n          ))}\n        </Section>\n      </Flex>\n    </Flex.Item>\n  );\n};\n\nexport const TerrainVehicleChoice = props => {\n  const {\n    fabricator,\n    cars,\n    onToggleFabricators,\n    onToggleCars,\n  } = props;\n\n  return (\n    <Flex.Item>\n      <Section title=\"Vehicle Options\">\n        <Button.Checkbox\n          checked={fabricator}\n          content={\"Add Subs to Fabricators\"}\n          onClick={() => onToggleFabricators()}\n        /><br />\n        <Button.Checkbox\n          checked={cars}\n          content={\"Convert some Cars\"}\n          onClick={() => onToggleCars()}\n        />\n      </Section>\n    </Flex.Item>\n  );\n};\n\nexport const TerrainToggles = props => {\n  const {\n    terrain,\n    typeData,\n    activeToggles,\n    onToggle,\n  } = props;\n\n  return (\n    terrain && typeData[terrain].toggles?.length ? (\n      <Section title=\"Toggles\" >\n        {typeData[terrain].toggles.map((toggleOption, buttonIndex) => (\n          <Flex.Item mb={1} key={buttonIndex}>\n            <Button.Checkbox\n              checked={activeToggles[toggleOption]}\n              content={toggleOption}\n              onClick={() => onToggle(toggleOption)}\n            />\n          </Flex.Item>\n        ))}\n      </Section>\n    )\n      : \"\"\n  );\n};\n\nexport const TerrainOptions = props => {\n  const {\n    terrain,\n    typeData,\n    activeOptions,\n    onSelect,\n  } = props;\n\n  return (\n    terrain && typeData[terrain].options && Object.keys(typeData[terrain].options).length ? (\n      Object.keys(typeData[terrain].options).map((toggleType, sectionIndex) => (\n        <Section title={toggleType} key={sectionIndex}>\n          {typeData[terrain].options[toggleType].map((toggleOption, buttonIndex) => (\n            <Flex.Item mb={1} key={buttonIndex}>\n              <Button fluid\n                selected={activeOptions[toggleType] === toggleOption}\n                onClick={() => onSelect(toggleType, toggleOption)}\n              >\n                {toggleOption}\n              </Button>\n            </Flex.Item>\n          ))}\n        </Section>\n      ))\n    )\n      : \"\"\n  );\n};\n\n\nexport const Terrainify = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    typeData,\n    terrain,\n    fabricator,\n    cars,\n    locked,\n    activeOptions,\n    activeToggles,\n  } = data;\n\n  const handleToggleCars= () => {\n    act(\"cars\");\n  };\n\n  const handleToggleFabs = () => {\n    act(\"fabricator\");\n  };\n\n  const handleToggleGeneric = toggle => {\n    act(\"toggle\", {\n      toggle,\n    });\n  };\n\n  const handleOptionGeneric = (key, value) => {\n    act(\"option\", {\n      key: key,\n      value: value,\n    });\n  };\n\n  const handleSetTerrain = terrain => {\n    act(\"terrain\", {\n      terrain,\n    });\n  };\n\n  return (\n    <Window\n      title=\"Terrainify\"\n      width={500}\n      height={600}>\n      <Window.Content scrollable>\n        <Section\n          title={\n            <Box\n              inline>\n              Terrainify\n            </Box>\n          }>\n          <Flex direction=\"row\">\n            <TerrainChoice\n              typeData={typeData}\n              terrain={terrain}\n              onTerrainValue={handleSetTerrain} />\n            <Flex.Item ml={2} />\n            <Flex.Item ml={1}>\n              <Section title=\"Description\" >\n                {!terrain ? \"...\" : typeData[terrain].description}\n              </Section>\n              <TerrainVehicleChoice\n                fabricator={fabricator}\n                cars={cars}\n                onToggleFabricators={handleToggleFabs}\n                onToggleCars={handleToggleCars} />\n              <TerrainToggles\n                typeData={typeData}\n                terrain={terrain}\n                activeToggles={activeToggles}\n                onToggle={handleToggleGeneric}\n              />\n              <TerrainOptions\n                typeData={typeData}\n                terrain={terrain}\n                activeOptions={activeOptions}\n                onSelect={handleOptionGeneric} />\n            </Flex.Item>\n          </Flex>\n          <Box m={1}>\n            <Button\n              fluid\n              disabled={locked}\n              onClick={() => act(\"activate\")}\n            >\n              Transform Station\n            </Button>\n          </Box>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author Stonepillar (https://github.com/stonepillars)\n * @license ISC\n */\n\nimport { useBackend } from \"../backend\";\nimport { Window } from \"../layouts\";\nimport { NoticeBox, Stack, Section, Button } from \"../components\";\n\ninterface TransitStopData {\n  /** The registry key of the stop */\n  id: string\n  /** Whether the stop is disabled */\n  disabled: number\n  /** What to show on the button */\n  label: string\n}\n\ninterface TransitTerminalData {\n  /** Stops available to the vehicle */\n  stops: TransitStopData[]\n  /** Flag for if the vehicle is in transit */\n  in_transit: number\n  /** Flag for if the machine is in an illegal state. */\n  panic: number\n}\n\nexport const TransitTerminal = (_props, context) => {\n  const { act, data } = useBackend<TransitTerminalData>(context);\n  const { stops, in_transit, panic } = data;\n\n  return (\n    <Window\n      resizable\n      height={400}\n      width={200}>\n      <Window.Content>\n        <Section>\n          <Stack fill vertical>\n            { panic ? (\n              <NoticeBox danger>\n                Something went wrong. Call 1-800-CODER for Support.\n              </NoticeBox>)\n              : \"\"}\n            { in_transit ? (\n              <NoticeBox warning>\n                The vehicle is moving. Please wait.\n              </NoticeBox>\n            )\n              : \"\"}\n            { stops.map(({ id, disabled, label }) => (\n              <Button\n                key={id}\n                disabled={disabled || in_transit}\n                onClick={() => act(\"move\", { stopname: id })}>\n                {label}\n              </Button>\n            ))}\n          </Stack>\n        </Section>\n      </Window.Content>\n    </Window>\n  );\n};\n","import { Window } from '../layouts';\nimport { useBackend } from '../backend';\nimport { Button, Section, Box, Stack } from '../components';\nimport { randInt } from './common/mathUtils';\nimport { glitch } from './common/stringUtils';\n\nconst generate_kill = (number) => {\n  let out = [];\n  for (let i = 0; i < number; i++) {\n    if (Math.random() > 0.3) {\n      out.push(\"Kill. \");\n    } else {\n      out.push(\"KILL. \");\n    }\n  }\n  return out.map((kill, index) => (<Box inline preserveWhitespace fontSize={randInt(11, 25) + \"px\"} key={index}>{kill}</Box>));\n};\n\nexport const TurretControl = (props, context) => {\n  const { act, data } = useBackend(context);\n  const {\n    enabled,\n    lethal,\n    emagged,\n    area,\n    locked,\n  } = data;\n\n  const set_lethal = (value) => {\n    act(\"setLethal\", { \"lethal\": value });\n  };\n  const set_enabled = (value) => {\n    act(\"setEnabled\", { \"enabled\": value });\n  };\n  return (\n    <Window\n      title={emagged ? \"FATAL ERROR\" : `Turret control (${area})`}\n      theme={emagged ? 'syndicate' : 'ntos'}\n      width={400}\n      height={160}\n    >\n      <Window.Content align=\"center\">\n        <Box py=\"6px\">\n          {(!emagged && !locked) && (\n            <Box fontSize=\"16px\">\n              <Section width=\"70%\">\n                <Stack>\n                  <Stack.Item width=\"50%\">\n                    <Button icon=\"exclamation-triangle\" fluid selected={enabled} onClick={() => set_enabled(true)}>Enabled</Button>\n                  </Stack.Item>\n                  <Stack.Item width=\"50%\">\n                    <Button icon=\"power-off\" fluid selected={!enabled} onClick={() => set_enabled(false)}>Disabled</Button>\n                  </Stack.Item>\n                </Stack>\n              </Section>\n              <Section width=\"70%\">\n                <Stack>\n                  <Stack.Item width=\"50%\">\n                    <Button icon=\"bolt\" fluid selected={!lethal} onClick={() => set_lethal(false)}>Stun</Button>\n                  </Stack.Item>\n                  <Stack.Item width=\"50%\">\n                    <Button icon=\"skull-crossbones\" fluid selected={lethal} onClick={() => set_lethal(true)}>Lethal</Button>\n                  </Stack.Item>\n                </Stack>\n              </Section>\n            </Box>\n          )}\n          {!emagged && !!locked && (\n            <Section>Panel locked, swipe ID card to unlock.</Section>\n          )}\n          {!!emagged && (\n            <Box py=\"20px\">\n              <Box align=\"center\" fontFamily=\"Courier New\">\n                {glitch(\"ERROR: UNABLE TO READ AUTHORIZATION\", 12)}\n              </Box>\n              <Box align=\"center\" style={{ \"font-size\": \"20px\" }}>\n                {generate_kill(7)}\n              </Box>\n            </Box>\n          )}\n        </Box>\n      </Window.Content>\n    </Window>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Luxizzle (https://github.com/Luxizzle)\n * @license MIT\n */\n\nimport { toTitleCase } from 'common/string';\nimport { useBackend, useLocalState } from '../../backend';\nimport { Box, Button, Collapsible, LabeledList, Section, Stack, Table } from '../../components';\nimport { Window } from '../../layouts';\nimport { WeaponVendorData, WeaponVendorStockData } from './type';\n\nimport { pluralize } from '../common/stringUtils';\n\nexport const WeaponVendor = (_props, context) => {\n  const { data } = useBackend<WeaponVendorData>(context);\n  const [filterAvailable, setFilterAvailable] = useLocalState(context, 'filter-available', false);\n\n  return (\n    <Window width={550} height={700}>\n      <Window.Content>\n        <Stack className=\"WeaponVendor\" vertical fill>\n          <Stack.Item>\n            <Section fill>\n              <LabeledList>\n                <LabeledList.Item label=\"Balance\">\n                  {Object.entries(data.credits).map(([name, value], index) => (\n                    <Box key={name} inline mr=\"5px\" className={`WeaponVendor__Credits--${name}`}>\n                      {value} {name} {pluralize('credit', value)}\n                      {index + 1 !== Object.keys(data.credits).length ? ', ' : ''}\n                    </Box>\n                  ))}\n                </LabeledList.Item>\n              </LabeledList>\n            </Section>\n          </Stack.Item>\n          <Stack.Item grow={1}>\n            <Section\n              fill\n              scrollable\n              title=\"Materiel\"\n              buttons={\n                <Button.Checkbox checked={filterAvailable} onClick={() => setFilterAvailable(!filterAvailable)}>\n                  Filter Available\n                </Button.Checkbox>\n              }>\n              {Object.keys(data.credits).map((category) => (\n                <StockCategory key={category} category={category} filterAvailable={filterAvailable} />\n              ))}\n            </Section>\n          </Stack.Item>\n        </Stack>\n      </Window.Content>\n    </Window>\n  );\n};\n\ntype StockCategoryProps = {\n  category: string;\n  filterAvailable: boolean;\n};\n\nconst StockCategory = (props: StockCategoryProps, context) => {\n  const { category, filterAvailable } = props;\n  const { data } = useBackend<WeaponVendorData>(context);\n\n  let stock = data.stock.filter((stock) => stock.category === category);\n  if (filterAvailable) {\n    stock = stock.filter((stock) => stock.cost <= data.credits[stock.category]);\n  }\n\n  if (stock.length === 0) {\n    return null;\n  }\n\n  return (\n    <Collapsible className={`WeaponVendor__Category--${category}`} title={toTitleCase(category)} open color={category}>\n      <Table>\n        {data.stock\n          .filter((stock) => stock.category === category)\n          .map((stock) => (\n            <Stock key={stock.name} stock={stock} />\n          ))}\n      </Table>\n    </Collapsible>\n  );\n};\n\ntype StockProps = {\n  stock: WeaponVendorStockData;\n};\n\nconst Stock = ({ stock }: StockProps, context) => {\n  const { data, act } = useBackend<WeaponVendorData>(context);\n\n  return (\n    <Table.Row className=\"WeaponVendor__Row\" opacity={stock.cost > data.credits[stock.category] ? 0.5 : 1}>\n      <Table.Cell className=\"WeaponVendor__Cell\" py=\"5px\">\n        <Box mb=\"5px\" bold>\n          {stock.name}\n        </Box>\n        <Box>{stock.description}</Box>\n      </Table.Cell>\n      <Table.Cell className=\"WeaponVendor__Cell\" py=\"5px\" textAlign=\"right\">\n        <Button\n          disabled={stock.cost > data.credits[stock.category]}\n          color={stock.category}\n          onClick={() => act('redeem', { ref: stock.ref })}>\n          Redeem {stock.cost} {pluralize('credit', stock.cost)}\n        </Button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n","import { Box } from '../../components';\n\nexport const BeakerContents = props => {\n  const { beakerLoaded, beakerContents } = props;\n  return (\n    <Box>\n      {!beakerLoaded && (\n        <Box color=\"label\">\n          No beaker loaded.\n        </Box>\n      ) || beakerContents.length === 0 && (\n        <Box color=\"label\">\n          Beaker is empty.\n        </Box>\n      )}\n      {beakerContents.map(chemical => (\n        <Box key={chemical.name} color=\"label\">\n          {chemical.volume} units of {chemical.name}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","/**\n* @file\n* @copyright 2020\n* @author ThePotato97 (https://github.com/ThePotato97)\n* @license ISC\n*/\n\nimport { classes } from 'common/react';\nimport { COLORS } from '../../constants';\nimport { computeBoxClassName, Box } from '../../components/Box';\n\n/*\n * A box that applies a color to its contents depending on the damage type.\n * Accepted types: oxy, toxin, burn, brute.\n */\nexport const HealthStat = props => {\n  const {\n    type,\n    children,\n    className,\n    ...rest\n  } = props;\n  rest.color = COLORS.damageType[type] & COLORS.damageType[type];\n  return (\n    <Box\n      {...rest}\n      className={classes([\n        'HealthStat',\n        className,\n        computeBoxClassName(rest),\n      ])}\n      color={COLORS.damageType[type]}>\n      {children}\n    </Box>\n  );\n};\n","/**\n * @file\n * @copyright 2021\n * @author Mordent (https://github.com/mordent-goonstation)\n * @license ISC\n */\n\nimport { classes } from 'common/react';\nimport { Input, Placeholder, Stack } from '../../components';\n\ninterface ListSearchProps {\n  autoFocus?: boolean,\n  className?: string,\n  currentSearch: string,\n  noResultsPlaceholder?: string,\n  onSearch: (value: string) => void,\n  onSelect: (value: string) => void,\n  options: string[],\n  searchPlaceholder?: string,\n  selectedOption: string,\n}\n\nexport const ListSearch = (props: ListSearchProps) => {\n  const {\n    autoFocus,\n    className,\n    currentSearch,\n    noResultsPlaceholder,\n    onSearch,\n    onSelect,\n    options,\n    searchPlaceholder = 'Search...',\n    selectedOption = null,\n  } = props;\n  const handleSearch = (_e, value: string) => {\n    onSearch(value);\n  };\n  const cn = classes(['list-search-interface', className]);\n  return (\n    <Stack className={cn} vertical>\n      <Stack.Item>\n        <Input\n          autoFocus={autoFocus}\n          fluid\n          onInput={handleSearch}\n          placeholder={searchPlaceholder}\n          value={currentSearch}\n        />\n      </Stack.Item>\n      <Stack.Item>\n        {options.length === 0 && (\n          <Placeholder\n            mx={1}\n            py={0.5}\n          >\n            {noResultsPlaceholder}\n          </Placeholder>\n        )}\n        {options.map(option => (\n          <div\n            className={classes([\n              'list-search-interface__search-option',\n              'Button',\n              'Button--fluid',\n              'Button--color--transparent',\n              'Button--ellipsis',\n              selectedOption && option === selectedOption && 'Button--selected',\n            ])}\n            key={option}\n            onClick={() => onSelect(option)}\n            title={option}\n          >\n            {option}\n          </div>\n        ))}\n      </Stack.Item>\n    </Stack>\n  );\n};\n","import { Box, Button, LabeledList, RoundGauge, Section } from '../../components';\nimport { formatPressure } from '../../format';\n\nexport const PortableBasicInfo = props => {\n  const {\n    connected,\n    pressure,\n    maxPressure,\n    children,\n  } = props;\n\n  return (\n    <Section\n      title=\"Status\">\n      <LabeledList>\n        <LabeledList.Item\n          label=\"Pressure\">\n          <RoundGauge\n            size={1.75}\n            value={pressure}\n            minValue={0}\n            maxValue={maxPressure}\n            alertAfter={maxPressure * 0.70}\n            ranges={{\n              \"good\": [0, maxPressure * 0.70],\n              \"average\": [maxPressure * 0.70, maxPressure * 0.85],\n              \"bad\": [maxPressure * 0.85, maxPressure],\n            }}\n            format={formatPressure}\n          />\n        </LabeledList.Item>\n        <LabeledList.Item\n          label=\"Port\"\n          color={connected ? 'good' : 'average'}>\n          {connected ? 'Connected' : 'Not Connected'}\n        </LabeledList.Item>\n      </LabeledList>\n      {children}\n    </Section>\n  );\n};\n\nexport const PortableHoldingTank = props => {\n\n  const {\n    holding,\n    onEjectTank,\n  } = props;\n\n  return (\n    <Section\n      title=\"Holding Tank\"\n      minHeight=\"115px\"\n      buttons={(\n        <Button\n          icon=\"eject\"\n          content=\"Eject\"\n          disabled={!holding}\n          onClick={() => onEjectTank()} />\n      )}>\n      {holding ? (\n        <LabeledList>\n          <LabeledList.Item\n            label=\"Pressure\">\n            <RoundGauge\n              size={1.75}\n              value={holding.pressure}\n              minValue={0}\n              maxValue={holding.maxPressure}\n              alertAfter={holding.maxPressure * 0.70}\n              ranges={{\n                \"good\": [0, holding.maxPressure * 0.70],\n                \"average\": [holding.maxPressure * 0.70, holding.maxPressure * 0.85],\n                \"bad\": [holding.maxPressure * 0.85, holding.maxPressure],\n              }}\n              format={formatPressure}\n            />\n          </LabeledList.Item>\n          <LabeledList.Item\n            label=\"Label\">\n            {holding.name}\n          </LabeledList.Item>\n        </LabeledList>\n      ) : (\n        <Box\n          color=\"average\">\n          No holding tank\n        </Box>\n      )}\n    </Section>\n  );\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { Box, ColorBox, Flex, Icon, NoticeBox, Section, Tooltip } from '../../components';\nimport { freezeTemperature } from './temperatureUtils';\nimport { BoxProps } from '../../components/Box';\nimport { BooleanLike } from 'common/react';\nimport { InfernoNode } from 'inferno';\n\ninterface ReagentContainer {\n  name?: string;\n  id?: string;\n  maxVolume: number;\n  totalVolume: number;\n  finalColor: string;\n  temperature?: number;\n  contents?: Reagent[];\n  fake?: BooleanLike;\n}\n\ninterface Reagent {\n  name: string;\n  id: string;\n  volume: number;\n  colorR: number;\n  colorG: number;\n  colorB: number;\n}\n\nexport const NoContainer: ReagentContainer = {\n  name: \"No Beaker Inserted\",\n  id: \"inserted\",\n  maxVolume: 100,\n  totalVolume: 0,\n  finalColor: \"#000000\",\n  temperature: freezeTemperature,\n  fake: true,\n};\n\ninterface ReagentInfoProps extends BoxProps {\n  container: ReagentContainer;\n}\n\ninterface ReagentGraphProps extends ReagentInfoProps {}\n\nexport const ReagentGraph = (props: ReagentGraphProps) => {\n  const {\n    className = '',\n    container,\n    height,\n    ...rest\n  } = props;\n  const { maxVolume, totalVolume, finalColor } = container;\n  const contents = container.contents || [];\n  rest.height = height || \"50px\";\n\n  return (\n    <Box {...rest}>\n      <Flex height=\"100%\" direction=\"column\">\n        <Flex.Item grow>\n          <Flex height=\"100%\">\n            {contents.map(reagent => (\n              <Flex.Item grow={reagent.volume/maxVolume} key={reagent.id}>\n                <Tooltip content={`${reagent.name} (${reagent.volume}u)`} position=\"bottom\">\n                  <Box\n                    px={0}\n                    my={0}\n                    height=\"100%\"\n                    backgroundColor={`rgb(${reagent.colorR}, ${reagent.colorG}, ${reagent.colorB})`}\n                  />\n                </Tooltip>\n              </Flex.Item>\n            ))}\n            <Flex.Item grow={((maxVolume - totalVolume)/maxVolume)}>\n              <Tooltip content={`Nothing (${maxVolume - totalVolume}u)`} position=\"bottom\">\n                <NoticeBox\n                  px={0}\n                  my={0}\n                  height=\"100%\"\n                  backgroundColor=\"rgba(0, 0, 0, 0)\" // invisible noticebox kind of nice\n                />\n              </Tooltip>\n            </Flex.Item>\n          </Flex>\n        </Flex.Item>\n        <Flex.Item>\n          <Tooltip\n            content={\n              <Box>\n                <ColorBox color={finalColor} /> Current Mixture Color\n              </Box> as unknown as string // Elements/InfernoNodes work in Tooltip.content anyways.\n            }\n            position=\"bottom\">\n            <Box height=\"14px\" // same height as a Divider\n              backgroundColor={contents.length ? finalColor : \"rgba(0, 0, 0, 0.1)\"}\n              textAlign=\"center\">\n              {container.fake || (\n                <Box\n                  as=\"span\"\n                  backgroundColor=\"rgba(0, 0, 0, 0.5)\"\n                  px={1}>\n                  {`${totalVolume}/${maxVolume}`}\n                </Box>\n              )}\n            </Box>\n          </Tooltip>\n        </Flex.Item>\n      </Flex>\n    </Box>\n  );\n};\n\ninterface ReagentListProps extends ReagentInfoProps {\n  renderButtons(reagent: Reagent): InfernoNode;\n}\n\nexport const ReagentList = (props: ReagentListProps) => {\n  const {\n    className = '',\n    container,\n    renderButtons,\n    height,\n    ...rest\n  } = props;\n  const contents = container.contents || [];\n  rest.height = height || 6;\n\n  return (\n    <Section scrollable>\n      <Box {...rest}>\n        {contents.length ? contents.map(reagent => (\n          <Flex key={reagent.id} mb={0.5} align=\"center\">\n            <Flex.Item grow>\n              <Icon\n                pr={0.9}\n                name=\"circle\"\n                style={{\n                  \"text-shadow\": \"0 0 3px #000;\",\n                }}\n                color={`rgb(${reagent.colorR}, ${reagent.colorG}, ${reagent.colorB})`}\n              />\n              {`( ${reagent.volume}u ) ${reagent.name}`}\n            </Flex.Item>\n            {renderButtons && (\n              <Flex.Item nowrap>\n                {renderButtons(reagent)}\n              </Flex.Item>\n            )}\n          </Flex>\n        )) : (\n          <Box color=\"label\">\n            <Icon\n              pr={0.9}\n              name=\"circle-o\"\n              style={{\n                \"text-shadow\": \"0 0 3px #000;\",\n              }}\n            />\n            Empty\n          </Box>)}\n      </Box>\n    </Section>\n  );\n};\n\nconst reagentCheck = (a: Reagent, b: Reagent): boolean => {\n  if (a.volume !== b.volume\n      || a.name !== b.name\n      || a.id !== b.id\n      || a.colorR !== b.colorR\n      || a.colorG !== b.colorG\n      || a.colorB !== b.colorB) return true; // a property used by ReagentGraph/List has changed, update\n  return false;\n};\n\nconst containerCheck = (a: ReagentContainer, b: ReagentContainer): boolean => {\n  if (a === b) return false; // same object or both null, no update\n  if (a === null || b === null) return true; // only one object is null, update\n  if (a.totalVolume !== b.totalVolume\n      || a.finalColor !== b.finalColor\n      || a.maxVolume !== b.maxVolume) return true; // a property used by ReagentGraph/List has changed, update\n  if (a.contents?.length !== b.contents?.length) return true; // different number of reagents, update\n  for (const i in a) {\n    if (reagentCheck(a[i], b[i])) return true; // one of the reagents has changed, update\n  }\n  return false;\n};\n\n// modified version of the shallowDiffers function from common/react.ts\nconst reagentInfoDiffers = (a: ReagentInfoProps, b:ReagentInfoProps) => {\n  let i;\n  for (i in a) {\n    if (i === \"container\") continue;\n    if (!(i in b)) {\n      return true;\n    }\n  }\n  for (i in b) {\n    if (i === \"container\") continue;\n    if (a[i] !== b[i]) {\n      return true;\n    }\n  }\n  return containerCheck(a.container, b.container);\n};\n\nReagentGraph.defaultHooks = {\n  onComponentShouldUpdate: (lastProps: ReagentInfoProps, nextProps: ReagentInfoProps) => {\n    return reagentInfoDiffers(lastProps, nextProps);\n  },\n};\n\nReagentList.defaultHooks = {\n  onComponentShouldUpdate: (lastProps: ReagentInfoProps, nextProps: ReagentInfoProps) => {\n    return reagentInfoDiffers(lastProps, nextProps);\n  },\n};\n","/**\n* @file\n* @copyright 2020\n* @author PrimeNumb (https://github.com/primenumb)\n* @license MIT\n*/\n\nimport { NumberInput, LabeledList, Button } from '../../components';\n\nexport const ReleaseValve = props => {\n\n  const {\n    valveIsOpen,\n    releasePressure = 0,\n    minRelease = 0,\n    maxRelease = 0,\n    onToggleValve,\n    onSetPressure,\n  } = props;\n\n  return (\n    <LabeledList>\n      <LabeledList.Item label=\"Release valve\">\n        <Button\n          content={valveIsOpen ? 'Open' : 'Closed'}\n          color={valveIsOpen ? 'average' : 'default'}\n          onClick={onToggleValve} />\n      </LabeledList.Item>\n      <LabeledList.Item label=\"Release pressure\">\n        <Button\n          onClick={() => onSetPressure(minRelease)}\n          content=\"Min\" />\n        <NumberInput\n          animated\n          width=\"7em\"\n          value={releasePressure}\n          minValue={minRelease}\n          maxValue={maxRelease}\n          onChange={(e, targetPressure) => onSetPressure(targetPressure)} />\n        <Button\n          onClick={() => onSetPressure(maxRelease)}\n          content=\"Max\" />\n      </LabeledList.Item>\n    </LabeledList>\n  );\n\n};\n","export const randInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import { randInt } from './mathUtils';\n\nexport const pluralize = (word: string, n: number) => (n !== 1 ? word + 's' : word);\n\nexport const capitalize = (word: string) => word.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase());\n\nconst glitches = ['$', '{', ']', '%', '^', '?', '>', '¬', 'π', ';', 'и', 'ю', '/', '#', '~'];\nexport const glitch = (text: string, amount: number) => {\n  const chars = text.split('');\n  for (let i = 0; i < amount; i++) {\n    const charIndex = randInt(0, chars.length ? chars.length - 1 : 0);\n    chars[charIndex] = glitches[randInt(0, glitches.length - 1)];\n  }\n  return chars.join('');\n};\n","/**\n * @file\n * @copyright 2022\n * @author CodeJester (https://github.com/codeJester27)\n * @license ISC\n */\n\nimport { Color } from 'common/color';\n\nexport const TemperatureColors = {\n  cold: new Color(66, 194, 255),\n  neutral: new Color(170, 170, 170),\n  hot: new Color(255, 120, 0),\n  veryhot: new Color(255, 0, 0),\n};\n\nexport const freezeTemperature = 273.15;\nexport const neutralTemperature = 293.15;\nconst deviation = 200;\nconst highTemperature = neutralTemperature + deviation;\n\nexport const getTemperatureColor = (temperature) => {\n  const { cold, neutral, hot, veryhot } = TemperatureColors;\n\n  if (temperature < highTemperature) {\n    return Color.lookup((temperature - neutralTemperature) / (deviation * 2) + 0.5, [cold, neutral, hot]);\n  }\n  return Color.lookup((temperature - highTemperature) / (1000 - highTemperature), [hot, veryhot]);\n};\n\nexport const getTemperatureIcon = (temperature) => {\n  switch (Math.round(temperature/200)) {\n    case (0): return \"thermometer-empty\";\n    case (1): return \"thermometer-quarter\";\n    case (2): return \"thermometer-half\";\n    case (3): return \"thermometer-three-quarters\";\n    default: return \"thermometer-full\";\n  }\n};\n\nexport const getTemperatureChangeName = (temperature, targetTemperature) => {\n  if (temperature < targetTemperature) return \"heating\";\n  if (temperature > targetTemperature) return \"cooling\";\n  return \"neutral\";\n};\n","/**\n * @file\n * @copyright 2020 Aleksej Komarov\n * @license MIT\n */\n\nimport { selectBackend } from './backend';\nimport { selectDebug } from './debug/selectors';\nimport { Window } from './layouts';\n\nconst requireInterface = require.context('./interfaces');\n\nconst routingError = (type, name) => () => {\n  return (\n    <Window>\n      <Window.Content scrollable>\n        {type === 'notFound' && (\n          <div>Interface <b>{name}</b> was not found.</div>\n        )}\n        {type === 'missingExport' && (\n          <div>Interface <b>{name}</b> is missing an export.</div>\n        )}\n      </Window.Content>\n    </Window>\n  );\n};\n\nconst SuspendedWindow = () => {\n  return (\n    <Window>\n      <Window.Content scrollable />\n    </Window>\n  );\n};\n\nexport const getRoutedComponent = store => {\n  const state = store.getState();\n  const { suspended, config } = selectBackend(state);\n  if (suspended) {\n    return SuspendedWindow;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    const debug = selectDebug(state);\n    // Show a kitchen sink\n    if (debug.kitchenSink) {\n      return require('./debug').KitchenSink;\n    }\n  }\n  const name = config?.interface;\n  const interfacePathBuilders = [\n    name => `./${name}.tsx`,\n    name => `./${name}.js`,\n    name => `./${name}/index.tsx`,\n    name => `./${name}/index.js`,\n  ];\n  let esModule;\n  while (!esModule && interfacePathBuilders.length > 0) {\n    const interfacePathBuilder = interfacePathBuilders.shift();\n    const interfacePath = interfacePathBuilder(name);\n    try {\n      esModule = requireInterface(interfacePath);\n    }\n    catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err;\n      }\n    }\n  }\n  if (!esModule) {\n    return routingError('notFound', name);\n  }\n  const Component = esModule[name];\n  if (!Component) {\n    return routingError('missingExport', name);\n  }\n  return Component;\n};\n","/**\n * Copyright (c) 2020 Warlockd\n * SPDX-License-Identifier: MIT\n */\n\nimport DOMPurify from 'dompurify';\n\n// Default values\nlet defAllowedTags = [\n  'b',\n  'br',\n  'center',\n  'code',\n  'div',\n  'font',\n  'hr',\n  'i',\n  'li',\n  'menu',\n  'ol',\n  'p',\n  'pre',\n  'span',\n  'table',\n  'td',\n  'th',\n  'tr',\n  'u',\n  'ul',\n];\nlet defForbidAttr = ['class', 'style'];\n\n/**\n * Feed it a string and it should spit out a sanitized version.\n *\n * @param {string} input\n * @param {array} tags\n * @param {array} forbidAttr\n */\nexport const sanitizeText = (input, tags = defAllowedTags,\n  forbidAttr = defForbidAttr) => {\n  // This is VERY important to think first if you NEED\n  // the tag you put in here.  We are pushing all this\n  // though dangerouslySetInnerHTML and even though\n  // the default DOMPurify kills javascript, it dosn't\n  // kill href links or such\n  return DOMPurify.sanitize(input, {\n    ALLOWED_TAGS: tags,\n    FORBID_ATTR: forbidAttr,\n  });\n};\n","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816626\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816447\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816603\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816657\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816458\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816470\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816401\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1659572816614\n      var cssReload = require(\"C:/Users/js/Documents/Development/goon-review/tgui/.yarn/$$virtual/mini-css-extract-plugin-virtual-3129e88c60/0/cache/mini-css-extract-plugin-npm-1.5.0-2fc744c5c1-b666770b3b.zip/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","var map = {\n\t\"./AIMap\": \"./packages/tgui/interfaces/AIMap.js\",\n\t\"./AIMap.js\": \"./packages/tgui/interfaces/AIMap.js\",\n\t\"./AIRack\": \"./packages/tgui/interfaces/AIRack.js\",\n\t\"./AIRack.js\": \"./packages/tgui/interfaces/AIRack.js\",\n\t\"./Airlock\": \"./packages/tgui/interfaces/Airlock.js\",\n\t\"./Airlock.js\": \"./packages/tgui/interfaces/Airlock.js\",\n\t\"./AlertModal\": \"./packages/tgui/interfaces/AlertModal.js\",\n\t\"./AlertModal.js\": \"./packages/tgui/interfaces/AlertModal.js\",\n\t\"./Apc\": \"./packages/tgui/interfaces/Apc/index.js\",\n\t\"./Apc/\": \"./packages/tgui/interfaces/Apc/index.js\",\n\t\"./Apc/AccessPanel\": \"./packages/tgui/interfaces/Apc/AccessPanel.js\",\n\t\"./Apc/AccessPanel.js\": \"./packages/tgui/interfaces/Apc/AccessPanel.js\",\n\t\"./Apc/PowerChannelSection\": \"./packages/tgui/interfaces/Apc/PowerChannelSection.js\",\n\t\"./Apc/PowerChannelSection.js\": \"./packages/tgui/interfaces/Apc/PowerChannelSection.js\",\n\t\"./Apc/Wire\": \"./packages/tgui/interfaces/Apc/Wire.js\",\n\t\"./Apc/Wire.js\": \"./packages/tgui/interfaces/Apc/Wire.js\",\n\t\"./Apc/index\": \"./packages/tgui/interfaces/Apc/index.js\",\n\t\"./Apc/index.js\": \"./packages/tgui/interfaces/Apc/index.js\",\n\t\"./ArtifactPaper\": \"./packages/tgui/interfaces/ArtifactPaper.js\",\n\t\"./ArtifactPaper.js\": \"./packages/tgui/interfaces/ArtifactPaper.js\",\n\t\"./BarcodeComputer\": \"./packages/tgui/interfaces/BarcodeComputer.js\",\n\t\"./BarcodeComputer.js\": \"./packages/tgui/interfaces/BarcodeComputer.js\",\n\t\"./BugReportForm\": \"./packages/tgui/interfaces/BugReportForm.js\",\n\t\"./BugReportForm.js\": \"./packages/tgui/interfaces/BugReportForm.js\",\n\t\"./CharacterPreferences\": \"./packages/tgui/interfaces/CharacterPreferences/index.tsx\",\n\t\"./CharacterPreferences/\": \"./packages/tgui/interfaces/CharacterPreferences/index.tsx\",\n\t\"./CharacterPreferences/CharacterTab\": \"./packages/tgui/interfaces/CharacterPreferences/CharacterTab.tsx\",\n\t\"./CharacterPreferences/CharacterTab.tsx\": \"./packages/tgui/interfaces/CharacterPreferences/CharacterTab.tsx\",\n\t\"./CharacterPreferences/GameSettingsTab\": \"./packages/tgui/interfaces/CharacterPreferences/GameSettingsTab.tsx\",\n\t\"./CharacterPreferences/GameSettingsTab.tsx\": \"./packages/tgui/interfaces/CharacterPreferences/GameSettingsTab.tsx\",\n\t\"./CharacterPreferences/GeneralTab\": \"./packages/tgui/interfaces/CharacterPreferences/GeneralTab.tsx\",\n\t\"./CharacterPreferences/GeneralTab.tsx\": \"./packages/tgui/interfaces/CharacterPreferences/GeneralTab.tsx\",\n\t\"./CharacterPreferences/SavesTab\": \"./packages/tgui/interfaces/CharacterPreferences/SavesTab.tsx\",\n\t\"./CharacterPreferences/SavesTab.tsx\": \"./packages/tgui/interfaces/CharacterPreferences/SavesTab.tsx\",\n\t\"./CharacterPreferences/index\": \"./packages/tgui/interfaces/CharacterPreferences/index.tsx\",\n\t\"./CharacterPreferences/index.tsx\": \"./packages/tgui/interfaces/CharacterPreferences/index.tsx\",\n\t\"./CharacterPreferences/type\": \"./packages/tgui/interfaces/CharacterPreferences/type.ts\",\n\t\"./CharacterPreferences/type.ts\": \"./packages/tgui/interfaces/CharacterPreferences/type.ts\",\n\t\"./ChemDispenser\": \"./packages/tgui/interfaces/ChemDispenser.js\",\n\t\"./ChemDispenser.js\": \"./packages/tgui/interfaces/ChemDispenser.js\",\n\t\"./ChemHeater\": \"./packages/tgui/interfaces/ChemHeater.js\",\n\t\"./ChemHeater.js\": \"./packages/tgui/interfaces/ChemHeater.js\",\n\t\"./CloningConsole\": \"./packages/tgui/interfaces/CloningConsole.js\",\n\t\"./CloningConsole.js\": \"./packages/tgui/interfaces/CloningConsole.js\",\n\t\"./ComUplink\": \"./packages/tgui/interfaces/ComUplink/index.tsx\",\n\t\"./ComUplink/\": \"./packages/tgui/interfaces/ComUplink/index.tsx\",\n\t\"./ComUplink/index\": \"./packages/tgui/interfaces/ComUplink/index.tsx\",\n\t\"./ComUplink/index.tsx\": \"./packages/tgui/interfaces/ComUplink/index.tsx\",\n\t\"./ComUplink/type\": \"./packages/tgui/interfaces/ComUplink/type.ts\",\n\t\"./ComUplink/type.ts\": \"./packages/tgui/interfaces/ComUplink/type.ts\",\n\t\"./ContributorRewards\": \"./packages/tgui/interfaces/ContributorRewards.js\",\n\t\"./ContributorRewards.js\": \"./packages/tgui/interfaces/ContributorRewards.js\",\n\t\"./CyborgModuleRewriter\": \"./packages/tgui/interfaces/CyborgModuleRewriter/index.tsx\",\n\t\"./CyborgModuleRewriter/\": \"./packages/tgui/interfaces/CyborgModuleRewriter/index.tsx\",\n\t\"./CyborgModuleRewriter/EmptyPlaceholder\": \"./packages/tgui/interfaces/CyborgModuleRewriter/EmptyPlaceholder.tsx\",\n\t\"./CyborgModuleRewriter/EmptyPlaceholder.tsx\": \"./packages/tgui/interfaces/CyborgModuleRewriter/EmptyPlaceholder.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/index.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/index.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/Module\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Module.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/Module.tsx\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Module.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/Tools\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Tools.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/Tools.tsx\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/Tools.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/index\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/index.tsx\",\n\t\"./CyborgModuleRewriter/ModuleView/index.tsx\": \"./packages/tgui/interfaces/CyborgModuleRewriter/ModuleView/index.tsx\",\n\t\"./CyborgModuleRewriter/action\": \"./packages/tgui/interfaces/CyborgModuleRewriter/action.ts\",\n\t\"./CyborgModuleRewriter/action.ts\": \"./packages/tgui/interfaces/CyborgModuleRewriter/action.ts\",\n\t\"./CyborgModuleRewriter/index\": \"./packages/tgui/interfaces/CyborgModuleRewriter/index.tsx\",\n\t\"./CyborgModuleRewriter/index.tsx\": \"./packages/tgui/interfaces/CyborgModuleRewriter/index.tsx\",\n\t\"./CyborgModuleRewriter/style\": \"./packages/tgui/interfaces/CyborgModuleRewriter/style.ts\",\n\t\"./CyborgModuleRewriter/style.ts\": \"./packages/tgui/interfaces/CyborgModuleRewriter/style.ts\",\n\t\"./CyborgModuleRewriter/type\": \"./packages/tgui/interfaces/CyborgModuleRewriter/type.ts\",\n\t\"./CyborgModuleRewriter/type.ts\": \"./packages/tgui/interfaces/CyborgModuleRewriter/type.ts\",\n\t\"./DJPanel\": \"./packages/tgui/interfaces/DJPanel.js\",\n\t\"./DJPanel.js\": \"./packages/tgui/interfaces/DJPanel.js\",\n\t\"./DisposalChute\": \"./packages/tgui/interfaces/DisposalChute/index.tsx\",\n\t\"./DisposalChute/\": \"./packages/tgui/interfaces/DisposalChute/index.tsx\",\n\t\"./DisposalChute/index\": \"./packages/tgui/interfaces/DisposalChute/index.tsx\",\n\t\"./DisposalChute/index.tsx\": \"./packages/tgui/interfaces/DisposalChute/index.tsx\",\n\t\"./DisposalChute/type\": \"./packages/tgui/interfaces/DisposalChute/type.ts\",\n\t\"./DisposalChute/type.ts\": \"./packages/tgui/interfaces/DisposalChute/type.ts\",\n\t\"./DoorTimer\": \"./packages/tgui/interfaces/DoorTimer/index.tsx\",\n\t\"./DoorTimer/\": \"./packages/tgui/interfaces/DoorTimer/index.tsx\",\n\t\"./DoorTimer/index\": \"./packages/tgui/interfaces/DoorTimer/index.tsx\",\n\t\"./DoorTimer/index.tsx\": \"./packages/tgui/interfaces/DoorTimer/index.tsx\",\n\t\"./DoorTimer/type\": \"./packages/tgui/interfaces/DoorTimer/type.ts\",\n\t\"./DoorTimer/type.ts\": \"./packages/tgui/interfaces/DoorTimer/type.ts\",\n\t\"./EngineStats\": \"./packages/tgui/interfaces/EngineStats.js\",\n\t\"./EngineStats.js\": \"./packages/tgui/interfaces/EngineStats.js\",\n\t\"./Filteriffic\": \"./packages/tgui/interfaces/Filteriffic.js\",\n\t\"./Filteriffic.js\": \"./packages/tgui/interfaces/Filteriffic.js\",\n\t\"./FlockPanel\": \"./packages/tgui/interfaces/FlockPanel.js\",\n\t\"./FlockPanel.js\": \"./packages/tgui/interfaces/FlockPanel.js\",\n\t\"./GasCanister\": \"./packages/tgui/interfaces/GasCanister/index.js\",\n\t\"./GasCanister/\": \"./packages/tgui/interfaces/GasCanister/index.js\",\n\t\"./GasCanister/Detonator\": \"./packages/tgui/interfaces/GasCanister/Detonator.js\",\n\t\"./GasCanister/Detonator.js\": \"./packages/tgui/interfaces/GasCanister/Detonator.js\",\n\t\"./GasCanister/DetonatorTimer\": \"./packages/tgui/interfaces/GasCanister/DetonatorTimer.js\",\n\t\"./GasCanister/DetonatorTimer.js\": \"./packages/tgui/interfaces/GasCanister/DetonatorTimer.js\",\n\t\"./GasCanister/index\": \"./packages/tgui/interfaces/GasCanister/index.js\",\n\t\"./GasCanister/index.js\": \"./packages/tgui/interfaces/GasCanister/index.js\",\n\t\"./GasTank\": \"./packages/tgui/interfaces/GasTank.js\",\n\t\"./GasTank.js\": \"./packages/tgui/interfaces/GasTank.js\",\n\t\"./GeneTek\": \"./packages/tgui/interfaces/GeneTek.js\",\n\t\"./GeneTek.js\": \"./packages/tgui/interfaces/GeneTek.js\",\n\t\"./GeneTek/\": \"./packages/tgui/interfaces/GeneTek/index.js\",\n\t\"./GeneTek/AppearanceEditor\": \"./packages/tgui/interfaces/GeneTek/AppearanceEditor.js\",\n\t\"./GeneTek/AppearanceEditor.js\": \"./packages/tgui/interfaces/GeneTek/AppearanceEditor.js\",\n\t\"./GeneTek/BioEffect\": \"./packages/tgui/interfaces/GeneTek/BioEffect.js\",\n\t\"./GeneTek/BioEffect.js\": \"./packages/tgui/interfaces/GeneTek/BioEffect.js\",\n\t\"./GeneTek/DNASequence\": \"./packages/tgui/interfaces/GeneTek/DNASequence.js\",\n\t\"./GeneTek/DNASequence.js\": \"./packages/tgui/interfaces/GeneTek/DNASequence.js\",\n\t\"./GeneTek/GeneIcon\": \"./packages/tgui/interfaces/GeneTek/GeneIcon.js\",\n\t\"./GeneTek/GeneIcon.js\": \"./packages/tgui/interfaces/GeneTek/GeneIcon.js\",\n\t\"./GeneTek/index\": \"./packages/tgui/interfaces/GeneTek/index.js\",\n\t\"./GeneTek/index.js\": \"./packages/tgui/interfaces/GeneTek/index.js\",\n\t\"./GeneTek/modals/BuyMaterialsModal\": \"./packages/tgui/interfaces/GeneTek/modals/BuyMaterialsModal.js\",\n\t\"./GeneTek/modals/BuyMaterialsModal.js\": \"./packages/tgui/interfaces/GeneTek/modals/BuyMaterialsModal.js\",\n\t\"./GeneTek/modals/CombineGenesModal\": \"./packages/tgui/interfaces/GeneTek/modals/CombineGenesModal.js\",\n\t\"./GeneTek/modals/CombineGenesModal.js\": \"./packages/tgui/interfaces/GeneTek/modals/CombineGenesModal.js\",\n\t\"./GeneTek/modals/UnlockModal\": \"./packages/tgui/interfaces/GeneTek/modals/UnlockModal.js\",\n\t\"./GeneTek/modals/UnlockModal.js\": \"./packages/tgui/interfaces/GeneTek/modals/UnlockModal.js\",\n\t\"./GeneTek/tabs/MutationsTab\": \"./packages/tgui/interfaces/GeneTek/tabs/MutationsTab.js\",\n\t\"./GeneTek/tabs/MutationsTab.js\": \"./packages/tgui/interfaces/GeneTek/tabs/MutationsTab.js\",\n\t\"./GeneTek/tabs/ResearchTab\": \"./packages/tgui/interfaces/GeneTek/tabs/ResearchTab.js\",\n\t\"./GeneTek/tabs/ResearchTab.js\": \"./packages/tgui/interfaces/GeneTek/tabs/ResearchTab.js\",\n\t\"./GeneTek/tabs/ScannerTab\": \"./packages/tgui/interfaces/GeneTek/tabs/ScannerTab.js\",\n\t\"./GeneTek/tabs/ScannerTab.js\": \"./packages/tgui/interfaces/GeneTek/tabs/ScannerTab.js\",\n\t\"./GeneTek/tabs/StorageTab\": \"./packages/tgui/interfaces/GeneTek/tabs/StorageTab.js\",\n\t\"./GeneTek/tabs/StorageTab.js\": \"./packages/tgui/interfaces/GeneTek/tabs/StorageTab.js\",\n\t\"./GimmickObject\": \"./packages/tgui/interfaces/GimmickObject.js\",\n\t\"./GimmickObject.js\": \"./packages/tgui/interfaces/GimmickObject.js\",\n\t\"./GlassRecycler\": \"./packages/tgui/interfaces/GlassRecycler.js\",\n\t\"./GlassRecycler.js\": \"./packages/tgui/interfaces/GlassRecycler.js\",\n\t\"./HumanInventory\": \"./packages/tgui/interfaces/HumanInventory/index.tsx\",\n\t\"./HumanInventory/\": \"./packages/tgui/interfaces/HumanInventory/index.tsx\",\n\t\"./HumanInventory/index\": \"./packages/tgui/interfaces/HumanInventory/index.tsx\",\n\t\"./HumanInventory/index.tsx\": \"./packages/tgui/interfaces/HumanInventory/index.tsx\",\n\t\"./HumanInventory/types\": \"./packages/tgui/interfaces/HumanInventory/types.ts\",\n\t\"./HumanInventory/types.ts\": \"./packages/tgui/interfaces/HumanInventory/types.ts\",\n\t\"./Hypospray\": \"./packages/tgui/interfaces/Hypospray.js\",\n\t\"./Hypospray.js\": \"./packages/tgui/interfaces/Hypospray.js\",\n\t\"./Laundry\": \"./packages/tgui/interfaces/Laundry.js\",\n\t\"./Laundry.js\": \"./packages/tgui/interfaces/Laundry.js\",\n\t\"./ListInput\": \"./packages/tgui/interfaces/ListInput.js\",\n\t\"./ListInput.js\": \"./packages/tgui/interfaces/ListInput.js\",\n\t\"./LongRangeTeleporter\": \"./packages/tgui/interfaces/LongRangeTeleporter.js\",\n\t\"./LongRangeTeleporter.js\": \"./packages/tgui/interfaces/LongRangeTeleporter.js\",\n\t\"./MechanicalDropper\": \"./packages/tgui/interfaces/MechanicalDropper.js\",\n\t\"./MechanicalDropper.js\": \"./packages/tgui/interfaces/MechanicalDropper.js\",\n\t\"./MineralMagnet\": \"./packages/tgui/interfaces/MineralMagnet.js\",\n\t\"./MineralMagnet.js\": \"./packages/tgui/interfaces/MineralMagnet.js\",\n\t\"./MixingDesk\": \"./packages/tgui/interfaces/MixingDesk.js\",\n\t\"./MixingDesk.js\": \"./packages/tgui/interfaces/MixingDesk.js\",\n\t\"./PaperSheet\": \"./packages/tgui/interfaces/PaperSheet.js\",\n\t\"./PaperSheet.js\": \"./packages/tgui/interfaces/PaperSheet.js\",\n\t\"./Particool\": \"./packages/tgui/interfaces/Particool.js\",\n\t\"./Particool.js\": \"./packages/tgui/interfaces/Particool.js\",\n\t\"./PlayerPanel\": \"./packages/tgui/interfaces/PlayerPanel/index.tsx\",\n\t\"./PlayerPanel/\": \"./packages/tgui/interfaces/PlayerPanel/index.tsx\",\n\t\"./PlayerPanel/Header\": \"./packages/tgui/interfaces/PlayerPanel/Header.tsx\",\n\t\"./PlayerPanel/Header.tsx\": \"./packages/tgui/interfaces/PlayerPanel/Header.tsx\",\n\t\"./PlayerPanel/constant\": \"./packages/tgui/interfaces/PlayerPanel/constant.ts\",\n\t\"./PlayerPanel/constant.ts\": \"./packages/tgui/interfaces/PlayerPanel/constant.ts\",\n\t\"./PlayerPanel/index\": \"./packages/tgui/interfaces/PlayerPanel/index.tsx\",\n\t\"./PlayerPanel/index.tsx\": \"./packages/tgui/interfaces/PlayerPanel/index.tsx\",\n\t\"./PlayerPanel/type\": \"./packages/tgui/interfaces/PlayerPanel/type.ts\",\n\t\"./PlayerPanel/type.ts\": \"./packages/tgui/interfaces/PlayerPanel/type.ts\",\n\t\"./PortablePump\": \"./packages/tgui/interfaces/PortablePump.js\",\n\t\"./PortablePump.js\": \"./packages/tgui/interfaces/PortablePump.js\",\n\t\"./PortableScrubber\": \"./packages/tgui/interfaces/PortableScrubber.js\",\n\t\"./PortableScrubber.js\": \"./packages/tgui/interfaces/PortableScrubber.js\",\n\t\"./PowerMonitor\": \"./packages/tgui/interfaces/PowerMonitor/index.tsx\",\n\t\"./PowerMonitor/\": \"./packages/tgui/interfaces/PowerMonitor/index.tsx\",\n\t\"./PowerMonitor/Apc\": \"./packages/tgui/interfaces/PowerMonitor/Apc.tsx\",\n\t\"./PowerMonitor/Apc.tsx\": \"./packages/tgui/interfaces/PowerMonitor/Apc.tsx\",\n\t\"./PowerMonitor/Smes\": \"./packages/tgui/interfaces/PowerMonitor/Smes.tsx\",\n\t\"./PowerMonitor/Smes.tsx\": \"./packages/tgui/interfaces/PowerMonitor/Smes.tsx\",\n\t\"./PowerMonitor/index\": \"./packages/tgui/interfaces/PowerMonitor/index.tsx\",\n\t\"./PowerMonitor/index.tsx\": \"./packages/tgui/interfaces/PowerMonitor/index.tsx\",\n\t\"./PowerMonitor/type\": \"./packages/tgui/interfaces/PowerMonitor/type.ts\",\n\t\"./PowerMonitor/type.ts\": \"./packages/tgui/interfaces/PowerMonitor/type.ts\",\n\t\"./PowerTransmissionLaser\": \"./packages/tgui/interfaces/PowerTransmissionLaser.js\",\n\t\"./PowerTransmissionLaser.js\": \"./packages/tgui/interfaces/PowerTransmissionLaser.js\",\n\t\"./Precipitation\": \"./packages/tgui/interfaces/Precipitation.js\",\n\t\"./Precipitation.js\": \"./packages/tgui/interfaces/Precipitation.js\",\n\t\"./Pressurizer\": \"./packages/tgui/interfaces/Pressurizer.js\",\n\t\"./Pressurizer.js\": \"./packages/tgui/interfaces/Pressurizer.js\",\n\t\"./Radio\": \"./packages/tgui/interfaces/Radio/index.tsx\",\n\t\"./Radio/\": \"./packages/tgui/interfaces/Radio/index.tsx\",\n\t\"./Radio/index\": \"./packages/tgui/interfaces/Radio/index.tsx\",\n\t\"./Radio/index.tsx\": \"./packages/tgui/interfaces/Radio/index.tsx\",\n\t\"./Radio/type\": \"./packages/tgui/interfaces/Radio/type.ts\",\n\t\"./Radio/type.ts\": \"./packages/tgui/interfaces/Radio/type.ts\",\n\t\"./ReagentExtractor\": \"./packages/tgui/interfaces/ReagentExtractor.js\",\n\t\"./ReagentExtractor.js\": \"./packages/tgui/interfaces/ReagentExtractor.js\",\n\t\"./Rockbox\": \"./packages/tgui/interfaces/Rockbox.js\",\n\t\"./Rockbox.js\": \"./packages/tgui/interfaces/Rockbox.js\",\n\t\"./SeedFabricator\": \"./packages/tgui/interfaces/SeedFabricator.js\",\n\t\"./SeedFabricator.js\": \"./packages/tgui/interfaces/SeedFabricator.js\",\n\t\"./Sleeper\": \"./packages/tgui/interfaces/Sleeper.js\",\n\t\"./Sleeper.js\": \"./packages/tgui/interfaces/Sleeper.js\",\n\t\"./SlotMachine\": \"./packages/tgui/interfaces/SlotMachine.js\",\n\t\"./SlotMachine.js\": \"./packages/tgui/interfaces/SlotMachine.js\",\n\t\"./Smes\": \"./packages/tgui/interfaces/Smes.js\",\n\t\"./Smes.js\": \"./packages/tgui/interfaces/Smes.js\",\n\t\"./SpendSpacebux\": \"./packages/tgui/interfaces/SpendSpacebux.js\",\n\t\"./SpendSpacebux.js\": \"./packages/tgui/interfaces/SpendSpacebux.js\",\n\t\"./TEG\": \"./packages/tgui/interfaces/TEG.js\",\n\t\"./TEG.js\": \"./packages/tgui/interfaces/TEG.js\",\n\t\"./TankDispenser\": \"./packages/tgui/interfaces/TankDispenser.js\",\n\t\"./TankDispenser.js\": \"./packages/tgui/interfaces/TankDispenser.js\",\n\t\"./Terrainify\": \"./packages/tgui/interfaces/Terrainify.js\",\n\t\"./Terrainify.js\": \"./packages/tgui/interfaces/Terrainify.js\",\n\t\"./TransitTerminal\": \"./packages/tgui/interfaces/TransitTerminal.tsx\",\n\t\"./TransitTerminal.tsx\": \"./packages/tgui/interfaces/TransitTerminal.tsx\",\n\t\"./TurretControl\": \"./packages/tgui/interfaces/TurretControl.js\",\n\t\"./TurretControl.js\": \"./packages/tgui/interfaces/TurretControl.js\",\n\t\"./WeaponVendor\": \"./packages/tgui/interfaces/WeaponVendor/index.tsx\",\n\t\"./WeaponVendor/\": \"./packages/tgui/interfaces/WeaponVendor/index.tsx\",\n\t\"./WeaponVendor/index\": \"./packages/tgui/interfaces/WeaponVendor/index.tsx\",\n\t\"./WeaponVendor/index.tsx\": \"./packages/tgui/interfaces/WeaponVendor/index.tsx\",\n\t\"./WeaponVendor/type\": \"./packages/tgui/interfaces/WeaponVendor/type.ts\",\n\t\"./WeaponVendor/type.ts\": \"./packages/tgui/interfaces/WeaponVendor/type.ts\",\n\t\"./common/BeakerContents\": \"./packages/tgui/interfaces/common/BeakerContents.js\",\n\t\"./common/BeakerContents.js\": \"./packages/tgui/interfaces/common/BeakerContents.js\",\n\t\"./common/HealthStat\": \"./packages/tgui/interfaces/common/HealthStat.js\",\n\t\"./common/HealthStat.js\": \"./packages/tgui/interfaces/common/HealthStat.js\",\n\t\"./common/ListSearch\": \"./packages/tgui/interfaces/common/ListSearch.tsx\",\n\t\"./common/ListSearch.tsx\": \"./packages/tgui/interfaces/common/ListSearch.tsx\",\n\t\"./common/PortableAtmos\": \"./packages/tgui/interfaces/common/PortableAtmos.js\",\n\t\"./common/PortableAtmos.js\": \"./packages/tgui/interfaces/common/PortableAtmos.js\",\n\t\"./common/ReagentInfo\": \"./packages/tgui/interfaces/common/ReagentInfo.tsx\",\n\t\"./common/ReagentInfo.tsx\": \"./packages/tgui/interfaces/common/ReagentInfo.tsx\",\n\t\"./common/ReleaseValve\": \"./packages/tgui/interfaces/common/ReleaseValve.js\",\n\t\"./common/ReleaseValve.js\": \"./packages/tgui/interfaces/common/ReleaseValve.js\",\n\t\"./common/mathUtils\": \"./packages/tgui/interfaces/common/mathUtils.ts\",\n\t\"./common/mathUtils.ts\": \"./packages/tgui/interfaces/common/mathUtils.ts\",\n\t\"./common/stringUtils\": \"./packages/tgui/interfaces/common/stringUtils.ts\",\n\t\"./common/stringUtils.ts\": \"./packages/tgui/interfaces/common/stringUtils.ts\",\n\t\"./common/temperatureUtils\": \"./packages/tgui/interfaces/common/temperatureUtils.js\",\n\t\"./common/temperatureUtils.js\": \"./packages/tgui/interfaces/common/temperatureUtils.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./packages/tgui/interfaces sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\tif (cachedModule.error !== undefined) throw cachedModule.error;\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\ttry {\n\t\tvar execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };\n\t\t__webpack_require__.i.forEach(function(handler) { handler(execOptions); });\n\t\tmodule = execOptions.module;\n\t\texecOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n\t} catch(e) {\n\t\tmodule.error = e;\n\t\tthrow e;\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n// expose the module execution interceptor\n__webpack_require__.i = [];\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tresult = fn();\n\t\t}\n\t}\n\treturn result;\n};","// This function allow to reference all chunks\n__webpack_require__.hu = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + __webpack_require__.h() + \".hot-update.js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.hmrF = function() { return \"tgui.\" + __webpack_require__.h() + \".hot-update.json\"; };","__webpack_require__.h = function() { return \"9ea2345b0f30c83385aa\"; }","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"tgui-workspace:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 15;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 15000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var currentModuleData = {};\nvar installedModules = __webpack_require__.c;\n\n// module and require creation\nvar currentChildModule;\nvar currentParents = [];\n\n// status\nvar registeredStatusHandlers = [];\nvar currentStatus = \"idle\";\n\n// while downloading\nvar blockingPromises;\n\n// The update info\nvar currentUpdateApplyHandlers;\nvar queuedInvalidatedModules;\n\n// eslint-disable-next-line no-unused-vars\n__webpack_require__.hmrD = currentModuleData;\n\n__webpack_require__.i.push(function (options) {\n\tvar module = options.module;\n\tvar require = createRequire(options.require, options.id);\n\tmodule.hot = createModuleHotObject(options.id, module);\n\tmodule.parents = currentParents;\n\tmodule.children = [];\n\tcurrentParents = [];\n\toptions.require = require;\n});\n\n__webpack_require__.hmrC = {};\n__webpack_require__.hmrI = {};\n\nfunction createRequire(require, moduleId) {\n\tvar me = installedModules[moduleId];\n\tif (!me) return require;\n\tvar fn = function (request) {\n\t\tif (me.hot.active) {\n\t\t\tif (installedModules[request]) {\n\t\t\t\tvar parents = installedModules[request].parents;\n\t\t\t\tif (parents.indexOf(moduleId) === -1) {\n\t\t\t\t\tparents.push(moduleId);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentParents = [moduleId];\n\t\t\t\tcurrentChildModule = request;\n\t\t\t}\n\t\t\tif (me.children.indexOf(request) === -1) {\n\t\t\t\tme.children.push(request);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t\"[HMR] unexpected require(\" +\n\t\t\t\t\trequest +\n\t\t\t\t\t\") from disposed module \" +\n\t\t\t\t\tmoduleId\n\t\t\t);\n\t\t\tcurrentParents = [];\n\t\t}\n\t\treturn require(request);\n\t};\n\tvar createPropertyDescriptor = function (name) {\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn require[name];\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\trequire[name] = value;\n\t\t\t}\n\t\t};\n\t};\n\tfor (var name in require) {\n\t\tif (Object.prototype.hasOwnProperty.call(require, name) && name !== \"e\") {\n\t\t\tObject.defineProperty(fn, name, createPropertyDescriptor(name));\n\t\t}\n\t}\n\tfn.e = function (chunkId) {\n\t\treturn trackBlockingPromise(require.e(chunkId));\n\t};\n\treturn fn;\n}\n\nfunction createModuleHotObject(moduleId, me) {\n\tvar _main = currentChildModule !== moduleId;\n\tvar hot = {\n\t\t// private stuff\n\t\t_acceptedDependencies: {},\n\t\t_acceptedErrorHandlers: {},\n\t\t_declinedDependencies: {},\n\t\t_selfAccepted: false,\n\t\t_selfDeclined: false,\n\t\t_selfInvalidated: false,\n\t\t_disposeHandlers: [],\n\t\t_main: _main,\n\t\t_requireSelf: function () {\n\t\t\tcurrentParents = me.parents.slice();\n\t\t\tcurrentChildModule = _main ? undefined : moduleId;\n\t\t\t__webpack_require__(moduleId);\n\t\t},\n\n\t\t// Module API\n\t\tactive: true,\n\t\taccept: function (dep, callback, errorHandler) {\n\t\t\tif (dep === undefined) hot._selfAccepted = true;\n\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n\t\t\telse if (typeof dep === \"object\" && dep !== null) {\n\t\t\t\tfor (var i = 0; i < dep.length; i++) {\n\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function () {};\n\t\t\t\t\thot._acceptedErrorHandlers[dep[i]] = errorHandler;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thot._acceptedDependencies[dep] = callback || function () {};\n\t\t\t\thot._acceptedErrorHandlers[dep] = errorHandler;\n\t\t\t}\n\t\t},\n\t\tdecline: function (dep) {\n\t\t\tif (dep === undefined) hot._selfDeclined = true;\n\t\t\telse if (typeof dep === \"object\" && dep !== null)\n\t\t\t\tfor (var i = 0; i < dep.length; i++)\n\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n\t\t\telse hot._declinedDependencies[dep] = true;\n\t\t},\n\t\tdispose: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\taddDisposeHandler: function (callback) {\n\t\t\thot._disposeHandlers.push(callback);\n\t\t},\n\t\tremoveDisposeHandler: function (callback) {\n\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n\t\t},\n\t\tinvalidate: function () {\n\t\t\tthis._selfInvalidated = true;\n\t\t\tswitch (currentStatus) {\n\t\t\t\tcase \"idle\":\n\t\t\t\t\tcurrentUpdateApplyHandlers = [];\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\t\t\tmoduleId,\n\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tsetStatus(\"ready\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ready\":\n\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\t\t\tmoduleId,\n\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"prepare\":\n\t\t\t\tcase \"check\":\n\t\t\t\tcase \"dispose\":\n\t\t\t\tcase \"apply\":\n\t\t\t\t\t(queuedInvalidatedModules = queuedInvalidatedModules || []).push(\n\t\t\t\t\t\tmoduleId\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// ignore requests in error states\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\t// Management API\n\t\tcheck: hotCheck,\n\t\tapply: hotApply,\n\t\tstatus: function (l) {\n\t\t\tif (!l) return currentStatus;\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\taddStatusHandler: function (l) {\n\t\t\tregisteredStatusHandlers.push(l);\n\t\t},\n\t\tremoveStatusHandler: function (l) {\n\t\t\tvar idx = registeredStatusHandlers.indexOf(l);\n\t\t\tif (idx >= 0) registeredStatusHandlers.splice(idx, 1);\n\t\t},\n\n\t\t//inherit from previous dispose call\n\t\tdata: currentModuleData[moduleId]\n\t};\n\tcurrentChildModule = undefined;\n\treturn hot;\n}\n\nfunction setStatus(newStatus) {\n\tcurrentStatus = newStatus;\n\tfor (var i = 0; i < registeredStatusHandlers.length; i++)\n\t\tregisteredStatusHandlers[i].call(null, newStatus);\n}\n\nfunction trackBlockingPromise(promise) {\n\tswitch (currentStatus) {\n\t\tcase \"ready\":\n\t\t\tsetStatus(\"prepare\");\n\t\t\tblockingPromises.push(promise);\n\t\t\twaitForBlockingPromises(function () {\n\t\t\t\tsetStatus(\"ready\");\n\t\t\t});\n\t\t\treturn promise;\n\t\tcase \"prepare\":\n\t\t\tblockingPromises.push(promise);\n\t\t\treturn promise;\n\t\tdefault:\n\t\t\treturn promise;\n\t}\n}\n\nfunction waitForBlockingPromises(fn) {\n\tif (blockingPromises.length === 0) return fn();\n\tvar blocker = blockingPromises;\n\tblockingPromises = [];\n\treturn Promise.all(blocker).then(function () {\n\t\treturn waitForBlockingPromises(fn);\n\t});\n}\n\nfunction hotCheck(applyOnUpdate) {\n\tif (currentStatus !== \"idle\") {\n\t\tthrow new Error(\"check() is only allowed in idle status\");\n\t}\n\tsetStatus(\"check\");\n\treturn __webpack_require__.hmrM().then(function (update) {\n\t\tif (!update) {\n\t\t\tsetStatus(applyInvalidatedModules() ? \"ready\" : \"idle\");\n\t\t\treturn null;\n\t\t}\n\n\t\tsetStatus(\"prepare\");\n\n\t\tvar updatedModules = [];\n\t\tblockingPromises = [];\n\t\tcurrentUpdateApplyHandlers = [];\n\n\t\treturn Promise.all(\n\t\t\tObject.keys(__webpack_require__.hmrC).reduce(function (\n\t\t\t\tpromises,\n\t\t\t\tkey\n\t\t\t) {\n\t\t\t\t__webpack_require__.hmrC[key](\n\t\t\t\t\tupdate.c,\n\t\t\t\t\tupdate.r,\n\t\t\t\t\tupdate.m,\n\t\t\t\t\tpromises,\n\t\t\t\t\tcurrentUpdateApplyHandlers,\n\t\t\t\t\tupdatedModules\n\t\t\t\t);\n\t\t\t\treturn promises;\n\t\t\t},\n\t\t\t[])\n\t\t).then(function () {\n\t\t\treturn waitForBlockingPromises(function () {\n\t\t\t\tif (applyOnUpdate) {\n\t\t\t\t\treturn internalApply(applyOnUpdate);\n\t\t\t\t} else {\n\t\t\t\t\tsetStatus(\"ready\");\n\n\t\t\t\t\treturn updatedModules;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction hotApply(options) {\n\tif (currentStatus !== \"ready\") {\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow new Error(\"apply() is only allowed in ready status\");\n\t\t});\n\t}\n\treturn internalApply(options);\n}\n\nfunction internalApply(options) {\n\toptions = options || {};\n\n\tapplyInvalidatedModules();\n\n\tvar results = currentUpdateApplyHandlers.map(function (handler) {\n\t\treturn handler(options);\n\t});\n\tcurrentUpdateApplyHandlers = undefined;\n\n\tvar errors = results\n\t\t.map(function (r) {\n\t\t\treturn r.error;\n\t\t})\n\t\t.filter(Boolean);\n\n\tif (errors.length > 0) {\n\t\tsetStatus(\"abort\");\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow errors[0];\n\t\t});\n\t}\n\n\t// Now in \"dispose\" phase\n\tsetStatus(\"dispose\");\n\n\tresults.forEach(function (result) {\n\t\tif (result.dispose) result.dispose();\n\t});\n\n\t// Now in \"apply\" phase\n\tsetStatus(\"apply\");\n\n\tvar error;\n\tvar reportError = function (err) {\n\t\tif (!error) error = err;\n\t};\n\n\tvar outdatedModules = [];\n\tresults.forEach(function (result) {\n\t\tif (result.apply) {\n\t\t\tvar modules = result.apply(reportError);\n\t\t\tif (modules) {\n\t\t\t\tfor (var i = 0; i < modules.length; i++) {\n\t\t\t\t\toutdatedModules.push(modules[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// handle errors in accept handlers and self accepted module load\n\tif (error) {\n\t\tsetStatus(\"fail\");\n\t\treturn Promise.resolve().then(function () {\n\t\t\tthrow error;\n\t\t});\n\t}\n\n\tif (queuedInvalidatedModules) {\n\t\treturn internalApply(options).then(function (list) {\n\t\t\toutdatedModules.forEach(function (moduleId) {\n\t\t\t\tif (list.indexOf(moduleId) < 0) list.push(moduleId);\n\t\t\t});\n\t\t\treturn list;\n\t\t});\n\t}\n\n\tsetStatus(\"idle\");\n\treturn Promise.resolve(outdatedModules);\n}\n\nfunction applyInvalidatedModules() {\n\tif (queuedInvalidatedModules) {\n\t\tif (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];\n\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n\t\t\tqueuedInvalidatedModules.forEach(function (moduleId) {\n\t\t\t\t__webpack_require__.hmrI[key](\n\t\t\t\t\tmoduleId,\n\t\t\t\t\tcurrentUpdateApplyHandlers\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t\tqueuedInvalidatedModules = undefined;\n\t\treturn true;\n\t}\n}","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","var createStylesheet = function(chunkId, fullhref, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// no chunk loading\n\nvar oldTags = [];\nvar newTags = [];\nvar applyHandler = function(options) {\n\treturn { dispose: function() {\n\t\tfor(var i = 0; i < oldTags.length; i++) {\n\t\t\tvar oldTag = oldTags[i];\n\t\t\tif(oldTag.parentNode) oldTag.parentNode.removeChild(oldTag);\n\t\t}\n\t\toldTags.length = 0;\n\t}, apply: function() {\n\t\tfor(var i = 0; i < newTags.length; i++) newTags[i].rel = \"stylesheet\";\n\t\tnewTags.length = 0;\n\t} };\n}\n__webpack_require__.hmrC.miniCss = function(chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) {\n\tapplyHandlers.push(applyHandler);\n\tchunkIds.forEach(function(chunkId) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tvar oldTag = findStylesheet(href, fullhref);\n\t\tif(!oldTag) return;\n\t\tpromises.push(new Promise(function(resolve, reject) {\n\t\t\tvar tag = createStylesheet(chunkId, fullhref, function() {\n\t\t\t\ttag.as = \"style\";\n\t\t\t\ttag.rel = \"preload\";\n\t\t\t\tresolve();\n\t\t\t}, reject);\n\t\t\toldTags.push(oldTag);\n\t\t\tnewTags.push(tag);\n\t\t}));\n\t});\n}","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"tgui\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\nvar currentUpdatedModulesList;\nvar waitingUpdateResolves = {};\nfunction loadUpdateChunk(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\twaitingUpdateResolves[chunkId] = resolve;\n\t\t// start update chunk loading\n\t\tvar url = __webpack_require__.p + __webpack_require__.hu(chunkId);\n\t\t// create error before stack unwound to get useful stacktrace later\n\t\tvar error = new Error();\n\t\tvar loadingEnded = function(event) {\n\t\t\tif(waitingUpdateResolves[chunkId]) {\n\t\t\t\twaitingUpdateResolves[chunkId] = undefined\n\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\terror.message = 'Loading hot update chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\terror.type = errorType;\n\t\t\t\terror.request = realSrc;\n\t\t\t\treject(error);\n\t\t\t}\n\t\t};\n\t\t__webpack_require__.l(url, loadingEnded);\n\t});\n}\n\nself[\"webpackHotUpdatetgui_workspace\"] = function(chunkId, moreModules, runtime) {\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\tcurrentUpdate[moduleId] = moreModules[moduleId];\n\t\t\tif(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);\n\t\t}\n\t}\n\tif(runtime) currentUpdateRuntime.push(runtime);\n\tif(waitingUpdateResolves[chunkId]) {\n\t\twaitingUpdateResolves[chunkId]();\n\t\twaitingUpdateResolves[chunkId] = undefined;\n\t}\n};\n\nvar currentUpdateChunks;\nvar currentUpdate;\nvar currentUpdateRemovedChunks;\nvar currentUpdateRuntime;\nfunction applyHandler(options) {\n\tif (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;\n\tcurrentUpdateChunks = undefined;\n\tfunction getAffectedModuleEffects(updateModuleId) {\n\t\tvar outdatedModules = [updateModuleId];\n\t\tvar outdatedDependencies = {};\n\n\t\tvar queue = outdatedModules.map(function (id) {\n\t\t\treturn {\n\t\t\t\tchain: [id],\n\t\t\t\tid: id\n\t\t\t};\n\t\t});\n\t\twhile (queue.length > 0) {\n\t\t\tvar queueItem = queue.pop();\n\t\t\tvar moduleId = queueItem.id;\n\t\t\tvar chain = queueItem.chain;\n\t\t\tvar module = __webpack_require__.c[moduleId];\n\t\t\tif (\n\t\t\t\t!module ||\n\t\t\t\t(module.hot._selfAccepted && !module.hot._selfInvalidated)\n\t\t\t)\n\t\t\t\tcontinue;\n\t\t\tif (module.hot._selfDeclined) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"self-declined\",\n\t\t\t\t\tchain: chain,\n\t\t\t\t\tmoduleId: moduleId\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (module.hot._main) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"unaccepted\",\n\t\t\t\t\tchain: chain,\n\t\t\t\t\tmoduleId: moduleId\n\t\t\t\t};\n\t\t\t}\n\t\t\tfor (var i = 0; i < module.parents.length; i++) {\n\t\t\t\tvar parentId = module.parents[i];\n\t\t\t\tvar parent = __webpack_require__.c[parentId];\n\t\t\t\tif (!parent) continue;\n\t\t\t\tif (parent.hot._declinedDependencies[moduleId]) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"declined\",\n\t\t\t\t\t\tchain: chain.concat([parentId]),\n\t\t\t\t\t\tmoduleId: moduleId,\n\t\t\t\t\t\tparentId: parentId\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (outdatedModules.indexOf(parentId) !== -1) continue;\n\t\t\t\tif (parent.hot._acceptedDependencies[moduleId]) {\n\t\t\t\t\tif (!outdatedDependencies[parentId])\n\t\t\t\t\t\toutdatedDependencies[parentId] = [];\n\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdelete outdatedDependencies[parentId];\n\t\t\t\toutdatedModules.push(parentId);\n\t\t\t\tqueue.push({\n\t\t\t\t\tchain: chain.concat([parentId]),\n\t\t\t\t\tid: parentId\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttype: \"accepted\",\n\t\t\tmoduleId: updateModuleId,\n\t\t\toutdatedModules: outdatedModules,\n\t\t\toutdatedDependencies: outdatedDependencies\n\t\t};\n\t}\n\n\tfunction addAllToSet(a, b) {\n\t\tfor (var i = 0; i < b.length; i++) {\n\t\t\tvar item = b[i];\n\t\t\tif (a.indexOf(item) === -1) a.push(item);\n\t\t}\n\t}\n\n\t// at begin all updates modules are outdated\n\t// the \"outdated\" status can propagate to parents if they don't accept the children\n\tvar outdatedDependencies = {};\n\tvar outdatedModules = [];\n\tvar appliedUpdate = {};\n\n\tvar warnUnexpectedRequire = function warnUnexpectedRequire(module) {\n\t\tconsole.warn(\n\t\t\t\"[HMR] unexpected require(\" + module.id + \") to disposed module\"\n\t\t);\n\t};\n\n\tfor (var moduleId in currentUpdate) {\n\t\tif (__webpack_require__.o(currentUpdate, moduleId)) {\n\t\t\tvar newModuleFactory = currentUpdate[moduleId];\n\t\t\t/** @type {TODO} */\n\t\t\tvar result;\n\t\t\tif (newModuleFactory) {\n\t\t\t\tresult = getAffectedModuleEffects(moduleId);\n\t\t\t} else {\n\t\t\t\tresult = {\n\t\t\t\t\ttype: \"disposed\",\n\t\t\t\t\tmoduleId: moduleId\n\t\t\t\t};\n\t\t\t}\n\t\t\t/** @type {Error|false} */\n\t\t\tvar abortError = false;\n\t\t\tvar doApply = false;\n\t\t\tvar doDispose = false;\n\t\t\tvar chainInfo = \"\";\n\t\t\tif (result.chain) {\n\t\t\t\tchainInfo = \"\\nUpdate propagation: \" + result.chain.join(\" -> \");\n\t\t\t}\n\t\t\tswitch (result.type) {\n\t\t\t\tcase \"self-declined\":\n\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n\t\t\t\t\tif (!options.ignoreDeclined)\n\t\t\t\t\t\tabortError = new Error(\n\t\t\t\t\t\t\t\"Aborted because of self decline: \" +\n\t\t\t\t\t\t\t\tresult.moduleId +\n\t\t\t\t\t\t\t\tchainInfo\n\t\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"declined\":\n\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n\t\t\t\t\tif (!options.ignoreDeclined)\n\t\t\t\t\t\tabortError = new Error(\n\t\t\t\t\t\t\t\"Aborted because of declined dependency: \" +\n\t\t\t\t\t\t\t\tresult.moduleId +\n\t\t\t\t\t\t\t\t\" in \" +\n\t\t\t\t\t\t\t\tresult.parentId +\n\t\t\t\t\t\t\t\tchainInfo\n\t\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unaccepted\":\n\t\t\t\t\tif (options.onUnaccepted) options.onUnaccepted(result);\n\t\t\t\t\tif (!options.ignoreUnaccepted)\n\t\t\t\t\t\tabortError = new Error(\n\t\t\t\t\t\t\t\"Aborted because \" + moduleId + \" is not accepted\" + chainInfo\n\t\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"accepted\":\n\t\t\t\t\tif (options.onAccepted) options.onAccepted(result);\n\t\t\t\t\tdoApply = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"disposed\":\n\t\t\t\t\tif (options.onDisposed) options.onDisposed(result);\n\t\t\t\t\tdoDispose = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unexception type \" + result.type);\n\t\t\t}\n\t\t\tif (abortError) {\n\t\t\t\treturn {\n\t\t\t\t\terror: abortError\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (doApply) {\n\t\t\t\tappliedUpdate[moduleId] = newModuleFactory;\n\t\t\t\taddAllToSet(outdatedModules, result.outdatedModules);\n\t\t\t\tfor (moduleId in result.outdatedDependencies) {\n\t\t\t\t\tif (__webpack_require__.o(result.outdatedDependencies, moduleId)) {\n\t\t\t\t\t\tif (!outdatedDependencies[moduleId])\n\t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\n\t\t\t\t\t\taddAllToSet(\n\t\t\t\t\t\t\toutdatedDependencies[moduleId],\n\t\t\t\t\t\t\tresult.outdatedDependencies[moduleId]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (doDispose) {\n\t\t\t\taddAllToSet(outdatedModules, [result.moduleId]);\n\t\t\t\tappliedUpdate[moduleId] = warnUnexpectedRequire;\n\t\t\t}\n\t\t}\n\t}\n\tcurrentUpdate = undefined;\n\n\t// Store self accepted outdated modules to require them later by the module system\n\tvar outdatedSelfAcceptedModules = [];\n\tfor (var j = 0; j < outdatedModules.length; j++) {\n\t\tvar outdatedModuleId = outdatedModules[j];\n\t\tvar module = __webpack_require__.c[outdatedModuleId];\n\t\tif (\n\t\t\tmodule &&\n\t\t\t(module.hot._selfAccepted || module.hot._main) &&\n\t\t\t// removed self-accepted modules should not be required\n\t\t\tappliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&\n\t\t\t// when called invalidate self-accepting is not possible\n\t\t\t!module.hot._selfInvalidated\n\t\t) {\n\t\t\toutdatedSelfAcceptedModules.push({\n\t\t\t\tmodule: outdatedModuleId,\n\t\t\t\trequire: module.hot._requireSelf,\n\t\t\t\terrorHandler: module.hot._selfAccepted\n\t\t\t});\n\t\t}\n\t}\n\n\tvar moduleOutdatedDependencies;\n\n\treturn {\n\t\tdispose: function () {\n\t\t\tcurrentUpdateRemovedChunks.forEach(function (chunkId) {\n\t\t\t\tdelete installedChunks[chunkId];\n\t\t\t});\n\t\t\tcurrentUpdateRemovedChunks = undefined;\n\n\t\t\tvar idx;\n\t\t\tvar queue = outdatedModules.slice();\n\t\t\twhile (queue.length > 0) {\n\t\t\t\tvar moduleId = queue.pop();\n\t\t\t\tvar module = __webpack_require__.c[moduleId];\n\t\t\t\tif (!module) continue;\n\n\t\t\t\tvar data = {};\n\n\t\t\t\t// Call dispose handlers\n\t\t\t\tvar disposeHandlers = module.hot._disposeHandlers;\n\t\t\t\tfor (j = 0; j < disposeHandlers.length; j++) {\n\t\t\t\t\tdisposeHandlers[j].call(null, data);\n\t\t\t\t}\n\t\t\t\t__webpack_require__.hmrD[moduleId] = data;\n\n\t\t\t\t// disable module (this disables requires from this module)\n\t\t\t\tmodule.hot.active = false;\n\n\t\t\t\t// remove module from cache\n\t\t\t\tdelete __webpack_require__.c[moduleId];\n\n\t\t\t\t// when disposing there is no need to call dispose handler\n\t\t\t\tdelete outdatedDependencies[moduleId];\n\n\t\t\t\t// remove \"parents\" references from all children\n\t\t\t\tfor (j = 0; j < module.children.length; j++) {\n\t\t\t\t\tvar child = __webpack_require__.c[module.children[j]];\n\t\t\t\t\tif (!child) continue;\n\t\t\t\t\tidx = child.parents.indexOf(moduleId);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tchild.parents.splice(idx, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// remove outdated dependency from module children\n\t\t\tvar dependency;\n\t\t\tfor (var outdatedModuleId in outdatedDependencies) {\n\t\t\t\tif (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n\t\t\t\t\tmodule = __webpack_require__.c[outdatedModuleId];\n\t\t\t\t\tif (module) {\n\t\t\t\t\t\tmoduleOutdatedDependencies =\n\t\t\t\t\t\t\toutdatedDependencies[outdatedModuleId];\n\t\t\t\t\t\tfor (j = 0; j < moduleOutdatedDependencies.length; j++) {\n\t\t\t\t\t\t\tdependency = moduleOutdatedDependencies[j];\n\t\t\t\t\t\t\tidx = module.children.indexOf(dependency);\n\t\t\t\t\t\t\tif (idx >= 0) module.children.splice(idx, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tapply: function (reportError) {\n\t\t\t// insert new code\n\t\t\tfor (var updateModuleId in appliedUpdate) {\n\t\t\t\tif (__webpack_require__.o(appliedUpdate, updateModuleId)) {\n\t\t\t\t\t__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// run new runtime modules\n\t\t\tfor (var i = 0; i < currentUpdateRuntime.length; i++) {\n\t\t\t\tcurrentUpdateRuntime[i](__webpack_require__);\n\t\t\t}\n\n\t\t\t// call accept handlers\n\t\t\tfor (var outdatedModuleId in outdatedDependencies) {\n\t\t\t\tif (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n\t\t\t\t\tvar module = __webpack_require__.c[outdatedModuleId];\n\t\t\t\t\tif (module) {\n\t\t\t\t\t\tmoduleOutdatedDependencies =\n\t\t\t\t\t\t\toutdatedDependencies[outdatedModuleId];\n\t\t\t\t\t\tvar callbacks = [];\n\t\t\t\t\t\tvar errorHandlers = [];\n\t\t\t\t\t\tvar dependenciesForCallbacks = [];\n\t\t\t\t\t\tfor (var j = 0; j < moduleOutdatedDependencies.length; j++) {\n\t\t\t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\n\t\t\t\t\t\t\tvar acceptCallback =\n\t\t\t\t\t\t\t\tmodule.hot._acceptedDependencies[dependency];\n\t\t\t\t\t\t\tvar errorHandler =\n\t\t\t\t\t\t\t\tmodule.hot._acceptedErrorHandlers[dependency];\n\t\t\t\t\t\t\tif (acceptCallback) {\n\t\t\t\t\t\t\t\tif (callbacks.indexOf(acceptCallback) !== -1) continue;\n\t\t\t\t\t\t\t\tcallbacks.push(acceptCallback);\n\t\t\t\t\t\t\t\terrorHandlers.push(errorHandler);\n\t\t\t\t\t\t\t\tdependenciesForCallbacks.push(dependency);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var k = 0; k < callbacks.length; k++) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tcallbacks[k].call(null, moduleOutdatedDependencies);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\tif (typeof errorHandlers[k] === \"function\") {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\terrorHandlers[k](err, {\n\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k]\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} catch (err2) {\n\t\t\t\t\t\t\t\t\t\tif (options.onErrored) {\n\t\t\t\t\t\t\t\t\t\t\toptions.onErrored({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"accept-error-handler-errored\",\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n\t\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k],\n\t\t\t\t\t\t\t\t\t\t\t\terror: err2,\n\t\t\t\t\t\t\t\t\t\t\t\toriginalError: err\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n\t\t\t\t\t\t\t\t\t\t\treportError(err2);\n\t\t\t\t\t\t\t\t\t\t\treportError(err);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (options.onErrored) {\n\t\t\t\t\t\t\t\t\t\toptions.onErrored({\n\t\t\t\t\t\t\t\t\t\t\ttype: \"accept-errored\",\n\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k],\n\t\t\t\t\t\t\t\t\t\t\terror: err\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n\t\t\t\t\t\t\t\t\t\treportError(err);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Load self accepted modules\n\t\t\tfor (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {\n\t\t\t\tvar item = outdatedSelfAcceptedModules[o];\n\t\t\t\tvar moduleId = item.module;\n\t\t\t\ttry {\n\t\t\t\t\titem.require(moduleId);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (typeof item.errorHandler === \"function\") {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titem.errorHandler(err, {\n\t\t\t\t\t\t\t\tmoduleId: moduleId,\n\t\t\t\t\t\t\t\tmodule: __webpack_require__.c[moduleId]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err2) {\n\t\t\t\t\t\t\tif (options.onErrored) {\n\t\t\t\t\t\t\t\toptions.onErrored({\n\t\t\t\t\t\t\t\t\ttype: \"self-accept-error-handler-errored\",\n\t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n\t\t\t\t\t\t\t\t\terror: err2,\n\t\t\t\t\t\t\t\t\toriginalError: err\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n\t\t\t\t\t\t\t\treportError(err2);\n\t\t\t\t\t\t\t\treportError(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (options.onErrored) {\n\t\t\t\t\t\t\toptions.onErrored({\n\t\t\t\t\t\t\t\ttype: \"self-accept-errored\",\n\t\t\t\t\t\t\t\tmoduleId: moduleId,\n\t\t\t\t\t\t\t\terror: err\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!options.ignoreErrored) {\n\t\t\t\t\t\t\treportError(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn outdatedModules;\n\t\t}\n\t};\n}\n__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {\n\tif (!currentUpdate) {\n\t\tcurrentUpdate = {};\n\t\tcurrentUpdateRuntime = [];\n\t\tcurrentUpdateRemovedChunks = [];\n\t\tapplyHandlers.push(applyHandler);\n\t}\n\tif (!__webpack_require__.o(currentUpdate, moduleId)) {\n\t\tcurrentUpdate[moduleId] = __webpack_require__.m[moduleId];\n\t}\n};\n__webpack_require__.hmrC.jsonp = function (\n\tchunkIds,\n\tremovedChunks,\n\tremovedModules,\n\tpromises,\n\tapplyHandlers,\n\tupdatedModulesList\n) {\n\tapplyHandlers.push(applyHandler);\n\tcurrentUpdateChunks = {};\n\tcurrentUpdateRemovedChunks = removedChunks;\n\tcurrentUpdate = removedModules.reduce(function (obj, key) {\n\t\tobj[key] = false;\n\t\treturn obj;\n\t}, {});\n\tcurrentUpdateRuntime = [];\n\tchunkIds.forEach(function (chunkId) {\n\t\tif (\n\t\t\t__webpack_require__.o(installedChunks, chunkId) &&\n\t\t\tinstalledChunks[chunkId] !== undefined\n\t\t) {\n\t\t\tpromises.push(loadUpdateChunk(chunkId, updatedModulesList));\n\t\t\tcurrentUpdateChunks[chunkId] = true;\n\t\t}\n\t});\n\tif (__webpack_require__.f) {\n\t\t__webpack_require__.f.jsonpHmr = function (chunkId, promises) {\n\t\t\tif (\n\t\t\t\tcurrentUpdateChunks &&\n\t\t\t\t!__webpack_require__.o(currentUpdateChunks, chunkId) &&\n\t\t\t\t__webpack_require__.o(installedChunks, chunkId) &&\n\t\t\t\tinstalledChunks[chunkId] !== undefined\n\t\t\t) {\n\t\t\t\tpromises.push(loadUpdateChunk(chunkId));\n\t\t\t\tcurrentUpdateChunks[chunkId] = true;\n\t\t\t}\n\t\t};\n\t}\n};\n\n__webpack_require__.hmrM = function() {\n\tif (typeof fetch === \"undefined\") throw new Error(\"No browser support: need fetch API\");\n\treturn fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(function(response) {\n\t\tif(response.status === 404) return; // no update available\n\t\tif(!response.ok) throw new Error(\"Failed to fetch update manifest \" + response.statusText);\n\t\treturn response.json();\n\t});\n};\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\t__webpack_require__.O();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktgui_workspace\"] = self[\"webpackChunktgui_workspace\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\n__webpack_require__.O(undefined, [\"tgui-common\"], function() { return __webpack_require__(\"./packages/tgui-polyfill/index.js\"); })\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"tgui-common\"], function() { return __webpack_require__(\"./packages/tgui/index.js\"); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"mappings":"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;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;A;;;;;;;;;;;;;;;;AC3GA;AACA;AAAA;AACA;AACA;AACA;AASA;AACA;AAGA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAL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MA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAQA;AACA;A;;;;;;;;;;;;;;;;ACrEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAXA;AACA;AACA;AACA;AACA;AAQA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AALA;AAA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EA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAfA;AAqBA;AACA;AACA;;;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAvBA;AAuBA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAIA;AAKA;AAIA;AAKA;AACA;AACA;;;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;;AAzGA;AA4GA;AACA;AACA;AACA;AADA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AAGA;AACA;AACA;;;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AAEA;AACA;;;;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AARA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA;AACA;AACA;AACA;AAEA;A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ACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;;ACvCA;AACA;AAAA;AACA;AAAA;AACA;AATA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAbA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;A;;;;;;;;;;;;;;ACxEA;AACA;;;AANA;AACA;AACA;AACA;AAIA;AACA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;A;;;;;;;;ACnvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5BA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;ACJA;;;;;ACAA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACzfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClvhBA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}